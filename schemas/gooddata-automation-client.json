{
  "components": {
    "schemas": {
      "AbsoluteDateFilter": {
        "description": "A datetime filter specifying exact from and to values.",
        "properties": {
          "absoluteDateFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dataset": {
                "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
              },
              "from": {
                "example": "2020-07-01 18:23",
                "pattern": "^\\d{4}-\\d{1,2}-\\d{1,2}( \\d{1,2}:\\d{1,2})?$",
                "type": "string"
              },
              "localIdentifier": {
                "type": "string"
              },
              "to": {
                "example": "2020-07-16 23:59",
                "pattern": "^\\d{4}-\\d{1,2}-\\d{1,2}( \\d{1,2}:\\d{1,2})?$",
                "type": "string"
              }
            },
            "required": [
              "from",
              "to",
              "dataset"
            ],
            "type": "object"
          }
        },
        "required": [
          "absoluteDateFilter"
        ],
        "type": "object"
      },
      "AbstractMeasureValueFilter": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RankingFilter"
          }
        ],
        "type": "object"
      },
      "AdHocAutomation": {
        "properties": {
          "alert": {
            "$ref": "#/components/schemas/AutomationAlert"
          },
          "analyticalDashboard": {
            "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardIdentifier"
          },
          "description": {
            "maxLength": 255,
            "type": "string"
          },
          "details": {
            "additionalProperties": {
              "description": "Additional details to be included in the automated message.",
              "maxLength": 10000,
              "type": "string"
            },
            "description": "Additional details to be included in the automated message.",
            "maxLength": 10000,
            "type": "object"
          },
          "externalRecipients": {
            "description": "External recipients of the automation action results.",
            "items": {
              "$ref": "#/components/schemas/AutomationExternalRecipient"
            },
            "type": "array",
            "uniqueItems": true
          },
          "imageExports": {
            "items": {
              "$ref": "#/components/schemas/AutomationImageExport"
            },
            "type": "array",
            "uniqueItems": true
          },
          "metadata": {
            "$ref": "#/components/schemas/AutomationMetadata"
          },
          "notificationChannel": {
            "$ref": "#/components/schemas/DeclarativeNotificationChannelIdentifier"
          },
          "recipients": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserIdentifier"
            },
            "type": "array",
            "uniqueItems": true
          },
          "tabularExports": {
            "items": {
              "$ref": "#/components/schemas/AutomationTabularExport"
            },
            "type": "array",
            "uniqueItems": true
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenue",
              "Sales"
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "maxLength": 255,
            "type": "string"
          },
          "visualExports": {
            "items": {
              "$ref": "#/components/schemas/AutomationVisualExport"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "AfmIdentifier": {
        "description": "Reference to the attribute label to which the filter should be applied.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AfmObjectIdentifier"
          },
          {
            "$ref": "#/components/schemas/AfmLocalIdentifier"
          }
        ],
        "type": "object"
      },
      "AfmLocalIdentifier": {
        "properties": {
          "localIdentifier": {
            "example": "sampleAutoGenerated0123_ID",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          }
        },
        "required": [
          "localIdentifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifier": {
        "description": "ObjectIdentifier with `identifier` wrapper. This serves to distinguish MD object identifiers in AFM request from local identifiers.",
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "analyticalDashboard",
                  "attribute",
                  "dashboardPlugin",
                  "dataset",
                  "fact",
                  "label",
                  "metric",
                  "prompt",
                  "visualizationObject",
                  "filterContext"
                ],
                "example": "fact",
                "type": "string"
              }
            },
            "required": [
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierAttribute": {
        "description": "Reference to the date attribute to use.",
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "attribute"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierCore": {
        "description": "Reference to the metric, fact or attribute object to use for the metric.",
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "attribute",
                  "label",
                  "fact",
                  "metric"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierDataset": {
        "description": "Reference to the date dataset to which the filter should be applied.",
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "dataset"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierLabel": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "label"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AlertAfm": {
        "properties": {
          "attributes": {
            "description": "Attributes to be used in the computation.",
            "items": {
              "$ref": "#/components/schemas/AttributeItem"
            },
            "maximum": 1,
            "type": "array"
          },
          "auxMeasures": {
            "description": "Metrics to be referenced from other AFM objects (e.g. filters) but not included in the result.",
            "items": {
              "$ref": "#/components/schemas/MeasureItem"
            },
            "type": "array"
          },
          "filters": {
            "description": "Various filter types to filter execution result.",
            "items": {
              "$ref": "#/components/schemas/FilterDefinition"
            },
            "type": "array"
          },
          "measures": {
            "description": "Metrics to be computed. One metric if the alert condition is evaluated to a scalar. Two metrics when they should be evaluated to each other.",
            "items": {
              "$ref": "#/components/schemas/MeasureItem"
            },
            "maximum": 2,
            "minimum": 1,
            "type": "array"
          }
        },
        "required": [
          "filters",
          "measures"
        ],
        "type": "object"
      },
      "AlertCondition": {
        "description": "Alert trigger condition.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ComparisonWrapper"
          },
          {
            "$ref": "#/components/schemas/RangeWrapper"
          },
          {
            "$ref": "#/components/schemas/RelativeWrapper"
          }
        ],
        "type": "object"
      },
      "AlertConditionOperand": {
        "description": "Operand of the alert condition.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/LocalIdentifier"
          },
          {
            "$ref": "#/components/schemas/Value"
          }
        ],
        "type": "object"
      },
      "AlertDescription": {
        "properties": {
          "attribute": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "currentValues": {
            "items": {
              "$ref": "#/components/schemas/AlertEvaluationRow"
            },
            "type": "array"
          },
          "errorMessage": {
            "type": "string"
          },
          "formattedThreshold": {
            "type": "string"
          },
          "lowerThreshold": {
            "format": "double",
            "type": "number"
          },
          "metric": {
            "type": "string"
          },
          "remainingAlertEvaluationCount": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "enum": [
              "SUCCESS",
              "ERROR",
              "INTERNAL_ERROR",
              "TIMEOUT"
            ],
            "type": "string"
          },
          "threshold": {
            "format": "double",
            "type": "number"
          },
          "totalValueCount": {
            "format": "int32",
            "type": "integer"
          },
          "traceId": {
            "type": "string"
          },
          "triggeredAt": {
            "format": "date-time",
            "type": "string"
          },
          "triggeredCount": {
            "format": "int32",
            "type": "integer"
          },
          "upperThreshold": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "condition",
          "metric"
        ],
        "type": "object"
      },
      "AlertEvaluationRow": {
        "properties": {
          "computedMetric": {
            "$ref": "#/components/schemas/MetricRecord"
          },
          "labelValue": {
            "type": "string"
          },
          "primaryMetric": {
            "$ref": "#/components/schemas/MetricRecord"
          },
          "secondaryMetric": {
            "$ref": "#/components/schemas/MetricRecord"
          }
        },
        "type": "object"
      },
      "ArithmeticMeasure": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/LocalIdentifier"
          },
          "operator": {
            "description": "Arithmetic operator.\nDIFFERENCE - m₁−m₂ - the difference between two metrics.\nCHANGE - (m₁−m₂)÷m₂ - the relative difference between two metrics.\n",
            "enum": [
              "DIFFERENCE",
              "CHANGE"
            ],
            "type": "string"
          },
          "right": {
            "$ref": "#/components/schemas/LocalIdentifier"
          }
        },
        "required": [
          "left",
          "operator",
          "right"
        ],
        "type": "object"
      },
      "ArithmeticMeasureDefinition": {
        "description": "Metric representing arithmetics between other metrics.",
        "properties": {
          "arithmeticMeasure": {
            "properties": {
              "measureIdentifiers": {
                "description": "List of metrics to apply arithmetic operation by chosen operator.",
                "items": {
                  "$ref": "#/components/schemas/AfmLocalIdentifier"
                },
                "type": "array"
              },
              "operator": {
                "description": "Arithmetic operator describing operation between metrics.",
                "enum": [
                  "SUM",
                  "DIFFERENCE",
                  "MULTIPLICATION",
                  "RATIO",
                  "CHANGE"
                ],
                "example": "SUM",
                "type": "string"
              }
            },
            "required": [
              "measureIdentifiers",
              "operator"
            ],
            "type": "object"
          }
        },
        "required": [
          "arithmeticMeasure"
        ],
        "type": "object"
      },
      "AttributeFilter": {
        "description": "Abstract filter definition type attributes",
        "oneOf": [
          {
            "$ref": "#/components/schemas/NegativeAttributeFilter"
          },
          {
            "$ref": "#/components/schemas/PositiveAttributeFilter"
          }
        ],
        "type": "object"
      },
      "AttributeFilterElements": {
        "description": "Filter on specific set of label values.",
        "properties": {
          "values": {
            "description": "Set of label values.",
            "example": [
              "value1",
              "value2"
            ],
            "items": {
              "nullable": true,
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "AttributeItem": {
        "properties": {
          "label": {
            "$ref": "#/components/schemas/AfmObjectIdentifierLabel"
          },
          "localIdentifier": {
            "description": "Local identifier of the attribute. This can be used to reference the attribute in other parts of the execution definition.",
            "example": "attribute_1",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "showAllValues": {
            "default": false,
            "description": "Indicates whether to show all values of given attribute even if the data bound to those values is not available.",
            "type": "boolean"
          }
        },
        "required": [
          "label",
          "localIdentifier"
        ],
        "type": "object"
      },
      "AutomationAlert": {
        "properties": {
          "condition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ComparisonWrapper"
              },
              {
                "$ref": "#/components/schemas/RangeWrapper"
              },
              {
                "$ref": "#/components/schemas/RelativeWrapper"
              }
            ]
          },
          "execution": {
            "$ref": "#/components/schemas/AlertAfm"
          },
          "trigger": {
            "default": "ALWAYS",
            "description": "Trigger behavior for the alert.\nALWAYS - alert is triggered every time the condition is met.\nONCE - alert is triggered only once when the condition is met.\n",
            "enum": [
              "ALWAYS",
              "ONCE"
            ],
            "type": "string"
          }
        },
        "required": [
          "condition",
          "execution"
        ],
        "type": "object"
      },
      "AutomationExternalRecipient": {
        "properties": {
          "email": {
            "description": "E-mail address to send notifications from.",
            "format": "email",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "AutomationImageExport": {
        "properties": {
          "requestPayload": {
            "$ref": "#/components/schemas/ImageExportRequest"
          }
        },
        "required": [
          "requestPayload"
        ],
        "type": "object"
      },
      "AutomationMetadata": {
        "description": "Additional information for the automation.",
        "maxLength": 250000,
        "nullable": true,
        "properties": {
          "visibleFilters": {
            "items": {
              "$ref": "#/components/schemas/VisibleFilter"
            },
            "type": "array"
          },
          "widget": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutomationNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationContent"
          },
          {
            "properties": {
              "content": {
                "$ref": "#/components/schemas/WebhookMessage"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "content"
        ],
        "type": "object"
      },
      "AutomationTabularExport": {
        "properties": {
          "requestPayload": {
            "$ref": "#/components/schemas/TabularExportRequest"
          }
        },
        "required": [
          "requestPayload"
        ],
        "type": "object"
      },
      "AutomationVisualExport": {
        "properties": {
          "requestPayload": {
            "$ref": "#/components/schemas/VisualExportRequest"
          }
        },
        "required": [
          "requestPayload"
        ],
        "type": "object"
      },
      "Comparison": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/LocalIdentifier"
          },
          "operator": {
            "enum": [
              "GREATER_THAN",
              "GREATER_THAN_OR_EQUAL_TO",
              "LESS_THAN",
              "LESS_THAN_OR_EQUAL_TO",
              "EQUAL_TO",
              "NOT_EQUAL_TO"
            ],
            "type": "string"
          },
          "right": {
            "$ref": "#/components/schemas/AlertConditionOperand"
          }
        },
        "required": [
          "left",
          "operator",
          "right"
        ],
        "type": "object"
      },
      "ComparisonMeasureValueFilter": {
        "description": "Filter the result by comparing specified metric to given constant value, using given comparison operator.",
        "properties": {
          "comparisonMeasureValueFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dimensionality": {
                "description": "References to the attributes to be used when filtering.",
                "items": {
                  "$ref": "#/components/schemas/AfmIdentifier"
                },
                "type": "array"
              },
              "localIdentifier": {
                "type": "string"
              },
              "measure": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "operator": {
                "enum": [
                  "GREATER_THAN",
                  "GREATER_THAN_OR_EQUAL_TO",
                  "LESS_THAN",
                  "LESS_THAN_OR_EQUAL_TO",
                  "EQUAL_TO",
                  "NOT_EQUAL_TO"
                ],
                "example": "GREATER_THAN",
                "type": "string"
              },
              "treatNullValuesAs": {
                "description": "A value that will be substituted for null values in the metric for the comparisons.",
                "example": 0,
                "type": "number"
              },
              "value": {
                "example": 1327,
                "type": "number"
              }
            },
            "required": [
              "operator",
              "value",
              "measure"
            ],
            "type": "object"
          }
        },
        "required": [
          "comparisonMeasureValueFilter"
        ],
        "type": "object"
      },
      "ComparisonWrapper": {
        "properties": {
          "comparison": {
            "$ref": "#/components/schemas/Comparison"
          }
        },
        "required": [
          "comparison"
        ],
        "type": "object"
      },
      "CustomLabel": {
        "description": "Custom label object override.",
        "properties": {
          "title": {
            "description": "Override value.",
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CustomMetric": {
        "description": "Custom metric object override.",
        "properties": {
          "format": {
            "description": "Format override.",
            "type": "string"
          },
          "title": {
            "description": "Metric title override.",
            "type": "string"
          }
        },
        "required": [
          "format",
          "title"
        ],
        "type": "object"
      },
      "CustomOverride": {
        "description": "Custom cell value overrides (IDs will be replaced with specified values).",
        "properties": {
          "labels": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomLabel"
            },
            "description": "Map of CustomLabels with keys used as placeholders in document.",
            "type": "object"
          },
          "metrics": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomMetric"
            },
            "description": "Map of CustomMetrics with keys used as placeholders in document.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "DateFilter": {
        "description": "Abstract filter definition type for dates.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AbsoluteDateFilter"
          },
          {
            "$ref": "#/components/schemas/RelativeDateFilter"
          }
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboardIdentifier": {
        "description": "An analytical dashboard identifier.",
        "properties": {
          "id": {
            "description": "Identifier of the analytical dashboard.",
            "example": "dashboard123",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type.",
            "enum": [
              "analyticalDashboard"
            ],
            "example": "analyticalDashboard",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeNotificationChannelIdentifier": {
        "description": "A notification channel identifier.",
        "properties": {
          "id": {
            "description": "Notification channel identifier.",
            "example": "webhook123",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type.",
            "enum": [
              "notificationChannel"
            ],
            "example": "notificationChannel",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeUserIdentifier": {
        "description": "A user identifier.",
        "properties": {
          "id": {
            "description": "User identifier.",
            "example": "employee123",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type.",
            "enum": [
              "user"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DefaultSmtp": {
        "description": "Default SMTP destination for notifications.",
        "properties": {
          "fromEmail": {
            "default": "no-reply@gooddata.com",
            "description": "E-mail address to send notifications from. Currently this does not have any effect. E-mail 'no-reply@gooddata.com' is used instead.",
            "format": "email",
            "type": "string"
          },
          "fromEmailName": {
            "default": "GoodData",
            "description": "An optional e-mail name to send notifications from. Currently this does not have any effect. E-mail from name 'GoodData' is used instead.",
            "type": "string"
          },
          "type": {
            "description": "The destination type.",
            "enum": [
              "DEFAULT_SMTP"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ExportResult": {
        "properties": {
          "errorMessage": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "exportId": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "fileUri": {
            "type": "string"
          },
          "status": {
            "enum": [
              "SUCCESS",
              "ERROR",
              "INTERNAL_ERROR",
              "TIMEOUT"
            ],
            "type": "string"
          },
          "traceId": {
            "type": "string"
          },
          "triggeredAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "exportId",
          "fileName",
          "status"
        ],
        "type": "object"
      },
      "FilterDefinition": {
        "description": "Abstract filter definition type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/InlineFilterDefinition"
          },
          {
            "$ref": "#/components/schemas/RankingFilter"
          },
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/AbsoluteDateFilter"
          },
          {
            "$ref": "#/components/schemas/RelativeDateFilter"
          },
          {
            "$ref": "#/components/schemas/NegativeAttributeFilter"
          },
          {
            "$ref": "#/components/schemas/PositiveAttributeFilter"
          }
        ],
        "type": "object"
      },
      "FilterDefinitionForSimpleMeasure": {
        "description": "Abstract filter definition type for simple metric.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DateFilter"
          },
          {
            "$ref": "#/components/schemas/AttributeFilter"
          }
        ],
        "type": "object"
      },
      "ImageExportRequest": {
        "description": "Export request object describing the export properties and metadata for image exports.",
        "properties": {
          "dashboardId": {
            "description": "Dashboard identifier",
            "example": "761cd28b-3f57-4ac9-bbdc-1c552cc0d1d0",
            "type": "string"
          },
          "fileName": {
            "description": "File name to be used for retrieving the image document.",
            "example": "filename",
            "type": "string"
          },
          "format": {
            "description": "Requested resulting file type.",
            "enum": [
              "PNG"
            ],
            "example": "PNG",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "widgetIds": {
            "description": "List of widget identifiers to be exported. Note that only one widget is currently supported.",
            "items": {
              "type": "string"
            },
            "maxItems": 1,
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "dashboardId",
          "fileName",
          "format"
        ],
        "type": "object"
      },
      "InPlatform": {
        "description": "In-platform destination for notifications.",
        "properties": {
          "type": {
            "description": "The destination type.",
            "enum": [
              "IN_PLATFORM"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "InlineFilterDefinition": {
        "description": "Filter in form of direct MAQL query.",
        "properties": {
          "inline": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "filter": {
                "description": "MAQL query representing the filter.",
                "type": "string"
              },
              "localIdentifier": {
                "type": "string"
              }
            },
            "required": [
              "filter"
            ],
            "type": "object"
          }
        },
        "required": [
          "inline"
        ],
        "type": "object"
      },
      "InlineMeasureDefinition": {
        "description": "Metric defined by the raw MAQL query.",
        "properties": {
          "inline": {
            "properties": {
              "maql": {
                "description": "MAQL query defining the metric.",
                "type": "string"
              }
            },
            "required": [
              "maql"
            ],
            "type": "object"
          }
        },
        "required": [
          "inline"
        ],
        "type": "object"
      },
      "JsonNode": {
        "description": "Metadata definition in free-form JSON format.",
        "example": {},
        "maxLength": 15000,
        "nullable": true,
        "type": "object"
      },
      "LocalIdentifier": {
        "properties": {
          "format": {
            "default": "#,##0.00",
            "description": "Metric format.",
            "example": "#,##0",
            "maxLength": 2048,
            "nullable": true,
            "type": "string"
          },
          "localIdentifier": {
            "description": "Local identifier of the metric to be compared.",
            "example": "m1",
            "type": "string"
          },
          "title": {
            "description": "Metric title.",
            "example": "Revenue",
            "maxLength": 255,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "localIdentifier"
        ],
        "type": "object"
      },
      "MeasureDefinition": {
        "description": "Abstract metric definition type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/InlineMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/ArithmeticMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/SimpleMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/PopMeasureDefinition"
          }
        ],
        "type": "object"
      },
      "MeasureItem": {
        "description": "Metric is a quantity that is calculated from the data.",
        "properties": {
          "definition": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ArithmeticMeasureDefinition"
              },
              {
                "$ref": "#/components/schemas/InlineMeasureDefinition"
              },
              {
                "$ref": "#/components/schemas/PopDatasetMeasureDefinition"
              },
              {
                "$ref": "#/components/schemas/PopDateMeasureDefinition"
              },
              {
                "$ref": "#/components/schemas/PopMeasureDefinition"
              },
              {
                "$ref": "#/components/schemas/SimpleMeasureDefinition"
              }
            ]
          },
          "localIdentifier": {
            "description": "Local identifier of the metric. This can be used to reference the metric in other parts of the execution definition.",
            "example": "metric_1",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          }
        },
        "required": [
          "definition",
          "localIdentifier"
        ],
        "type": "object"
      },
      "MeasureValueFilter": {
        "description": "Abstract filter definition type filtering by the value of the metric.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          }
        ],
        "type": "object"
      },
      "MetricRecord": {
        "properties": {
          "formattedValue": {
            "type": "string"
          },
          "value": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "NegativeAttributeFilter": {
        "description": "Filter able to limit element values by label and related selected negated elements.",
        "properties": {
          "negativeAttributeFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "label": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "localIdentifier": {
                "type": "string"
              },
              "notIn": {
                "$ref": "#/components/schemas/AttributeFilterElements"
              }
            },
            "required": [
              "notIn",
              "label"
            ],
            "type": "object"
          }
        },
        "required": [
          "negativeAttributeFilter"
        ],
        "type": "object"
      },
      "Notification": {
        "properties": {
          "automationId": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AutomationNotification"
              },
              {
                "$ref": "#/components/schemas/TestNotification"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "isRead": {
            "type": "boolean"
          },
          "workspaceId": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "data",
          "id",
          "isRead"
        ],
        "type": "object"
      },
      "NotificationChannelDestination": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Webhook"
          },
          {
            "$ref": "#/components/schemas/Smtp"
          },
          {
            "$ref": "#/components/schemas/DefaultSmtp"
          },
          {
            "$ref": "#/components/schemas/InPlatform"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "NotificationContent": {
        "discriminator": {
          "mapping": {
            "AUTOMATION": "#/components/schemas/AutomationNotification",
            "TEST": "#/components/schemas/TestNotification"
          },
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "NotificationFilter": {
        "properties": {
          "filter": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "filter",
          "title"
        ],
        "type": "object"
      },
      "Notifications": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/NotificationsMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "type": "object"
      },
      "NotificationsMeta": {
        "properties": {
          "total": {
            "$ref": "#/components/schemas/NotificationsMetaTotal"
          }
        },
        "type": "object"
      },
      "NotificationsMetaTotal": {
        "properties": {
          "all": {
            "format": "int64",
            "type": "integer"
          },
          "unread": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "all",
          "unread"
        ],
        "type": "object"
      },
      "PdfTableStyle": {
        "description": "Custom CSS styles for the table. (PDF, HTML)",
        "example": [
          {
            "properties": [
              {
                "key": "font-size",
                "value": "30px"
              }
            ],
            "selector": "th"
          }
        ],
        "properties": {
          "properties": {
            "description": "List of CSS properties.",
            "items": {
              "$ref": "#/components/schemas/PdfTableStyleProperty"
            },
            "type": "array"
          },
          "selector": {
            "description": "CSS selector where to apply given properties.",
            "type": "string"
          }
        },
        "required": [
          "selector"
        ],
        "type": "object"
      },
      "PdfTableStyleProperty": {
        "description": "CSS property.",
        "properties": {
          "key": {
            "description": "CSS property key.",
            "type": "string"
          },
          "value": {
            "description": "CSS property value.",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "PopDataset": {
        "description": "Combination of the date data set to use and how many periods ago to calculate the previous period for.",
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
          },
          "periodsAgo": {
            "description": "Number of periods ago to calculate the previous period for.",
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "dataset",
          "periodsAgo"
        ],
        "type": "object"
      },
      "PopDatasetMeasureDefinition": {
        "description": "Previous period type of metric.",
        "properties": {
          "previousPeriodMeasure": {
            "properties": {
              "dateDatasets": {
                "description": "Specification of which date data sets to use for determining the period to calculate the previous period for.",
                "items": {
                  "$ref": "#/components/schemas/PopDataset"
                },
                "type": "array"
              },
              "measureIdentifier": {
                "$ref": "#/components/schemas/AfmLocalIdentifier"
              }
            },
            "required": [
              "dateDatasets",
              "measureIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "previousPeriodMeasure"
        ],
        "type": "object"
      },
      "PopDate": {
        "description": "Combination of the date attribute to use and how many periods ago to calculate the PoP for.",
        "properties": {
          "attribute": {
            "$ref": "#/components/schemas/AfmObjectIdentifierAttribute"
          },
          "periodsAgo": {
            "description": "Number of periods ago to calculate the previous period for.",
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "attribute",
          "periodsAgo"
        ],
        "type": "object"
      },
      "PopDateMeasureDefinition": {
        "description": "Period over period type of metric.",
        "properties": {
          "overPeriodMeasure": {
            "properties": {
              "dateAttributes": {
                "description": "Attributes to use for determining the period to calculate the PoP for.",
                "items": {
                  "$ref": "#/components/schemas/PopDate"
                },
                "type": "array"
              },
              "measureIdentifier": {
                "$ref": "#/components/schemas/AfmLocalIdentifier"
              }
            },
            "required": [
              "dateAttributes",
              "measureIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "overPeriodMeasure"
        ],
        "type": "object"
      },
      "PopMeasureDefinition": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PopDatasetMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/PopDateMeasureDefinition"
          }
        ],
        "type": "object"
      },
      "PositiveAttributeFilter": {
        "description": "Filter able to limit element values by label and related selected elements.",
        "properties": {
          "positiveAttributeFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "in": {
                "$ref": "#/components/schemas/AttributeFilterElements"
              },
              "label": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "localIdentifier": {
                "type": "string"
              }
            },
            "required": [
              "in",
              "label"
            ],
            "type": "object"
          }
        },
        "required": [
          "positiveAttributeFilter"
        ],
        "type": "object"
      },
      "Range": {
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Value"
          },
          "measure": {
            "$ref": "#/components/schemas/LocalIdentifier"
          },
          "operator": {
            "enum": [
              "BETWEEN",
              "NOT_BETWEEN"
            ],
            "type": "string"
          },
          "to": {
            "$ref": "#/components/schemas/Value"
          }
        },
        "required": [
          "from",
          "measure",
          "operator",
          "to"
        ],
        "type": "object"
      },
      "RangeMeasureValueFilter": {
        "description": "Filter the result by comparing specified metric to given range of values.",
        "properties": {
          "rangeMeasureValueFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dimensionality": {
                "description": "References to the attributes to be used when filtering.",
                "items": {
                  "$ref": "#/components/schemas/AfmIdentifier"
                },
                "type": "array"
              },
              "from": {
                "example": 100,
                "type": "number"
              },
              "localIdentifier": {
                "type": "string"
              },
              "measure": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "operator": {
                "enum": [
                  "BETWEEN",
                  "NOT_BETWEEN"
                ],
                "example": "BETWEEN",
                "type": "string"
              },
              "to": {
                "example": 999,
                "type": "number"
              },
              "treatNullValuesAs": {
                "description": "A value that will be substituted for null values in the metric for the comparisons.",
                "example": 0,
                "type": "number"
              }
            },
            "required": [
              "from",
              "operator",
              "to",
              "measure"
            ],
            "type": "object"
          }
        },
        "required": [
          "rangeMeasureValueFilter"
        ],
        "type": "object"
      },
      "RangeWrapper": {
        "properties": {
          "range": {
            "$ref": "#/components/schemas/Range"
          }
        },
        "required": [
          "range"
        ],
        "type": "object"
      },
      "RankingFilter": {
        "description": "Filter the result on top/bottom N values according to given metric(s).",
        "properties": {
          "rankingFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dimensionality": {
                "description": "References to the attributes to be used when filtering.",
                "items": {
                  "$ref": "#/components/schemas/AfmIdentifier"
                },
                "type": "array"
              },
              "localIdentifier": {
                "type": "string"
              },
              "measures": {
                "description": "References to the metrics to be used when filtering.",
                "items": {
                  "$ref": "#/components/schemas/AfmIdentifier"
                },
                "type": "array"
              },
              "operator": {
                "description": "The type of ranking to use, TOP or BOTTOM.",
                "enum": [
                  "TOP",
                  "BOTTOM"
                ],
                "type": "string"
              },
              "value": {
                "description": "Number of top/bottom values to filter.",
                "example": 5,
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "measures",
              "operator",
              "value"
            ],
            "type": "object"
          }
        },
        "required": [
          "rankingFilter"
        ],
        "type": "object"
      },
      "Relative": {
        "properties": {
          "measure": {
            "$ref": "#/components/schemas/ArithmeticMeasure"
          },
          "operator": {
            "description": "Relative condition operator.\nINCREASES_BY - the metric increases by the specified value.\nDECREASES_BY - the metric decreases by the specified value.\nCHANGES_BY - the metric increases or decreases by the specified value.\n",
            "enum": [
              "INCREASES_BY",
              "DECREASES_BY",
              "CHANGES_BY"
            ],
            "type": "string"
          },
          "threshold": {
            "$ref": "#/components/schemas/Value"
          }
        },
        "required": [
          "measure",
          "operator",
          "threshold"
        ],
        "type": "object"
      },
      "RelativeDateFilter": {
        "description": "A date filter specifying a time interval that is relative to the current date. For example, last week, next month, and so on. Field dataset is representing qualifier of date dimension.",
        "properties": {
          "relativeDateFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dataset": {
                "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
              },
              "from": {
                "description": "Start of the filtering interval. Specified by number of periods (with respect to given granularity). Typically negative (historical time interval like -2 for '2 days/weeks, ... ago').",
                "example": -6,
                "format": "int32",
                "type": "integer"
              },
              "granularity": {
                "description": "Date granularity specifying particular date attribute in given dimension.",
                "enum": [
                  "MINUTE",
                  "HOUR",
                  "DAY",
                  "WEEK",
                  "MONTH",
                  "QUARTER",
                  "YEAR",
                  "MINUTE_OF_HOUR",
                  "HOUR_OF_DAY",
                  "DAY_OF_WEEK",
                  "DAY_OF_MONTH",
                  "DAY_OF_YEAR",
                  "WEEK_OF_YEAR",
                  "MONTH_OF_YEAR",
                  "QUARTER_OF_YEAR"
                ],
                "example": "DAY",
                "type": "string"
              },
              "localIdentifier": {
                "type": "string"
              },
              "to": {
                "description": "End of the filtering interval. Specified by number of periods (with respect to given granularity). Value 'O' is representing current time-interval (current day, week, ...).",
                "example": 0,
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "from",
              "granularity",
              "to",
              "dataset"
            ],
            "type": "object"
          }
        },
        "required": [
          "relativeDateFilter"
        ],
        "type": "object"
      },
      "RelativeWrapper": {
        "properties": {
          "relative": {
            "$ref": "#/components/schemas/Relative"
          }
        },
        "required": [
          "relative"
        ],
        "type": "object"
      },
      "Settings": {
        "description": "Additional settings.",
        "properties": {
          "mergeHeaders": {
            "description": "Merge equal headers in neighbouring cells. (XLSX)",
            "example": true,
            "type": "boolean"
          },
          "pdfPageSize": {
            "description": "Page size and orientation. (PDF)",
            "example": "a4 landscape",
            "type": "string"
          },
          "pdfTableStyle": {
            "description": "Custom CSS styles for the table. (PDF, HTML)",
            "example": [
              {
                "properties": [
                  {
                    "key": "font-size",
                    "value": "30px"
                  }
                ],
                "selector": "th"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/PdfTableStyle"
            },
            "type": "array"
          },
          "pdfTopLeftContent": {
            "description": "Top left header content. (PDF)",
            "example": "Good",
            "type": "string"
          },
          "pdfTopRightContent": {
            "description": "Top right header content. (PDF)",
            "example": "Morning",
            "type": "string"
          },
          "showFilters": {
            "description": "Print applied filters on top of the document. (PDF/HTML when visualizationObject is given)",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SimpleMeasureDefinition": {
        "description": "Metric defined by referencing a MAQL metric or an LDM fact object with aggregation.",
        "properties": {
          "measure": {
            "properties": {
              "aggregation": {
                "description": "Definition of aggregation type of the metric.",
                "enum": [
                  "SUM",
                  "COUNT",
                  "AVG",
                  "MIN",
                  "MAX",
                  "MEDIAN",
                  "RUNSUM",
                  "APPROXIMATE_COUNT"
                ],
                "example": "SUM",
                "type": "string"
              },
              "computeRatio": {
                "default": false,
                "description": "If true, compute the percentage of given metric values (broken down by AFM attributes) to the total (not broken down).",
                "example": true,
                "type": "boolean"
              },
              "filters": {
                "description": "Metrics can be filtered by attribute filters with the same interface as ones for global AFM. Note that only one DateFilter is allowed.",
                "items": {
                  "$ref": "#/components/schemas/FilterDefinitionForSimpleMeasure"
                },
                "type": "array"
              },
              "item": {
                "$ref": "#/components/schemas/AfmObjectIdentifierCore"
              }
            },
            "required": [
              "item"
            ],
            "type": "object"
          }
        },
        "required": [
          "measure"
        ],
        "type": "object"
      },
      "Smtp": {
        "description": "Custom SMTP destination for notifications. The properties host, port, username, and password are required on create and update",
        "properties": {
          "fromEmail": {
            "default": "no-reply@gooddata.com",
            "description": "E-mail address to send notifications from.",
            "format": "email",
            "type": "string"
          },
          "fromEmailName": {
            "default": "GoodData",
            "description": "An optional e-mail name to send notifications from.",
            "type": "string"
          },
          "host": {
            "description": "The SMTP server address.",
            "type": "string"
          },
          "password": {
            "description": "The SMTP server password.",
            "type": "string",
            "writeOnly": true
          },
          "port": {
            "description": "The SMTP server port.",
            "enum": [
              25,
              465,
              587,
              2525
            ],
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "The destination type.",
            "enum": [
              "SMTP"
            ],
            "type": "string"
          },
          "username": {
            "description": "The SMTP server username.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "TabularExportRequest": {
        "description": "Export request object describing the export properties and overrides for tabular exports.",
        "properties": {
          "customOverride": {
            "$ref": "#/components/schemas/CustomOverride"
          },
          "executionResult": {
            "description": "Execution result identifier.",
            "example": "ff483727196c9dc862c7fd3a5a84df55c96d61a4",
            "type": "string"
          },
          "fileName": {
            "description": "Filename of downloaded file without extension.",
            "example": "result",
            "type": "string"
          },
          "format": {
            "description": "Expected file format.",
            "enum": [
              "CSV",
              "XLSX",
              "HTML",
              "PDF"
            ],
            "example": "CSV",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "relatedDashboardId": {
            "description": "Analytical dashboard identifier. Optional identifier, which informs the system that the export is related to a specific dashboard.",
            "example": "761cd28b-3f57-4ac9-bbdc-1c552cc0d1d0",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/Settings"
          },
          "visualizationObject": {
            "description": "Visualization object identifier. Alternative to executionResult property.",
            "example": "f7c359bc-c230-4487-b15b-ad9685bcb537",
            "type": "string"
          },
          "visualizationObjectCustomFilters": {
            "description": "Optional custom filters (as array of IFilter objects defined in UI SDK) to be applied when visualizationObject is given.",
            "example": "[{\"negativeAttributeFilter\":{\"displayForm\":{\"identifier\":{\"id\":\"products.category\",\"type\":\"label\"}},\"notIn\":{\"values\":[\"Books\"]}}}]",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "fileName",
          "format"
        ],
        "type": "object"
      },
      "TestDestinationRequest": {
        "description": "Request body with notification channel destination to test.",
        "properties": {
          "destination": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DefaultSmtp"
              },
              {
                "$ref": "#/components/schemas/InPlatform"
              },
              {
                "$ref": "#/components/schemas/Smtp"
              },
              {
                "$ref": "#/components/schemas/Webhook"
              }
            ]
          }
        },
        "required": [
          "destination"
        ],
        "type": "object"
      },
      "TestNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationContent"
          },
          {
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "message"
        ],
        "type": "object"
      },
      "TestResponse": {
        "description": "Response from notification channel testing.",
        "properties": {
          "error": {
            "description": "Field containing more details in case of a failure. Details are available to a privileged user only.",
            "example": "Authentication failed",
            "type": "string"
          },
          "successful": {
            "description": "A flag indicating whether test passed or not.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "successful"
        ],
        "type": "object"
      },
      "TriggerAutomationRequest": {
        "properties": {
          "automation": {
            "$ref": "#/components/schemas/AdHocAutomation"
          }
        },
        "required": [
          "automation"
        ],
        "type": "object"
      },
      "Value": {
        "properties": {
          "value": {
            "description": "Value of the alert threshold to compare the metric to.",
            "example": 1000,
            "type": "number"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "VisibleFilter": {
        "properties": {
          "isAllTimeDateFilter": {
            "default": false,
            "description": "Indicates if the filter is an all-time date filter. Such a filter is not included in report computation, so there is no filter with the same 'localIdentifier' to be found. In such cases, this flag is used to inform the server to not search for the filter in the definitions and include it anyways.",
            "type": "boolean"
          },
          "localIdentifier": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VisualExportRequest": {
        "description": "Export request object describing the export properties and metadata for dashboard PDF exports.",
        "properties": {
          "dashboardId": {
            "description": "Dashboard identifier",
            "example": "761cd28b-3f57-4ac9-bbdc-1c552cc0d1d0",
            "type": "string"
          },
          "fileName": {
            "description": "File name to be used for retrieving the pdf document.",
            "example": "filename",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata definition in free-form JSON format.",
            "example": "{}",
            "type": "object"
          }
        },
        "required": [
          "dashboardId",
          "fileName"
        ],
        "type": "object"
      },
      "Webhook": {
        "description": "Webhook destination for notifications. The property url is required on create and update.",
        "properties": {
          "hasToken": {
            "description": "Flag indicating if webhook has a token.",
            "maxLength": 10000,
            "nullable": true,
            "readOnly": true,
            "type": "boolean"
          },
          "token": {
            "description": "Bearer token for the webhook.",
            "example": "secret",
            "maxLength": 10000,
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "type": {
            "description": "The destination type.",
            "enum": [
              "WEBHOOK"
            ],
            "type": "string"
          },
          "url": {
            "description": "The webhook URL.",
            "example": "https://webhook.site/something",
            "maxLength": 255,
            "pattern": "https?\\://.*",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "WebhookAutomationInfo": {
        "properties": {
          "dashboardTitle": {
            "type": "string"
          },
          "dashboardURL": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "isCustomDashboardURL": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "dashboardURL",
          "id",
          "isCustomDashboardURL"
        ],
        "type": "object"
      },
      "WebhookMessage": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookMessageData"
          },
          "timestamp": {
            "type": "string"
          },
          "type": {
            "enum": [
              "automation-task.completed",
              "automation-task.limit-exceeded"
            ],
            "type": "string"
          }
        },
        "required": [
          "data",
          "timestamp",
          "type"
        ],
        "type": "object"
      },
      "WebhookMessageData": {
        "properties": {
          "alert": {
            "$ref": "#/components/schemas/AlertDescription"
          },
          "automation": {
            "$ref": "#/components/schemas/WebhookAutomationInfo"
          },
          "details": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "filters": {
            "items": {
              "$ref": "#/components/schemas/NotificationFilter"
            },
            "type": "array"
          },
          "imageExports": {
            "items": {
              "$ref": "#/components/schemas/ExportResult"
            },
            "type": "array"
          },
          "recipients": {
            "items": {
              "$ref": "#/components/schemas/WebhookRecipient"
            },
            "type": "array"
          },
          "remainingActionCount": {
            "format": "int32",
            "type": "integer"
          },
          "tabularExports": {
            "items": {
              "$ref": "#/components/schemas/ExportResult"
            },
            "type": "array"
          },
          "visualExports": {
            "items": {
              "$ref": "#/components/schemas/ExportResult"
            },
            "type": "array"
          }
        },
        "required": [
          "automation"
        ],
        "type": "object"
      },
      "WebhookRecipient": {
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "id"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/v1/actions/notificationChannels/test": {
      "post": {
        "description": "Tests the notification channel by sending a test notification.",
        "operationId": "testNotificationChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDestinationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful connection": {
                    "description": "An example of a successful connection",
                    "value": {
                      "successful": true
                    }
                  },
                  "An example of an unsuccessful connection": {
                    "description": "An example of an unsuccessful connection",
                    "value": {
                      "error": "Authentication failed",
                      "successful": false
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            },
            "description": "The result of the test of a notification channel connection."
          }
        },
        "summary": "Test notification channel.",
        "tags": [
          "Notification Channels",
          "actions"
        ]
      }
    },
    "/api/v1/actions/notificationChannels/{notificationChannelId}/test": {
      "post": {
        "description": "Tests the existing notification channel by sending a test notification.",
        "operationId": "testExistingNotificationChannel",
        "parameters": [
          {
            "in": "path",
            "name": "notificationChannelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDestinationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful connection": {
                    "description": "An example of a successful connection",
                    "value": {
                      "successful": true
                    }
                  },
                  "An example of an unsuccessful connection": {
                    "description": "An example of an unsuccessful connection",
                    "value": {
                      "error": "Authentication failed",
                      "successful": false
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            },
            "description": "The result of the test of a notification channel connection."
          }
        },
        "summary": "Test existing notification channel.",
        "tags": [
          "Notification Channels",
          "actions"
        ]
      }
    },
    "/api/v1/actions/notifications": {
      "get": {
        "description": "Get latest in-platform notifications for the current user.",
        "operationId": "getNotifications",
        "parameters": [
          {
            "description": "Workspace ID to filter notifications by.",
            "in": "query",
            "name": "workspaceId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter notifications by read status.",
            "in": "query",
            "name": "isRead",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Zero-based page index (0..N)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": "0",
              "minimum": 0,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The size of the page to be returned.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": "20",
              "minimum": 1,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Additional meta information to include in the response.",
            "explode": true,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "total",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get latest notifications.",
        "tags": [
          "Notification Channels",
          "actions"
        ]
      }
    },
    "/api/v1/actions/notifications/markAsRead": {
      "post": {
        "description": "Mark all user in-platform notifications as read.",
        "operationId": "markAsReadNotificationAll",
        "parameters": [
          {
            "description": "Workspace ID where to mark notifications as read.",
            "in": "query",
            "name": "workspaceId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Mark all notifications as read.",
        "tags": [
          "Notification Channels",
          "actions"
        ]
      }
    },
    "/api/v1/actions/notifications/{notificationId}/markAsRead": {
      "post": {
        "description": "Mark in-platform notification by its ID as read.",
        "operationId": "markAsReadNotification",
        "parameters": [
          {
            "description": "Notification ID to mark as read.",
            "in": "path",
            "name": "notificationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Mark notification as read.",
        "tags": [
          "Notification Channels",
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/automations/trigger": {
      "post": {
        "description": "Trigger the automation in the request.",
        "operationId": "triggerAutomation",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerAutomationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The automation is successfully triggered."
          }
        },
        "summary": "Trigger automation.",
        "tags": [
          "Automations",
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/automations/{automationId}/trigger": {
      "post": {
        "description": "Trigger the existing automation to execute immediately.",
        "operationId": "triggerExistingAutomation",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "automationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The automation is successfully triggered."
          }
        },
        "summary": "Trigger existing automation.",
        "tags": [
          "Automations",
          "actions"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "GoodData.CN endpoint",
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "| execution of some form of computation (RPC over JSON)",
      "name": "actions"
    }
  ]
}
