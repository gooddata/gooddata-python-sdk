{
  "components": {
    "schemas": {
      "AlertDescription": {
        "properties": {
          "attribute": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "currentValues": {
            "items": {
              "$ref": "#/components/schemas/AlertEvaluationRow"
            },
            "type": "array"
          },
          "errorMessage": {
            "type": "string"
          },
          "filterCount": {
            "format": "int32",
            "type": "integer"
          },
          "formattedThreshold": {
            "type": "string"
          },
          "lowerThreshold": {
            "format": "double",
            "type": "number"
          },
          "metric": {
            "type": "string"
          },
          "remainingAlertEvaluationCount": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "enum": [
              "SUCCESS",
              "ERROR",
              "INTERNAL_ERROR",
              "TIMEOUT"
            ],
            "type": "string"
          },
          "threshold": {
            "format": "double",
            "type": "number"
          },
          "totalValueCount": {
            "format": "int32",
            "type": "integer"
          },
          "traceId": {
            "type": "string"
          },
          "triggeredCount": {
            "format": "int32",
            "type": "integer"
          },
          "upperThreshold": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "condition",
          "metric"
        ],
        "type": "object"
      },
      "AlertEvaluationRow": {
        "properties": {
          "computedMetric": {
            "$ref": "#/components/schemas/MetricRecord"
          },
          "labelValue": {
            "type": "string"
          },
          "primaryMetric": {
            "$ref": "#/components/schemas/MetricRecord"
          },
          "secondaryMetric": {
            "$ref": "#/components/schemas/MetricRecord"
          }
        },
        "type": "object"
      },
      "AutomationNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationContent"
          },
          {
            "properties": {
              "content": {
                "$ref": "#/components/schemas/WebhookMessage"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "content"
        ],
        "type": "object"
      },
      "DefaultSmtp": {
        "description": "Default SMTP destination for notifications.",
        "properties": {
          "fromEmail": {
            "default": "no-reply@gooddata.com",
            "description": "E-mail address to send notifications from. Currently this does not have any effect. E-mail 'no-reply@gooddata.com' is used instead.",
            "format": "email",
            "type": "string"
          },
          "fromEmailName": {
            "default": "GoodData",
            "description": "An optional e-mail name to send notifications from. Currently this does not have any effect. E-mail from name 'GoodData' is used instead.",
            "type": "string"
          },
          "type": {
            "description": "The destination type.",
            "enum": [
              "DEFAULT_SMTP"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ExportResult": {
        "properties": {
          "errorMessage": {
            "type": "string"
          },
          "exportId": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "fileUri": {
            "type": "string"
          },
          "status": {
            "enum": [
              "SUCCESS",
              "ERROR",
              "INTERNAL_ERROR",
              "TIMEOUT"
            ],
            "type": "string"
          },
          "traceId": {
            "type": "string"
          }
        },
        "required": [
          "exportId",
          "fileName",
          "status"
        ],
        "type": "object"
      },
      "InPlatform": {
        "description": "In-platform destination for notifications.",
        "properties": {
          "type": {
            "description": "The destination type.",
            "enum": [
              "IN_PLATFORM"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "MetricRecord": {
        "properties": {
          "formattedValue": {
            "type": "string"
          },
          "value": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "Notification": {
        "properties": {
          "automationId": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AutomationNotification"
              },
              {
                "$ref": "#/components/schemas/TestNotification"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "isRead": {
            "type": "boolean"
          },
          "workspaceId": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "data",
          "id",
          "isRead"
        ],
        "type": "object"
      },
      "NotificationChannelDestination": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Webhook"
          },
          {
            "$ref": "#/components/schemas/Smtp"
          },
          {
            "$ref": "#/components/schemas/DefaultSmtp"
          },
          {
            "$ref": "#/components/schemas/InPlatform"
          }
        ],
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "NotificationContent": {
        "discriminator": {
          "mapping": {
            "AUTOMATION": "#/components/schemas/AutomationNotification",
            "TEST": "#/components/schemas/TestNotification"
          },
          "propertyName": "type"
        },
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "Notifications": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "type": "array"
          },
          "meta": {
            "$ref": "#/components/schemas/NotificationsMeta"
          }
        },
        "required": [
          "data",
          "meta"
        ],
        "type": "object"
      },
      "NotificationsMeta": {
        "properties": {
          "total": {
            "$ref": "#/components/schemas/NotificationsMetaTotal"
          }
        },
        "type": "object"
      },
      "NotificationsMetaTotal": {
        "properties": {
          "all": {
            "format": "int64",
            "type": "integer"
          },
          "unread": {
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "all",
          "unread"
        ],
        "type": "object"
      },
      "Smtp": {
        "description": "Custom SMTP destination for notifications. The properties host, port, username, and password are required on create and update",
        "properties": {
          "fromEmail": {
            "default": "no-reply@gooddata.com",
            "description": "E-mail address to send notifications from.",
            "format": "email",
            "type": "string"
          },
          "fromEmailName": {
            "default": "GoodData",
            "description": "An optional e-mail name to send notifications from.",
            "type": "string"
          },
          "host": {
            "description": "The SMTP server address.",
            "type": "string"
          },
          "password": {
            "description": "The SMTP server password.",
            "type": "string",
            "writeOnly": true
          },
          "port": {
            "description": "The SMTP server port.",
            "enum": [
              25,
              465,
              587,
              2525
            ],
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "The destination type.",
            "enum": [
              "SMTP"
            ],
            "type": "string"
          },
          "username": {
            "description": "The SMTP server username.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "TestDestinationRequest": {
        "description": "Request body with notification channel destination to test.",
        "properties": {
          "destination": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/DefaultSmtp"
              },
              {
                "$ref": "#/components/schemas/InPlatform"
              },
              {
                "$ref": "#/components/schemas/Smtp"
              },
              {
                "$ref": "#/components/schemas/Webhook"
              }
            ]
          }
        },
        "required": [
          "destination"
        ],
        "type": "object"
      },
      "TestNotification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationContent"
          },
          {
            "properties": {
              "message": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "message"
        ],
        "type": "object"
      },
      "TestResponse": {
        "description": "Response from notification channel testing.",
        "properties": {
          "error": {
            "description": "Field containing more details in case of a failure. Details are available to a privileged user only.",
            "example": "Authentication failed",
            "type": "string"
          },
          "successful": {
            "description": "A flag indicating whether test passed or not.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "successful"
        ],
        "type": "object"
      },
      "Webhook": {
        "description": "Webhook destination for notifications. The property url is required on create and update.",
        "properties": {
          "hasToken": {
            "description": "Flag indicating if webhook has a token.",
            "maxLength": 10000,
            "nullable": true,
            "readOnly": true,
            "type": "boolean"
          },
          "token": {
            "description": "Bearer token for the webhook.",
            "example": "secret",
            "maxLength": 10000,
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "type": {
            "description": "The destination type.",
            "enum": [
              "WEBHOOK"
            ],
            "type": "string"
          },
          "url": {
            "description": "The webhook URL.",
            "example": "https://webhook.site/something",
            "maxLength": 255,
            "pattern": "https?\\://.*",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "WebhookAutomationInfo": {
        "properties": {
          "dashboardURL": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "isCustomDashboardURL": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "dashboardURL",
          "id",
          "isCustomDashboardURL"
        ],
        "type": "object"
      },
      "WebhookMessage": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/WebhookMessageData"
          },
          "timestamp": {
            "type": "string"
          },
          "type": {
            "enum": [
              "automation-task.completed",
              "automation-task.limit-exceeded"
            ],
            "type": "string"
          }
        },
        "required": [
          "data",
          "timestamp",
          "type"
        ],
        "type": "object"
      },
      "WebhookMessageData": {
        "properties": {
          "alert": {
            "$ref": "#/components/schemas/AlertDescription"
          },
          "automation": {
            "$ref": "#/components/schemas/WebhookAutomationInfo"
          },
          "details": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "recipients": {
            "items": {
              "$ref": "#/components/schemas/WebhookRecipient"
            },
            "type": "array"
          },
          "remainingActionCount": {
            "format": "int32",
            "type": "integer"
          },
          "tabularExports": {
            "items": {
              "$ref": "#/components/schemas/ExportResult"
            },
            "type": "array"
          },
          "visualExports": {
            "items": {
              "$ref": "#/components/schemas/ExportResult"
            },
            "type": "array"
          }
        },
        "required": [
          "automation"
        ],
        "type": "object"
      },
      "WebhookRecipient": {
        "properties": {
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "id"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/v1/actions/notificationChannels/test": {
      "post": {
        "description": "Tests the notification channel by sending a test notification.",
        "operationId": "testNotificationChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDestinationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful connection": {
                    "description": "An example of a successful connection",
                    "value": {
                      "successful": true
                    }
                  },
                  "An example of an unsuccessful connection": {
                    "description": "An example of an unsuccessful connection",
                    "value": {
                      "error": "Authentication failed",
                      "successful": false
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            },
            "description": "The result of the test of a notification channel connection."
          }
        },
        "summary": "Test notification channel.",
        "tags": [
          "Notification Channels",
          "actions"
        ]
      }
    },
    "/api/v1/actions/notificationChannels/{notificationChannelId}/test": {
      "post": {
        "description": "Tests the existing notification channel by sending a test notification.",
        "operationId": "testExistingNotificationChannel",
        "parameters": [
          {
            "in": "path",
            "name": "notificationChannelId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDestinationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful connection": {
                    "description": "An example of a successful connection",
                    "value": {
                      "successful": true
                    }
                  },
                  "An example of an unsuccessful connection": {
                    "description": "An example of an unsuccessful connection",
                    "value": {
                      "error": "Authentication failed",
                      "successful": false
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            },
            "description": "The result of the test of a notification channel connection."
          }
        },
        "summary": "Test existing notification channel.",
        "tags": [
          "Notification Channels",
          "actions"
        ]
      }
    },
    "/api/v1/actions/notifications": {
      "get": {
        "description": "Get latest in-platform notifications for the current user.",
        "operationId": "getNotifications",
        "parameters": [
          {
            "description": "Workspace ID to filter notifications by.",
            "in": "query",
            "name": "workspaceId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter notifications by read status.",
            "in": "query",
            "name": "isRead",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Zero-based page index (0..N)",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": "0",
              "minimum": 0,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The size of the page to be returned.",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": "20",
              "minimum": 1,
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Additional meta information to include in the response.",
            "explode": true,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "total",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get latest notifications.",
        "tags": [
          "actions"
        ]
      }
    },
    "/api/v1/actions/notifications/markAsRead": {
      "post": {
        "description": "Mark all user in-platform notifications as read.",
        "operationId": "markAsReadNotificationAll",
        "parameters": [
          {
            "description": "Workspace ID where to mark notifications as read.",
            "in": "query",
            "name": "workspaceId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Mark all notifications as read.",
        "tags": [
          "actions"
        ]
      }
    },
    "/api/v1/actions/notifications/{notificationId}/markAsRead": {
      "post": {
        "description": "Mark in-platform notification by its ID as read.",
        "operationId": "markAsReadNotification",
        "parameters": [
          {
            "description": "Notification ID to mark as read.",
            "in": "path",
            "name": "notificationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Mark notification as read.",
        "tags": [
          "actions"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "GoodData.CN endpoint",
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "| execution of some form of computation (RPC over JSON)",
      "name": "actions"
    }
  ]
}
