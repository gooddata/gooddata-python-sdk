{
  "components": {
    "parameters": {
      "idPathParameter": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
          "type": "string"
        }
      },
      "page": {
        "description": "Zero-based page index (0..N)",
        "in": "query",
        "name": "page",
        "schema": {
          "default": 0,
          "type": "integer"
        }
      },
      "size": {
        "description": "The size of the page to be returned",
        "in": "query",
        "name": "size",
        "schema": {
          "default": 20,
          "type": "integer"
        }
      },
      "sort": {
        "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
        "in": "query",
        "name": "sort",
        "schema": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "responses": {
      "Deleted": {
        "description": "Successfully deleted"
      }
    },
    "schemas": {
      "AFM": {
        "description": "Top level executable entity. Combination of [A]ttributes, [F]ilters & [M]etrics.",
        "properties": {
          "attributes": {
            "description": "Attributes to be used in the computation.",
            "items": {
              "$ref": "#/components/schemas/AttributeItem"
            },
            "type": "array"
          },
          "auxMeasures": {
            "description": "Metrics to be referenced from other AFM objects (e.g. filters) but not included in the result.",
            "items": {
              "$ref": "#/components/schemas/MeasureItem"
            },
            "type": "array"
          },
          "filters": {
            "description": "Various filter types to filter execution result.",
            "items": {
              "$ref": "#/components/schemas/FilterDefinition"
            },
            "type": "array"
          },
          "measures": {
            "description": "Metrics to be computed.",
            "items": {
              "$ref": "#/components/schemas/MeasureItem"
            },
            "type": "array"
          }
        },
        "required": [
          "attributes",
          "filters",
          "measures"
        ],
        "type": "object"
      },
      "AbsoluteDateFilter": {
        "description": "A datetime filter specifying exact from and to values.",
        "properties": {
          "absoluteDateFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dataset": {
                "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
              },
              "from": {
                "example": "2020-07-01 18:23",
                "pattern": "^\\d{4}-\\d{1,2}-\\d{1,2}( \\d{1,2}:\\d{1,2})?$",
                "type": "string"
              },
              "to": {
                "example": "2020-07-16 23:59",
                "pattern": "^\\d{4}-\\d{1,2}-\\d{1,2}( \\d{1,2}:\\d{1,2})?$",
                "type": "string"
              }
            },
            "required": [
              "from",
              "to",
              "dataset"
            ],
            "type": "object"
          }
        },
        "required": [
          "absoluteDateFilter"
        ],
        "type": "object"
      },
      "AbstractMeasureValueFilter": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RankingFilter"
          }
        ],
        "type": "object"
      },
      "AfmExecution": {
        "properties": {
          "execution": {
            "$ref": "#/components/schemas/AFM"
          },
          "resultSpec": {
            "$ref": "#/components/schemas/ResultSpec"
          },
          "settings": {
            "$ref": "#/components/schemas/ExecutionSettings"
          }
        },
        "required": [
          "execution",
          "resultSpec"
        ],
        "type": "object"
      },
      "AfmExecutionResponse": {
        "properties": {
          "executionResponse": {
            "$ref": "#/components/schemas/ExecutionResponse"
          }
        },
        "required": [
          "executionResponse"
        ],
        "type": "object"
      },
      "AfmIdentifier": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AfmObjectIdentifier"
          },
          {
            "$ref": "#/components/schemas/AfmLocalIdentifier"
          }
        ],
        "type": "object"
      },
      "AfmLocalIdentifier": {
        "properties": {
          "localIdentifier": {
            "example": "sampleAutoGenerated0123_ID",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          }
        },
        "required": [
          "localIdentifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifier": {
        "description": "ObjectIdentifier with `identifier` wrapper. This serves to distinguish MD object identifiers in AFM request from local identifiers.",
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "analyticalDashboard",
                  "attribute",
                  "dashboardPlugin",
                  "dataset",
                  "fact",
                  "label",
                  "metric",
                  "prompt",
                  "visualizationObject",
                  "filterContext"
                ],
                "example": "fact",
                "type": "string"
              }
            },
            "required": [
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierAttribute": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "attribute"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierCore": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "attribute",
                  "label",
                  "fact",
                  "metric"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierDataset": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "dataset"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierLabel": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "label"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmValidDescendantsQuery": {
        "description": "Entity describing the valid descendants request.",
        "properties": {
          "attributes": {
            "description": "List of identifiers of the attributes to get the valid descendants for.",
            "items": {
              "$ref": "#/components/schemas/AfmObjectIdentifierAttribute"
            },
            "type": "array"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "AfmValidDescendantsResponse": {
        "description": "Entity describing the valid descendants response.",
        "properties": {
          "validDescendants": {
            "additionalProperties": {
              "description": "Map of attribute identifiers to list of valid descendants identifiers.",
              "items": {
                "$ref": "#/components/schemas/AfmObjectIdentifierAttribute"
              },
              "type": "array"
            },
            "description": "Map of attribute identifiers to list of valid descendants identifiers.",
            "type": "object"
          }
        },
        "required": [
          "validDescendants"
        ],
        "type": "object"
      },
      "AfmValidObjectsQuery": {
        "description": "Entity holding AFM and list of object types whose validity should be computed.",
        "properties": {
          "afm": {
            "$ref": "#/components/schemas/AFM"
          },
          "types": {
            "example": "facts",
            "items": {
              "enum": [
                "facts",
                "attributes",
                "measures"
              ],
              "example": "facts",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "afm",
          "types"
        ],
        "type": "object"
      },
      "AfmValidObjectsResponse": {
        "description": "All objects of specified types valid with respect to given AFM.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RestApiIdentifier"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ApiEntitlement": {
        "properties": {
          "expiry": {
            "format": "date",
            "type": "string"
          },
          "name": {
            "enum": [
              "CacheStrategy",
              "Contract",
              "CustomTheming",
              "ExtraCache",
              "Hipaa",
              "PdfExports",
              "ManagedOIDC",
              "UiLocalization",
              "Tier",
              "UserCount",
              "UnlimitedUsers",
              "UnlimitedWorkspaces",
              "WhiteLabeling",
              "WorkspaceCount",
              "UserTelemetryDisabled"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ArithmeticMeasureDefinition": {
        "description": "Metric representing arithmetics between metrics.",
        "properties": {
          "arithmeticMeasure": {
            "properties": {
              "measureIdentifiers": {
                "description": "List of metrics to apply arithmetic operation by chosen operator.",
                "items": {
                  "$ref": "#/components/schemas/AfmLocalIdentifier"
                },
                "type": "array"
              },
              "operator": {
                "description": "Arithmetic operator describing operation between metrics.",
                "enum": [
                  "SUM",
                  "DIFFERENCE",
                  "MULTIPLICATION",
                  "RATIO",
                  "CHANGE"
                ],
                "example": "SUM",
                "type": "string"
              }
            },
            "required": [
              "measureIdentifiers",
              "operator"
            ],
            "type": "object"
          }
        },
        "required": [
          "arithmeticMeasure"
        ],
        "type": "object"
      },
      "AssigneeIdentifier": {
        "description": "Identifier of a user or user-group.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "user",
              "userGroup"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "AssigneeRule": {
        "description": "Identifier of an assignee rule.",
        "properties": {
          "type": {
            "enum": [
              "allWorkspaceUsers"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "AttributeExecutionResultHeader": {
        "properties": {
          "attributeHeader": {
            "$ref": "#/components/schemas/AttributeResultHeader"
          }
        },
        "required": [
          "attributeHeader"
        ],
        "type": "object"
      },
      "AttributeFilter": {
        "description": "Abstract filter definition type attributes",
        "oneOf": [
          {
            "$ref": "#/components/schemas/NegativeAttributeFilter"
          },
          {
            "$ref": "#/components/schemas/PositiveAttributeFilter"
          }
        ],
        "type": "object"
      },
      "AttributeFilterElements": {
        "description": "Filter on specific set of label values.",
        "properties": {
          "values": {
            "description": "Set of label values.",
            "example": [
              "value1",
              "value2"
            ],
            "items": {
              "nullable": true,
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "AttributeFormat": {
        "properties": {
          "locale": {
            "description": "Format locale",
            "type": "string"
          },
          "pattern": {
            "description": "Format pattern",
            "type": "string"
          }
        },
        "required": [
          "locale",
          "pattern"
        ],
        "type": "object"
      },
      "AttributeHeaderOut": {
        "properties": {
          "attributeHeader": {
            "properties": {
              "attribute": {
                "$ref": "#/components/schemas/RestApiIdentifier"
              },
              "attributeName": {
                "type": "string"
              },
              "format": {
                "$ref": "#/components/schemas/AttributeFormat"
              },
              "granularity": {
                "enum": [
                  "MINUTE",
                  "HOUR",
                  "DAY",
                  "WEEK",
                  "MONTH",
                  "QUARTER",
                  "YEAR",
                  "MINUTE_OF_HOUR",
                  "HOUR_OF_DAY",
                  "DAY_OF_WEEK",
                  "DAY_OF_MONTH",
                  "DAY_OF_YEAR",
                  "WEEK_OF_YEAR",
                  "MONTH_OF_YEAR",
                  "QUARTER_OF_YEAR"
                ],
                "type": "string"
              },
              "label": {
                "$ref": "#/components/schemas/RestApiIdentifier"
              },
              "labelName": {
                "type": "string"
              },
              "localIdentifier": {
                "pattern": "^[.a-zA-Z0-9_-]+$",
                "type": "string"
              },
              "primaryLabel": {
                "$ref": "#/components/schemas/RestApiIdentifier"
              }
            },
            "required": [
              "attribute",
              "attributeName",
              "label",
              "labelName",
              "localIdentifier",
              "primaryLabel"
            ],
            "type": "object"
          }
        },
        "required": [
          "attributeHeader"
        ],
        "type": "object"
      },
      "AttributeItem": {
        "properties": {
          "label": {
            "$ref": "#/components/schemas/AfmObjectIdentifierLabel"
          },
          "localIdentifier": {
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "showAllValues": {
            "default": false,
            "description": "Specifies that the label should be outer-joined.",
            "type": "boolean"
          }
        },
        "required": [
          "label",
          "localIdentifier"
        ],
        "type": "object"
      },
      "AttributeResultHeader": {
        "description": "Header containing the information related to attributes.",
        "properties": {
          "labelValue": {
            "description": "A value of the current attribute label.",
            "example": "East Coast",
            "type": "string"
          },
          "primaryLabelValue": {
            "description": "A value of the primary attribute label.",
            "example": "1225",
            "type": "string"
          }
        },
        "required": [
          "labelValue",
          "primaryLabelValue"
        ],
        "type": "object"
      },
      "AvailableAssignees": {
        "properties": {
          "userGroups": {
            "description": "List of user groups",
            "items": {
              "$ref": "#/components/schemas/UserGroupAssignee"
            },
            "type": "array"
          },
          "users": {
            "description": "List of users",
            "items": {
              "$ref": "#/components/schemas/UserAssignee"
            },
            "type": "array"
          }
        },
        "required": [
          "userGroups",
          "users"
        ],
        "type": "object"
      },
      "ColumnWarning": {
        "description": "Warning related to single column.",
        "properties": {
          "message": {
            "description": "Warning message related to the column.",
            "type": "string"
          },
          "name": {
            "description": "Column name.",
            "type": "string"
          }
        },
        "required": [
          "message",
          "name"
        ],
        "type": "object"
      },
      "ComparisonMeasureValueFilter": {
        "description": "Filter the result by comparing specified metric to given constant value, using given comparison operator.",
        "properties": {
          "comparisonMeasureValueFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "measure": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "operator": {
                "enum": [
                  "GREATER_THAN",
                  "GREATER_THAN_OR_EQUAL_TO",
                  "LESS_THAN",
                  "LESS_THAN_OR_EQUAL_TO",
                  "EQUAL_TO",
                  "NOT_EQUAL_TO"
                ],
                "example": "GREATER_THAN",
                "type": "string"
              },
              "treatNullValuesAs": {
                "example": 0,
                "type": "number"
              },
              "value": {
                "example": 1327,
                "type": "number"
              }
            },
            "required": [
              "operator",
              "value",
              "measure"
            ],
            "type": "object"
          }
        },
        "required": [
          "comparisonMeasureValueFilter"
        ],
        "type": "object"
      },
      "CustomLabel": {
        "description": "Custom label object override.",
        "properties": {
          "title": {
            "description": "Override value.",
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CustomMetric": {
        "description": "Custom metric object override.",
        "properties": {
          "format": {
            "description": "Format override.",
            "type": "string"
          },
          "title": {
            "description": "Metric title override.",
            "type": "string"
          }
        },
        "required": [
          "format",
          "title"
        ],
        "type": "object"
      },
      "CustomOverride": {
        "description": "Custom cell value overrides (IDs will be replaced with specified values).",
        "properties": {
          "labels": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomLabel"
            },
            "description": "Map of CustomLabels with keys used as placeholders in document.",
            "type": "object"
          },
          "metrics": {
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomMetric"
            },
            "description": "Map of CustomMetrics with keys used as placeholders in document.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "DashboardPermissions": {
        "properties": {
          "rules": {
            "description": "List of rules",
            "items": {
              "$ref": "#/components/schemas/RulePermission"
            },
            "type": "array"
          },
          "userGroups": {
            "description": "List of user groups",
            "items": {
              "$ref": "#/components/schemas/UserGroupPermission"
            },
            "type": "array"
          },
          "users": {
            "description": "List of users",
            "items": {
              "$ref": "#/components/schemas/UserPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "rules",
          "userGroups",
          "users"
        ],
        "type": "object"
      },
      "DashboardPermissionsAssignment": {
        "description": "Desired levels of permissions for an assignee.",
        "properties": {
          "permissions": {
            "items": {
              "enum": [
                "EDIT",
                "SHARE",
                "VIEW"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "DataColumnLocator": {
        "description": "Mapping from dimension items (either 'localIdentifier' from 'AttributeItem', or \"measureGroup\") to their respective values. This effectively specifies the path (location) of the data column used for sorting. Therefore values for all dimension items must be specified.",
        "example": {
          "dim2": {
            "measureGroup": "m1",
            "status": "lost"
          }
        },
        "properties": {
          "properties": {
            "additionalProperties": {
              "description": "Mapping from dimension items (either 'localIdentifier' from 'AttributeItem', or \"measureGroup\") to their respective values. This effectively specifies the path (location) of the data column used for sorting. Therefore values for all dimension items must be specified.",
              "example": "{\"status\":\"lost\",\"measureGroup\":\"m1\"}",
              "type": "string"
            },
            "description": "Mapping from dimension items (either 'localIdentifier' from 'AttributeItem', or \"measureGroup\") to their respective values. This effectively specifies the path (location) of the data column used for sorting. Therefore values for all dimension items must be specified.",
            "example": {
              "measureGroup": "m1",
              "status": "lost"
            },
            "type": "object"
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "DataColumnLocators": {
        "properties": {
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DataColumnLocator"
            },
            "description": "Mapping from dimensions to data column locators.",
            "example": {
              "dim2": {
                "measureGroup": "m1",
                "status": "lost"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "DataSourceParameter": {
        "description": "A parameter for testing data source connection",
        "properties": {
          "name": {
            "description": "Parameter name.",
            "type": "string"
          },
          "value": {
            "description": "Parameter value.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "DataSourcePermissionAssignment": {
        "description": "Data source permission assignments",
        "properties": {
          "assigneeIdentifier": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "permissions": {
            "items": {
              "enum": [
                "MANAGE",
                "USE"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "assigneeIdentifier",
          "permissions"
        ],
        "type": "object"
      },
      "DataSourceSchemata": {
        "description": "Result of getSchemata. Contains list of available DB schema names.",
        "properties": {
          "schemaNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "schemaNames"
        ],
        "type": "object"
      },
      "DataSourceTableIdentifier": {
        "description": "An id of the table. Including ID of data source.",
        "example": {
          "dataSourceId": "my-postgres",
          "id": "customers",
          "type": "DATA_SOURCE"
        },
        "properties": {
          "dataSourceId": {
            "description": "Data source ID.",
            "example": "my-postgres",
            "maxLength": 255,
            "type": "string"
          },
          "id": {
            "description": "ID of table.",
            "example": "customers",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "path": {
            "description": "Path to table.",
            "example": [
              "table_schema",
              "table_name"
            ],
            "items": {
              "example": "table_name",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "description": "Data source entity type.",
            "enum": [
              "dataSource"
            ],
            "example": "dataSource",
            "type": "string"
          }
        },
        "required": [
          "dataSourceId",
          "id",
          "type"
        ],
        "type": "object"
      },
      "DatasetGrain": {
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "attribute",
              "date"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DatasetReferenceIdentifier": {
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "dataset"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DatasetWorkspaceDataFilterIdentifier": {
        "description": "Identifier of a workspace data filter.",
        "properties": {
          "id": {
            "description": "Workspace Data Filters ID.",
            "example": "country_id",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Filter type.",
            "enum": [
              "workspaceDataFilter"
            ],
            "example": "workspaceDataFilter",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DateFilter": {
        "description": "Abstract filter definition type for dates.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AbsoluteDateFilter"
          },
          {
            "$ref": "#/components/schemas/RelativeDateFilter"
          }
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboard": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "createdAt": {
            "description": "Time of the entity creation.",
            "example": "2023-07-20 12:30",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "description": {
            "description": "Analytical dashboard description.",
            "example": "Period to period comparison of revenues in main sectors.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Analytical dashboard ID.",
            "example": "revenues-analysis",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "modifiedAt": {
            "description": "Time of the last entity modification.",
            "example": "2023-07-20 12:30",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "permissions": {
            "description": "A list of permissions.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionForAssignee"
                },
                {
                  "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionForAssigneeRule"
                }
              ]
            },
            "type": "array"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Analytical dashboard title.",
            "example": "Revenues analysis",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboardExtension": {
        "properties": {
          "id": {
            "description": "Analytical dashboard ID.",
            "example": "revenues-analysis",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "permissions": {
            "description": "A list of permissions.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionForAssignee"
                },
                {
                  "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionForAssigneeRule"
                }
              ]
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "permissions"
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboardPermissionAssignment": {
        "description": "Analytical dashboard permission.",
        "properties": {
          "name": {
            "description": "Permission name.",
            "enum": [
              "EDIT",
              "SHARE",
              "VIEW"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboardPermissionForAssignee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionAssignment"
          },
          {
            "properties": {
              "assignee": {
                "$ref": "#/components/schemas/AssigneeIdentifier"
              }
            },
            "type": "object"
          }
        ],
        "description": "Analytical dashboard permission for an assignee.",
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeAnalyticalDashboardPermissionForAssigneeRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardPermissionAssignment"
          },
          {
            "properties": {
              "assigneeRule": {
                "$ref": "#/components/schemas/AssigneeRule"
              }
            },
            "type": "object"
          }
        ],
        "description": "Analytical dashboard permission for a collection of assignees identified by a rule.",
        "required": [
          "assigneeRule",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeAnalytics": {
        "description": "Entities describing users' view on data.",
        "properties": {
          "analytics": {
            "$ref": "#/components/schemas/DeclarativeAnalyticsLayer"
          }
        },
        "type": "object"
      },
      "DeclarativeAnalyticsLayer": {
        "properties": {
          "analyticalDashboardExtensions": {
            "description": "A list of dashboard permissions assigned to a related dashboard.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAnalyticalDashboardExtension"
            },
            "type": "array"
          },
          "analyticalDashboards": {
            "description": "A list of analytical dashboards available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAnalyticalDashboard"
            },
            "type": "array"
          },
          "attributeHierarchies": {
            "description": "A list of attribute hierarchies.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAttributeHierarchy"
            },
            "type": "array"
          },
          "dashboardPlugins": {
            "description": "A list of dashboard plugins available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeDashboardPlugin"
            },
            "type": "array"
          },
          "filterContexts": {
            "description": "A list of filter contexts available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeFilterContext"
            },
            "type": "array"
          },
          "metrics": {
            "description": "A list of metrics available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeMetric"
            },
            "type": "array"
          },
          "visualizationObjects": {
            "description": "A list of visualization objects available in the model.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeVisualizationObject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeAttribute": {
        "description": "A dataset attribute.",
        "properties": {
          "defaultView": {
            "$ref": "#/components/schemas/LabelIdentifier"
          },
          "description": {
            "description": "Attribute description.",
            "example": "Customer name including first and last name.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Attribute ID.",
            "example": "attr.customers.customer_name",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "labels": {
            "description": "An array of attribute labels.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeLabel"
            },
            "type": "array"
          },
          "sortColumn": {
            "description": "Attribute sort column.",
            "example": "customer_name",
            "maxLength": 255,
            "type": "string"
          },
          "sortDirection": {
            "description": "Attribute sort direction.",
            "enum": [
              "ASC",
              "DESC"
            ],
            "example": "\"ASC\" | \"DESC\"",
            "type": "string"
          },
          "sourceColumn": {
            "description": "A name of the source column that is the primary label",
            "example": "customer_name",
            "maxLength": 255,
            "type": "string"
          },
          "sourceColumnDataType": {
            "description": "A type of the source column",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "STRING",
            "maxLength": 255,
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customers"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customers\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Attribute title.",
            "example": "Customer Name",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "id",
          "labels",
          "sourceColumn",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeAttributeHierarchy": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "createdAt": {
            "description": "Time of the entity creation.",
            "example": "[\"2023-07-20 12:30\"]",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "description": {
            "description": "Attribute hierarchy object description.",
            "example": "Simple number for total goods in current production.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Attribute hierarchy object ID.",
            "example": "hierarchy-1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "modifiedAt": {
            "description": "Time of the last entity modification.",
            "example": "[\"2023-07-20 12:30\"]",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Attribute hierarchy object title.",
            "example": "Count of goods",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeColorPalette": {
        "description": "Color palette and its properties.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeColumn": {
        "description": "A table column.",
        "properties": {
          "dataType": {
            "description": "Column type",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "INT",
            "type": "string"
          },
          "isPrimaryKey": {
            "description": "Is column part of primary key?",
            "type": "boolean"
          },
          "name": {
            "description": "Column name",
            "example": "customer_id",
            "maxLength": 255,
            "type": "string"
          },
          "referencedTableColumn": {
            "description": "Referenced table (Foreign key)",
            "example": "customer_id",
            "maxLength": 255,
            "type": "string"
          },
          "referencedTableId": {
            "description": "Referenced table (Foreign key)",
            "example": "customers",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeCspDirective": {
        "properties": {
          "directive": {
            "maxLength": 255,
            "type": "string"
          },
          "sources": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "directive",
          "sources"
        ],
        "type": "object"
      },
      "DeclarativeCustomApplicationSetting": {
        "description": "Custom application setting and its value.",
        "properties": {
          "applicationName": {
            "description": "The application id",
            "example": "Modeler",
            "maxLength": 255,
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "description": "Custom Application Setting ID.",
            "example": "modeler.demo",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          }
        },
        "required": [
          "applicationName",
          "content",
          "id"
        ],
        "type": "object"
      },
      "DeclarativeDashboardPlugin": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "createdAt": {
            "description": "Time of the entity creation.",
            "example": "[\"2023-07-20 12:30\"]",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "description": {
            "description": "Dashboard plugin description.",
            "example": "Three dimensional view of data.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Dashboard plugin object ID.",
            "example": "dashboard-plugin-1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "modifiedAt": {
            "description": "Time of the last entity modification.",
            "example": "[\"2023-07-20 12:30\"]",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Dashboard plugin object title.",
            "example": "3D map renderer",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeDataSource": {
        "description": "A data source and its properties.",
        "properties": {
          "cachePath": {
            "description": "Path to schema, where intermediate caches are stored.",
            "example": "[ \"dfs\", \"data\" ]. Example used in Apache Drill.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cacheStrategy": {
            "description": "Determines how the results coming from a particular datasource should be cached.\n- ALWAYS: The results from the datasource should be cached normally (the default).\n- NEVER: The results from the datasource should never be cached.",
            "enum": [
              "ALWAYS",
              "NEVER"
            ],
            "type": "string"
          },
          "decodedParameters": {
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "type": "array"
          },
          "enableCaching": {
            "description": "Enable caching of intermediate results.",
            "example": false,
            "type": "boolean"
          },
          "id": {
            "description": "Data source ID.",
            "example": "pg_local_docker-demo",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "name": {
            "description": "Name of the data source.",
            "example": "postgres demo",
            "maxLength": 255,
            "type": "string"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/Parameter"
            },
            "type": "array"
          },
          "password": {
            "description": "Password for the data-source user, property is never returned back.",
            "example": "*****",
            "maxLength": 255,
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataSourcePermission"
            },
            "type": "array"
          },
          "schema": {
            "description": "A scheme/database with the data.",
            "example": "demo",
            "maxLength": 255,
            "type": "string"
          },
          "token": {
            "description": "Token as an alternative to username and password.",
            "example": "Bigquery service account JSON. Encode it using base64!",
            "maxLength": 10000,
            "type": "string"
          },
          "type": {
            "description": "Type of database.",
            "enum": [
              "POSTGRESQL",
              "REDSHIFT",
              "VERTICA",
              "SNOWFLAKE",
              "ADS",
              "BIGQUERY",
              "MSSQL",
              "PRESTO",
              "DREMIO",
              "DRILL",
              "GREENPLUM",
              "AZURESQL",
              "SYNAPSESQL",
              "DATABRICKS",
              "GDSTORAGE",
              "CLICKHOUSE",
              "MYSQL",
              "MARIADB"
            ],
            "example": "POSTGRESQL",
            "type": "string"
          },
          "url": {
            "description": "An connection string relevant to type of database.",
            "example": "jdbc:postgresql://postgres:5432/gooddata",
            "maxLength": 255,
            "type": "string"
          },
          "username": {
            "description": "User with permission connect the data source/database.",
            "example": "demo",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "schema",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeDataSourcePermission": {
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "MANAGE",
              "USE"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeDataSourcePermissions": {
        "description": "Data source permissions.",
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataSourcePermission"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeDataSources": {
        "description": "A data source and its properties.",
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataSource"
            },
            "type": "array"
          }
        },
        "required": [
          "dataSources"
        ],
        "type": "object"
      },
      "DeclarativeDataset": {
        "description": "A dataset defined by its properties.",
        "properties": {
          "attributes": {
            "description": "An array of attributes.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeAttribute"
            },
            "type": "array"
          },
          "dataSourceTableId": {
            "$ref": "#/components/schemas/DataSourceTableIdentifier"
          },
          "description": {
            "description": "A dataset description.",
            "example": "The customers of ours.",
            "maxLength": 10000,
            "type": "string"
          },
          "facts": {
            "description": "An array of facts.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeFact"
            },
            "type": "array"
          },
          "grain": {
            "description": "An array of grain identifiers.",
            "items": {
              "$ref": "#/components/schemas/GrainIdentifier"
            },
            "type": "array"
          },
          "id": {
            "description": "The Dataset ID. This ID is further used to refer to this instance of dataset.",
            "example": "customers",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "references": {
            "description": "An array of references.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeReference"
            },
            "type": "array"
          },
          "sql": {
            "$ref": "#/components/schemas/DeclarativeDatasetSql"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customers"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customers\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "A dataset title.",
            "example": "Customers",
            "maxLength": 255,
            "type": "string"
          },
          "workspaceDataFilterColumns": {
            "description": "An array of columns which are available for match to implicit workspace data filters.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterColumn"
            },
            "type": "array"
          },
          "workspaceDataFilterReferences": {
            "description": "An array of explicit workspace data filters.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterReferences"
            },
            "type": "array"
          }
        },
        "required": [
          "grain",
          "id",
          "references",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeDatasetExtension": {
        "description": "A dataset extension properties.",
        "properties": {
          "id": {
            "description": "The Dataset ID. This ID is further used to refer to this instance of dataset.",
            "example": "customers",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "workspaceDataFilterReferences": {
            "description": "An array of explicit workspace data filters.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterReferences"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DeclarativeDatasetSql": {
        "description": "SQL defining this dataset.",
        "example": {
          "dataSourceId": "my-postgres",
          "statement": "SELECT * FROM some_table"
        },
        "properties": {
          "dataSourceId": {
            "description": "Data source ID.",
            "example": "my-postgres",
            "type": "string"
          },
          "statement": {
            "description": "SQL statement.",
            "example": "SELECT * FROM some_table",
            "type": "string"
          }
        },
        "required": [
          "dataSourceId",
          "statement"
        ],
        "type": "object"
      },
      "DeclarativeDateDataset": {
        "description": "A date dataset.",
        "properties": {
          "description": {
            "description": "Date dataset description.",
            "example": "A customer order date",
            "maxLength": 10000,
            "type": "string"
          },
          "granularities": {
            "description": "An array of date granularities. All listed granularities will be available for date dataset.",
            "items": {
              "enum": [
                "MINUTE",
                "HOUR",
                "DAY",
                "WEEK",
                "MONTH",
                "QUARTER",
                "YEAR",
                "MINUTE_OF_HOUR",
                "HOUR_OF_DAY",
                "DAY_OF_WEEK",
                "DAY_OF_MONTH",
                "DAY_OF_YEAR",
                "WEEK_OF_YEAR",
                "MONTH_OF_YEAR",
                "QUARTER_OF_YEAR"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "granularitiesFormatting": {
            "$ref": "#/components/schemas/GranularitiesFormatting"
          },
          "id": {
            "description": "Date dataset ID.",
            "example": "date",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customer dates"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customer dates\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Date dataset title.",
            "example": "Date",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "granularities",
          "granularitiesFormatting",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeFact": {
        "description": "A dataset fact.",
        "properties": {
          "description": {
            "description": "Fact description.",
            "example": "A number of orders created by the customer - including all orders, even the non-delivered ones.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Fact ID.",
            "example": "fact.customer_order_count",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "sourceColumn": {
            "description": "A name of the source column in the table.",
            "example": "customer_order_count",
            "maxLength": 255,
            "type": "string"
          },
          "sourceColumnDataType": {
            "description": "A type of the source column",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "NUMERIC",
            "maxLength": 255,
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customers"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customers\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Fact title.",
            "example": "Customer order count",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "id",
          "sourceColumn",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeFilterContext": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "description": {
            "description": "Filter Context description.",
            "example": "Filter Context for Sales team.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Filter Context ID.",
            "example": "filter-sales",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Filter Context title.",
            "example": "Filter Context for Sales team",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeJwk": {
        "description": "A declarative form of the JWK.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/DeclarativeJwkSpecification"
          },
          "id": {
            "description": "JWK object ID.",
            "example": "jwk-1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          }
        },
        "required": [
          "content",
          "id"
        ],
        "type": "object"
      },
      "DeclarativeJwkSpecification": {
        "description": "Declarative specification of the cryptographic key.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DeclarativeRsaSpecification"
          }
        ],
        "type": "object"
      },
      "DeclarativeLabel": {
        "description": "A attribute label.",
        "properties": {
          "description": {
            "description": "Label description.",
            "example": "Customer name",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Label ID.",
            "example": "label.customer_name",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "sourceColumn": {
            "description": "A name of the source column in the table.",
            "example": "customer_name",
            "maxLength": 255,
            "type": "string"
          },
          "sourceColumnDataType": {
            "description": "A type of the source column",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "STRING",
            "maxLength": 255,
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Customers"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Customers\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Label title.",
            "example": "Customer name",
            "maxLength": 255,
            "type": "string"
          },
          "valueType": {
            "description": "Specific type of label",
            "enum": [
              "TEXT",
              "HYPERLINK",
              "GEO",
              "GEO_LONGITUDE",
              "GEO_LATITUDE"
            ],
            "example": "\"TEXT\" | \"HYPERLINK\" | \"GEO\" | \"GEO_LONGITUDE\" | \"GEO_LATITUDE\"",
            "type": "string"
          }
        },
        "required": [
          "id",
          "sourceColumn",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeLdm": {
        "description": "A logical data model (LDM) representation.",
        "properties": {
          "datasetExtensions": {
            "description": "An array containing extensions for datasets defined in parent workspaces.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeDatasetExtension"
            },
            "type": "array"
          },
          "datasets": {
            "description": "An array containing datasets.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataset"
            },
            "type": "array"
          },
          "dateInstances": {
            "description": "An array containing date-related datasets.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeDateDataset"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeMetric": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "createdAt": {
            "description": "Time of the entity creation.",
            "example": "[\"2023-07-20 12:30\"]",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "description": {
            "description": "Metric description.",
            "example": "Sales for all the data available.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Metric ID.",
            "example": "total-sales",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "modifiedAt": {
            "description": "Time of the last entity modification.",
            "example": "[\"2023-07-20 12:30\"]",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Metric title.",
            "example": "Total sales",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeModel": {
        "description": "A data model structured as a set of its attributes.",
        "properties": {
          "ldm": {
            "$ref": "#/components/schemas/DeclarativeLdm"
          }
        },
        "type": "object"
      },
      "DeclarativeOrganization": {
        "description": "Complete definition of an organization in a declarative form.",
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeDataSource"
            },
            "type": "array"
          },
          "jwks": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeJwk"
            },
            "type": "array"
          },
          "organization": {
            "$ref": "#/components/schemas/DeclarativeOrganizationInfo"
          },
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroup"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUser"
            },
            "type": "array"
          },
          "workspaceDataFilters": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
            },
            "type": "array"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspace"
            },
            "type": "array"
          }
        },
        "required": [
          "organization"
        ],
        "type": "object"
      },
      "DeclarativeOrganizationInfo": {
        "description": "Information available about an organization.",
        "properties": {
          "colorPalettes": {
            "description": "A list of color palettes.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeColorPalette"
            },
            "type": "array"
          },
          "cspDirectives": {
            "description": "A list of CSP directives.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeCspDirective"
            },
            "type": "array"
          },
          "earlyAccess": {
            "description": "Early access defined on level Organization",
            "maxLength": 255,
            "type": "string"
          },
          "hostname": {
            "description": "Formal hostname used in deployment.",
            "example": "alpha.com",
            "maxLength": 255,
            "type": "string"
          },
          "id": {
            "description": "Identifier of the organization.",
            "example": "Alpha corporation",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "name": {
            "description": "Formal name of the organization.",
            "example": "Alpha corporation",
            "maxLength": 255,
            "type": "string"
          },
          "oauthClientId": {
            "description": "Identifier of the authentication provider",
            "maxLength": 255,
            "type": "string"
          },
          "oauthClientSecret": {
            "description": "Communication secret of the authentication provider (never returned back).",
            "maxLength": 255,
            "type": "string"
          },
          "oauthIssuerId": {
            "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
            "example": "myOidcProvider",
            "maxLength": 255,
            "type": "string"
          },
          "oauthIssuerLocation": {
            "description": "URI of the authentication provider.",
            "maxLength": 255,
            "type": "string"
          },
          "oauthSubjectIdClaim": {
            "description": "Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.",
            "example": "oid",
            "maxLength": 255,
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeOrganizationPermission"
            },
            "type": "array"
          },
          "settings": {
            "description": "A list of organization settings.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeSetting"
            },
            "type": "array"
          },
          "themes": {
            "description": "A list of themes.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeTheme"
            },
            "type": "array"
          }
        },
        "required": [
          "hostname",
          "id",
          "name",
          "permissions"
        ],
        "type": "object"
      },
      "DeclarativeOrganizationPermission": {
        "description": "Definition of an organization permission assigned to a user/user-group.",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "MANAGE",
              "SELF_CREATE_TOKEN"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeReference": {
        "description": "A dataset reference.",
        "properties": {
          "identifier": {
            "$ref": "#/components/schemas/ReferenceIdentifier"
          },
          "multivalue": {
            "description": "The multi-value flag enables many-to-many cardinality for references.",
            "example": false,
            "type": "boolean"
          },
          "sourceColumnDataTypes": {
            "deprecated": true,
            "description": "An array of source column data types for a given reference. Deprecated, use 'sources' instead.",
            "items": {
              "enum": [
                "INT",
                "STRING",
                "DATE",
                "NUMERIC",
                "TIMESTAMP",
                "TIMESTAMP_TZ",
                "BOOLEAN"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "sourceColumns": {
            "deprecated": true,
            "description": "An array of source column names for a given reference. Deprecated, use 'sources' instead.",
            "example": [
              "customer_id"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sources": {
            "description": "An array of source columns for a given reference.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeReferenceSource"
            },
            "type": "array"
          }
        },
        "required": [
          "identifier",
          "multivalue"
        ],
        "type": "object"
      },
      "DeclarativeReferenceSource": {
        "description": "A dataset reference source column description.",
        "properties": {
          "column": {
            "description": "A name of the source column in the table.",
            "example": "customer_id",
            "maxLength": 255,
            "type": "string"
          },
          "dataType": {
            "description": "A type of the source column.",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "STRING",
            "maxLength": 255,
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/GrainIdentifier"
          }
        },
        "required": [
          "column",
          "target"
        ],
        "type": "object"
      },
      "DeclarativeRsaSpecification": {
        "description": "Declarative specification of the cryptographic key.",
        "properties": {
          "alg": {
            "description": "Algorithm intended for use with the key.",
            "enum": [
              "RS256",
              "RS384",
              "RS512"
            ],
            "example": "RS256",
            "type": "string"
          },
          "e": {
            "description": "parameter contains the exponent value for the RSA public key.",
            "type": "string"
          },
          "kid": {
            "description": "Parameter is used to match a specific key.",
            "example": "key.001",
            "maxLength": 255,
            "pattern": "^[^.]",
            "type": "string"
          },
          "kty": {
            "description": "Key type parameter",
            "enum": [
              "RSA"
            ],
            "example": "RSA",
            "type": "string"
          },
          "n": {
            "description": "Parameter contains the modulus value for the RSA public key.",
            "type": "string"
          },
          "use": {
            "description": "Parameter identifies the intended use of the public key.",
            "enum": [
              "sig"
            ],
            "example": "sig",
            "type": "string"
          },
          "x5c": {
            "description": "Parameter contains a chain of one or more PKIX certificates.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x5t": {
            "description": "Parameter is a base64url-encoded SHA-1 thumbprint of the DER encoding of an X.509 certificate.",
            "type": "string"
          }
        },
        "required": [
          "alg",
          "e",
          "kid",
          "kty",
          "n",
          "use"
        ],
        "type": "object"
      },
      "DeclarativeSetting": {
        "description": "Setting and its value.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "description": "Setting ID.",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Type of the setting.",
            "enum": [
              "TIMEZONE",
              "ACTIVE_THEME",
              "ACTIVE_COLOR_PALETTE",
              "WHITE_LABELING",
              "LOCALE",
              "METADATA_LOCALE",
              "FORMAT_LOCALE",
              "MAPBOX_TOKEN",
              "WEEK_START",
              "SHOW_HIDDEN_CATALOG_ITEMS",
              "OPERATOR_OVERRIDES",
              "TIMEZONE_VALIDATION_ENABLED"
            ],
            "example": "TIMEZONE",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DeclarativeSingleWorkspacePermission": {
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "MANAGE",
              "ANALYZE",
              "EXPORT",
              "EXPORT_TABULAR",
              "EXPORT_PDF",
              "VIEW"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeTable": {
        "description": "A database table.",
        "properties": {
          "columns": {
            "description": "An array of physical columns",
            "items": {
              "$ref": "#/components/schemas/DeclarativeColumn"
            },
            "type": "array"
          },
          "id": {
            "description": "Table id.",
            "example": "customers",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "namePrefix": {
            "description": "Table or view name prefix used in scan. Will be stripped when generating LDM.",
            "example": "out_gooddata",
            "maxLength": 255,
            "type": "string"
          },
          "path": {
            "description": "Path to table.",
            "example": [
              "table_schema",
              "table_name"
            ],
            "items": {
              "example": "table_name",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "Table type: TABLE or VIEW.",
            "example": "TABLE",
            "type": "string"
          }
        },
        "required": [
          "columns",
          "id",
          "path",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeTables": {
        "description": "A physical data model (PDM) tables.",
        "properties": {
          "tables": {
            "description": "An array of physical database tables.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeTable"
            },
            "type": "array"
          }
        },
        "required": [
          "tables"
        ],
        "type": "object"
      },
      "DeclarativeTheme": {
        "description": "Theme and its properties.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeUser": {
        "description": "A user and its properties",
        "properties": {
          "authId": {
            "description": "User identification in the authentication manager.",
            "maxLength": 255,
            "type": "string"
          },
          "email": {
            "description": "User email address",
            "example": "user@example.com",
            "maxLength": 255,
            "type": "string"
          },
          "firstname": {
            "description": "User first name",
            "example": "John",
            "maxLength": 255,
            "type": "string"
          },
          "id": {
            "description": "User identifier.",
            "example": "employee123",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "lastname": {
            "description": "User last name",
            "example": "Wick",
            "maxLength": 255,
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserPermission"
            },
            "type": "array"
          },
          "settings": {
            "description": "A list of user settings.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeSetting"
            },
            "type": "array"
          },
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroupIdentifier"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DeclarativeUserDataFilter": {
        "description": "User Data Filters serving the filtering of what data users can see in workspaces.",
        "properties": {
          "description": {
            "description": "User Data Filters setting description.",
            "example": "ID of country setting",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "User Data Filters ID. This ID is further used to refer to this instance.",
            "example": "country_id_setting",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "maql": {
            "description": "Expression in MAQL specifying the User Data Filter",
            "example": "{label/country} = \"USA\" AND {label/date.year} = THIS(YEAR)",
            "maxLength": 10000,
            "type": "string"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "User Data Filters setting title.",
            "example": "Country ID setting",
            "maxLength": 255,
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "userGroup": {
            "$ref": "#/components/schemas/DeclarativeUserGroupIdentifier"
          }
        },
        "required": [
          "id",
          "maql",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeUserDataFilters": {
        "description": "Declarative form of user data filters.",
        "properties": {
          "userDataFilters": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserDataFilter"
            },
            "type": "array"
          }
        },
        "required": [
          "userDataFilters"
        ],
        "type": "object"
      },
      "DeclarativeUserGroup": {
        "description": "A user-group and its properties",
        "properties": {
          "id": {
            "description": "UserGroup identifier.",
            "example": "employees.all",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "name": {
            "description": "Name of UserGroup",
            "example": "admins",
            "maxLength": 255,
            "type": "string"
          },
          "parents": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroupIdentifier"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroupPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "DeclarativeUserGroupIdentifier": {
        "description": "A user group identifier.",
        "example": {
          "id": "admins",
          "type": "userGroup"
        },
        "properties": {
          "id": {
            "description": "Identifier of the user group.",
            "example": "group.admins",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type.",
            "enum": [
              "userGroup"
            ],
            "example": "userGroup",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeUserGroupPermission": {
        "description": "Definition of a user-group permission assigned to a user/user-group.",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "SEE"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeUserGroupPermissions": {
        "description": "Definition of permissions associated with a user-group.",
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroupPermission"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeUserGroups": {
        "description": "Declarative form of userGroups and its properties.",
        "properties": {
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "userGroups"
        ],
        "type": "object"
      },
      "DeclarativeUserIdentifier": {
        "description": "A user identifier.",
        "example": {
          "id": "example123",
          "type": "user"
        },
        "properties": {
          "id": {
            "description": "User identifier.",
            "example": "employee123",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type.",
            "enum": [
              "user"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeUserPermission": {
        "description": "Definition of a user permission assigned to a user/user-group.",
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "SEE"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeUserPermissions": {
        "description": "Definition of permissions associated with a user.",
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserPermission"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeUsers": {
        "description": "Declarative form of users and its properties.",
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUser"
            },
            "type": "array"
          }
        },
        "required": [
          "users"
        ],
        "type": "object"
      },
      "DeclarativeUsersUserGroups": {
        "description": "Declarative form of both users and user groups and theirs properties.",
        "properties": {
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserGroup"
            },
            "type": "array"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeUser"
            },
            "type": "array"
          }
        },
        "required": [
          "userGroups",
          "users"
        ],
        "type": "object"
      },
      "DeclarativeVisualizationObject": {
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "createdAt": {
            "description": "Time of the entity creation.",
            "example": "[\"2023-07-20 12:30\"]",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "description": {
            "description": "Visualization object description.",
            "example": "Simple number for total goods in current production.",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Visualization object ID.",
            "example": "visualization-1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "modifiedAt": {
            "description": "Time of the last entity modification.",
            "example": "[\"2023-07-20 12:30\"]",
            "nullable": true,
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}",
            "type": "string"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/DeclarativeUserIdentifier"
          },
          "tags": {
            "description": "A list of tags.",
            "example": [
              "Revenues"
            ],
            "items": {
              "description": "A list of tags.",
              "example": "[\"Revenues\"]",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          },
          "title": {
            "description": "Visualization object title.",
            "example": "Count of goods",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id",
          "title"
        ],
        "type": "object"
      },
      "DeclarativeWorkspace": {
        "description": "A declarative form of a particular workspace.",
        "properties": {
          "cacheExtraLimit": {
            "description": "Extra cache limit allocated to specific workspace. In case there is extra cache budget setup for organization, it can be split between multiple workspaces.",
            "format": "int64",
            "type": "integer"
          },
          "customApplicationSettings": {
            "description": "A list of workspace custom settings.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeCustomApplicationSetting"
            },
            "type": "array"
          },
          "description": {
            "description": "Description of the workspace",
            "maxLength": 255,
            "type": "string"
          },
          "earlyAccess": {
            "description": "Early access defined on level Workspace",
            "maxLength": 255,
            "type": "string"
          },
          "hierarchyPermissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceHierarchyPermission"
            },
            "type": "array"
          },
          "id": {
            "description": "Identifier of a workspace",
            "example": "alpha.sales",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "model": {
            "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
          },
          "name": {
            "description": "Name of a workspace to view.",
            "example": "Alpha Sales",
            "maxLength": 255,
            "type": "string"
          },
          "parent": {
            "$ref": "#/components/schemas/WorkspaceIdentifier"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeSingleWorkspacePermission"
            },
            "type": "array"
          },
          "prefix": {
            "description": "Custom prefix of entity identifiers in workspace",
            "maxLength": 255,
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "settings": {
            "description": "A list of workspace settings.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeSetting"
            },
            "type": "array"
          },
          "userDataFilters": {
            "description": "A list of workspace user data filters.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeUserDataFilter"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceDataFilter": {
        "description": "Workspace Data Filters serving the filtering of what data users can see in workspaces.",
        "properties": {
          "columnName": {
            "description": "Workspace Data Filters column name. Data are filtered using this physical column.",
            "example": "country_id",
            "maxLength": 255,
            "type": "string"
          },
          "description": {
            "description": "Workspace Data Filters description.",
            "example": "ID of country",
            "maxLength": 10000,
            "type": "string"
          },
          "id": {
            "description": "Workspace Data Filters ID. This ID is further used to refer to this instance.",
            "example": "country_id",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "title": {
            "description": "Workspace Data Filters title.",
            "example": "Country ID",
            "maxLength": 255,
            "type": "string"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceIdentifier"
          },
          "workspaceDataFilterSettings": {
            "description": "Filter settings specifying values of filters valid for the workspace.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilterSetting"
            },
            "type": "array"
          }
        },
        "required": [
          "columnName",
          "id",
          "title",
          "workspaceDataFilterSettings"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceDataFilterColumn": {
        "properties": {
          "dataType": {
            "description": "Data type of the column",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "INT",
            "type": "string"
          },
          "name": {
            "description": "Name of the column",
            "example": "customer_id",
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceDataFilterReferences": {
        "properties": {
          "filterColumn": {
            "description": "Filter column name",
            "example": "filter_id",
            "type": "string"
          },
          "filterColumnDataType": {
            "description": "Filter column data type",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "INT",
            "type": "string"
          },
          "filterId": {
            "$ref": "#/components/schemas/DatasetWorkspaceDataFilterIdentifier"
          }
        },
        "required": [
          "filterColumn",
          "filterColumnDataType",
          "filterId"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceDataFilterSetting": {
        "description": "Workspace Data Filters serving the filtering of what data users can see in workspaces.",
        "properties": {
          "description": {
            "description": "Workspace Data Filters setting description.",
            "example": "ID of country setting",
            "maxLength": 10000,
            "type": "string"
          },
          "filterValues": {
            "description": "Only those rows are returned, where columnName from filter matches those values.",
            "example": [
              "US"
            ],
            "items": {
              "description": "Only those rows are returned, where columnName from filter matches those values.",
              "example": "[\"US\"]",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Workspace Data Filters ID. This ID is further used to refer to this instance.",
            "example": "country_id_setting",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "title": {
            "description": "Workspace Data Filters setting title.",
            "example": "Country ID setting",
            "maxLength": 255,
            "type": "string"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceIdentifier"
          }
        },
        "required": [
          "filterValues",
          "id",
          "title",
          "workspace"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceDataFilters": {
        "description": "Declarative form of data filters.",
        "properties": {
          "workspaceDataFilters": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
            },
            "type": "array"
          }
        },
        "required": [
          "workspaceDataFilters"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceHierarchyPermission": {
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "name": {
            "description": "Permission name.",
            "enum": [
              "MANAGE",
              "ANALYZE",
              "EXPORT",
              "EXPORT_TABULAR",
              "EXPORT_PDF",
              "VIEW"
            ],
            "type": "string"
          }
        },
        "required": [
          "assignee",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeWorkspaceModel": {
        "description": "A declarative form of a model and analytics for a workspace.",
        "properties": {
          "analytics": {
            "$ref": "#/components/schemas/DeclarativeAnalyticsLayer"
          },
          "ldm": {
            "$ref": "#/components/schemas/DeclarativeLdm"
          }
        },
        "type": "object"
      },
      "DeclarativeWorkspacePermissions": {
        "description": "Definition of permissions associated with a workspace.",
        "properties": {
          "hierarchyPermissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceHierarchyPermission"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeSingleWorkspacePermission"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeclarativeWorkspaces": {
        "description": "A declarative form of a all workspace layout.",
        "properties": {
          "workspaceDataFilters": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilter"
            },
            "type": "array"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/DeclarativeWorkspace"
            },
            "type": "array"
          }
        },
        "required": [
          "workspaceDataFilters",
          "workspaces"
        ],
        "type": "object"
      },
      "DependentEntitiesGraph": {
        "properties": {
          "edges": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/EntityIdentifier"
              },
              "type": "array"
            },
            "type": "array",
            "uniqueItems": true
          },
          "nodes": {
            "items": {
              "$ref": "#/components/schemas/DependentEntitiesNode"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "edges",
          "nodes"
        ],
        "type": "object"
      },
      "DependentEntitiesNode": {
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "analyticalDashboard",
              "attribute",
              "dashboardPlugin",
              "dataset",
              "fact",
              "label",
              "metric",
              "userDataFilter",
              "prompt",
              "visualizationObject",
              "filterContext"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "DependentEntitiesRequest": {
        "properties": {
          "identifiers": {
            "items": {
              "$ref": "#/components/schemas/EntityIdentifier"
            },
            "type": "array"
          }
        },
        "required": [
          "identifiers"
        ],
        "type": "object"
      },
      "DependentEntitiesResponse": {
        "properties": {
          "graph": {
            "$ref": "#/components/schemas/DependentEntitiesGraph"
          }
        },
        "required": [
          "graph"
        ],
        "type": "object"
      },
      "DependsOn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DependsOnItem"
          },
          {
            "properties": {
              "complementFilter": {
                "default": false,
                "description": "Inverse filtering mode.",
                "type": "boolean"
              },
              "label": {
                "description": "Specifies on which label the filter depends on.",
                "type": "string"
              },
              "values": {
                "description": "Specifies values of the label for element filtering.",
                "items": {
                  "nullable": true,
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "Filter definition type specified by label and values.",
        "required": [
          "label",
          "values"
        ],
        "type": "object"
      },
      "DependsOnDateFilter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DependsOnItem"
          },
          {
            "properties": {
              "dateFilter": {
                "$ref": "#/components/schemas/DateFilter"
              }
            },
            "type": "object"
          }
        ],
        "description": "Filter definition type for dates.",
        "required": [
          "dateFilter"
        ],
        "type": "object"
      },
      "DependsOnItem": {
        "nullable": true,
        "type": "object"
      },
      "Dimension": {
        "description": "Single dimension description.",
        "properties": {
          "itemIdentifiers": {
            "description": "List of items in current dimension. Can reference 'localIdentifier' from 'AttributeItem', or special pseudo attribute \"measureGroup\" representing list of metrics.",
            "example": [
              "attribute_1",
              "measureGroup"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "localIdentifier": {
            "description": "Dimension identification within requests. Other entities can reference this dimension by this value.",
            "example": "firstDimension",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "sorting": {
            "description": "List of sorting rules. From most relevant to least relevant (less relevant rule is applied, when more relevant rule compares items as equal).",
            "items": {
              "$ref": "#/components/schemas/SortKey"
            },
            "type": "array"
          }
        },
        "required": [
          "itemIdentifiers"
        ],
        "type": "object"
      },
      "DimensionHeader": {
        "description": "Contains the dimension-specific header information.",
        "properties": {
          "headerGroups": {
            "description": "An array containing header groups.",
            "items": {
              "$ref": "#/components/schemas/HeaderGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "headerGroups"
        ],
        "type": "object"
      },
      "Element": {
        "description": "List of returned elements.",
        "properties": {
          "primaryTitle": {
            "description": "Title of primary label of attribute owning requested label, null if the title is null or the primary label is excluded",
            "type": "string"
          },
          "title": {
            "description": "Title of requested label.",
            "type": "string"
          }
        },
        "required": [
          "primaryTitle",
          "title"
        ],
        "type": "object"
      },
      "ElementsRequest": {
        "properties": {
          "complementFilter": {
            "default": false,
            "description": "Inverse filters:\n* ```false``` - return items matching ```patternFilter``` and ```exactFilter```\n* ```true``` - return items not matching ```patternFilter``` and ```exactFilter```",
            "type": "boolean"
          },
          "dataSamplingPercentage": {
            "default": 100.0,
            "deprecated": true,
            "description": "Specifies percentage of source table data scanned during the computation. This field is deprecated and is no longer used during the elements computation.",
            "format": "float",
            "type": "number"
          },
          "dependsOn": {
            "description": "Return only items, whose are not filtered out by the parent filters.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DependsOn"
                },
                {
                  "$ref": "#/components/schemas/DependsOnDateFilter"
                }
              ]
            },
            "type": "array"
          },
          "exactFilter": {
            "description": "Return only items, whose ```label``` title exactly matches one of ```filter```.",
            "items": {
              "nullable": true,
              "type": "string"
            },
            "type": "array"
          },
          "excludePrimaryLabel": {
            "default": false,
            "description": "Excludes items from the result that differ only by primary label\n* ```false``` - return items with distinct primary label\n* ```true``` - return items with distinct requested label",
            "type": "boolean"
          },
          "filterBy": {
            "$ref": "#/components/schemas/FilterBy"
          },
          "label": {
            "description": "Requested label.",
            "example": "label_id",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "patternFilter": {
            "description": "Return only items, whose ```label``` title case insensitively contains ```filter``` as substring.",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort order of returned items.\nItems are sorted by ```label``` title. If no sort order is specified then attribute's ```sortDirection``` is used, which is ASC by default",
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          },
          "validateBy": {
            "description": "Return only items, what are computable on metric.",
            "items": {
              "$ref": "#/components/schemas/ValidateByItem"
            },
            "type": "array"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "ElementsResponse": {
        "description": "Entity holding list of sorted & filtered label elements, related primary label of attribute owning requested label and paging.",
        "properties": {
          "elements": {
            "description": "List of returned elements.",
            "items": {
              "$ref": "#/components/schemas/Element"
            },
            "type": "array"
          },
          "format": {
            "$ref": "#/components/schemas/AttributeFormat"
          },
          "granularity": {
            "description": "Granularity of requested label in case of date attribute",
            "enum": [
              "MINUTE",
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR",
              "MINUTE_OF_HOUR",
              "HOUR_OF_DAY",
              "DAY_OF_WEEK",
              "DAY_OF_MONTH",
              "DAY_OF_YEAR",
              "WEEK_OF_YEAR",
              "MONTH_OF_YEAR",
              "QUARTER_OF_YEAR"
            ],
            "type": "string"
          },
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "primaryLabel": {
            "$ref": "#/components/schemas/RestApiIdentifier"
          }
        },
        "required": [
          "elements",
          "paging",
          "primaryLabel"
        ],
        "type": "object"
      },
      "EntitlementsRequest": {
        "properties": {
          "entitlementsName": {
            "items": {
              "enum": [
                "CacheStrategy",
                "Contract",
                "CustomTheming",
                "ExtraCache",
                "Hipaa",
                "PdfExports",
                "ManagedOIDC",
                "UiLocalization",
                "Tier",
                "UserCount",
                "UnlimitedUsers",
                "UnlimitedWorkspaces",
                "WhiteLabeling",
                "WorkspaceCount",
                "UserTelemetryDisabled"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "entitlementsName"
        ],
        "type": "object"
      },
      "EntityIdentifier": {
        "properties": {
          "id": {
            "description": "Object identifier.",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "enum": [
              "analyticalDashboard",
              "attribute",
              "dashboardPlugin",
              "dataset",
              "fact",
              "label",
              "metric",
              "userDataFilter",
              "prompt",
              "visualizationObject",
              "filterContext"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ExecutionLinks": {
        "properties": {
          "executionResult": {
            "type": "string"
          }
        },
        "required": [
          "executionResult"
        ],
        "type": "object"
      },
      "ExecutionResponse": {
        "properties": {
          "dimensions": {
            "items": {
              "$ref": "#/components/schemas/ResultDimension"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/ExecutionLinks"
          }
        },
        "required": [
          "dimensions",
          "links"
        ],
        "type": "object"
      },
      "ExecutionResult": {
        "description": "Contains the result of an AFM execution.",
        "properties": {
          "data": {
            "description": "A multi-dimensional array of computed results. The most common one being a 2-dimensional array. The arrays can be composed of Double or null values.",
            "example": [
              [
                1.0,
                2.5
              ],
              [
                -1.3,
                3.14
              ]
            ],
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "dimensionHeaders": {
            "description": "An array containing dimension headers. The size of the array corresponds to the number of dimensions. Their order corresponds to the dimension order in the execution result spec.",
            "items": {
              "$ref": "#/components/schemas/DimensionHeader"
            },
            "type": "array"
          },
          "grandTotals": {
            "items": {
              "$ref": "#/components/schemas/ExecutionResultGrandTotal"
            },
            "type": "array"
          },
          "paging": {
            "$ref": "#/components/schemas/ExecutionResultPaging"
          }
        },
        "required": [
          "data",
          "dimensionHeaders",
          "grandTotals",
          "paging"
        ],
        "type": "object"
      },
      "ExecutionResultGrandTotal": {
        "description": "Contains the data of grand totals with the same dimensions.",
        "properties": {
          "data": {
            "description": "A multi-dimensional array of computed results. The most common one being a 2-dimensional array. The arrays can be composed of Double or null values.",
            "example": [
              [
                1.0,
                2.5
              ],
              [
                -1.3,
                3.14
              ]
            ],
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "dimensionHeaders": {
            "description": "Contains headers for a subset of `totalDimensions` in which the totals are grand totals.",
            "items": {
              "$ref": "#/components/schemas/DimensionHeader"
            },
            "type": "array"
          },
          "totalDimensions": {
            "description": "Dimensions of the grand totals.",
            "items": {
              "description": "Dimensions of the grand totals.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "data",
          "dimensionHeaders",
          "totalDimensions"
        ],
        "type": "object"
      },
      "ExecutionResultHeader": {
        "description": "Abstract execution result header",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AttributeExecutionResultHeader"
          },
          {
            "$ref": "#/components/schemas/MeasureExecutionResultHeader"
          },
          {
            "$ref": "#/components/schemas/TotalExecutionResultHeader"
          }
        ],
        "type": "object"
      },
      "ExecutionResultPaging": {
        "description": "A paging information related to the data presented in the execution result. These paging information are multi-dimensional.",
        "properties": {
          "count": {
            "description": "A count of the returned results in every dimension.",
            "example": [
              2,
              2
            ],
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "offset": {
            "description": "The offset of the results returned in every dimension.",
            "example": [
              0,
              0
            ],
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "total": {
            "description": "A total count of the results in every dimension.",
            "example": [
              2,
              2
            ],
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "required": [
          "count",
          "offset",
          "total"
        ],
        "type": "object"
      },
      "ExecutionSettings": {
        "description": "Various settings affecting the process of AFM execution or its result",
        "properties": {
          "dataSamplingPercentage": {
            "description": "Specifies the percentage of rows from fact datasets to use during computation. This feature is available only for workspaces that use a Vertica Data Source without table views.",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "ExportResponse": {
        "properties": {
          "exportResult": {
            "type": "string"
          }
        },
        "required": [
          "exportResult"
        ],
        "type": "object"
      },
      "File": {
        "properties": {
          "any": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "canResegment": {
            "enum": [
              "YES",
              "NO"
            ],
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "id": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "notes": {
            "$ref": "#/components/schemas/Notes"
          },
          "original": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "otherAttributes": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "skeleton": {
            "$ref": "#/components/schemas/Skeleton"
          },
          "space": {
            "type": "string",
            "xml": {
              "attribute": true,
              "namespace": "http://www.w3.org/XML/1998/namespace"
            }
          },
          "srcDir": {
            "enum": [
              "LTR",
              "RTL",
              "AUTO"
            ],
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "translate": {
            "enum": [
              "YES",
              "NO"
            ],
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "trgDir": {
            "enum": [
              "LTR",
              "RTL",
              "AUTO"
            ],
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "unitOrGroup": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object",
        "xml": {
          "name": "file",
          "namespace": "urn:oasis:names:tc:xliff:document:2.0"
        }
      },
      "FilterBy": {
        "description": "Specifies what is used for filtering.",
        "properties": {
          "labelType": {
            "default": "REQUESTED",
            "description": "Specifies which label is used for filtering - primary or requested.",
            "enum": [
              "PRIMARY",
              "REQUESTED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilterDefinition": {
        "description": "Abstract filter definition type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/InlineFilterDefinition"
          },
          {
            "$ref": "#/components/schemas/RankingFilter"
          },
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/AbsoluteDateFilter"
          },
          {
            "$ref": "#/components/schemas/RelativeDateFilter"
          },
          {
            "$ref": "#/components/schemas/NegativeAttributeFilter"
          },
          {
            "$ref": "#/components/schemas/PositiveAttributeFilter"
          }
        ],
        "type": "object"
      },
      "FilterDefinitionForSimpleMeasure": {
        "description": "Abstract filter definition type for simple metric.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DateFilter"
          },
          {
            "$ref": "#/components/schemas/AttributeFilter"
          }
        ],
        "type": "object"
      },
      "GenerateLdmRequest": {
        "description": "A request containing all information needed for generation of logical model.",
        "properties": {
          "dateGranularities": {
            "description": "Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).",
            "example": "all",
            "type": "string"
          },
          "denormPrefix": {
            "description": "Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.",
            "example": "dr",
            "type": "string"
          },
          "factPrefix": {
            "description": "Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.",
            "example": "f",
            "type": "string"
          },
          "generateLongIds": {
            "description": "A flag dictating how the attribute, fact and label ids are generated. By default their ids are derived only from the column name, unless there would be a conflict (e.g. category coming from two different tables). In that case a long id format of `<table>.<column>` is used. If the flag is set to true, then all ids will be generated in the long form.",
            "type": "boolean"
          },
          "grainPrefix": {
            "description": "Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.",
            "example": "g",
            "type": "string"
          },
          "grainReferencePrefix": {
            "description": "Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.",
            "example": "gr",
            "type": "string"
          },
          "pdm": {
            "$ref": "#/components/schemas/PdmLdmRequest"
          },
          "primaryLabelPrefix": {
            "description": "Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.",
            "example": "pl",
            "type": "string"
          },
          "referencePrefix": {
            "description": "Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.",
            "example": "r",
            "type": "string"
          },
          "secondaryLabelPrefix": {
            "description": "Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.",
            "example": "sl",
            "type": "string"
          },
          "separator": {
            "default": "__",
            "description": "A separator between prefixes and the names. Default is \"__\".",
            "example": "__",
            "type": "string"
          },
          "tablePrefix": {
            "deprecated": true,
            "description": "Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.",
            "example": "out_table",
            "type": "string"
          },
          "viewPrefix": {
            "deprecated": true,
            "description": "Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.",
            "example": "out_view",
            "type": "string"
          },
          "wdfPrefix": {
            "description": "Column serving as workspace data filter. No labels are auto generated for such columns.",
            "example": "wdf",
            "type": "string"
          },
          "workspaceId": {
            "description": "Optional workspace id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrainIdentifier": {
        "description": "A grain identifier.",
        "example": {
          "id": "customer_id",
          "type": "attribute"
        },
        "maxLength": 255,
        "properties": {
          "id": {
            "description": "Grain ID.",
            "example": "attr.customers.customer_name",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type of the grain.",
            "enum": [
              "attribute",
              "date"
            ],
            "example": "ATTRIBUTE",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "GrantedPermission": {
        "description": "Permissions granted to the user group",
        "properties": {
          "level": {
            "description": "Level of permission",
            "example": "VIEW, SHARE, EDIT",
            "type": "string"
          },
          "source": {
            "description": "Source of permission",
            "example": "direct/indirect",
            "type": "string"
          }
        },
        "required": [
          "level",
          "source"
        ],
        "type": "object"
      },
      "GranularitiesFormatting": {
        "description": "A date dataset granularities title formatting rules.",
        "properties": {
          "titleBase": {
            "description": "Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.",
            "maxLength": 255,
            "type": "string"
          },
          "titlePattern": {
            "description": "This pattern is used to generate the title of attributes and labels that result from the granularities.\nThere are two tokens available: \n* `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty\n* `%granularityTitle` - represents `DateGranularity` built-in title",
            "example": "%titleBase - %granularityTitle",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "titleBase",
          "titlePattern"
        ],
        "type": "object"
      },
      "HeaderGroup": {
        "description": "Contains the information specific for a group of headers. These groups correlate to attributes and metric groups.",
        "properties": {
          "headers": {
            "description": "An array containing headers.",
            "items": {
              "$ref": "#/components/schemas/ExecutionResultHeader"
            },
            "type": "array"
          }
        },
        "required": [
          "headers"
        ],
        "type": "object"
      },
      "HierarchyObjectIdentification": {
        "description": "Represents objects with given ID and type in workspace hierarchy (more than one can exists in different workspaces).",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "analyticalDashboard",
              "attribute",
              "dashboardPlugin",
              "dataset",
              "fact",
              "label",
              "metric",
              "prompt",
              "visualizationObject",
              "filterContext",
              "workspaceDataFilter",
              "workspaceDataFilterSettings"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "IdentifierDuplications": {
        "description": "Contains information about conflicting IDs in workspace hierarchy",
        "properties": {
          "id": {
            "type": "string"
          },
          "origins": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "analyticalDashboard",
              "attribute",
              "dashboardPlugin",
              "dataset",
              "fact",
              "label",
              "metric",
              "prompt",
              "visualizationObject",
              "filterContext",
              "workspaceDataFilter",
              "workspaceDataFilterSettings"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "id",
          "origins",
          "type"
        ],
        "type": "object"
      },
      "InlineFilterDefinition": {
        "description": "Filter in form of direct MAQL query.",
        "properties": {
          "inline": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "filter": {
                "type": "string"
              }
            },
            "required": [
              "filter"
            ],
            "type": "object"
          }
        },
        "required": [
          "inline"
        ],
        "type": "object"
      },
      "InlineMeasureDefinition": {
        "description": "Metric defined by the raw MAQL query.",
        "properties": {
          "inline": {
            "properties": {
              "maql": {
                "type": "string"
              }
            },
            "required": [
              "maql"
            ],
            "type": "object"
          }
        },
        "required": [
          "inline"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardIn": {
        "description": "JSON:API representation of analyticalDashboard entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "analyticalDashboard"
            ],
            "example": "analyticalDashboard",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "analyticalDashboard"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardOut": {
        "description": "JSON:API representation of analyticalDashboard entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "modifiedAt": {
                "format": "date-time",
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "accessInfo": {
                "properties": {
                  "private": {
                    "description": "is the entity private to the currently logged-in user",
                    "type": "boolean"
                  }
                },
                "required": [
                  "private"
                ],
                "type": "object"
              },
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              },
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "EDIT",
                    "SHARE",
                    "VIEW"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "analyticalDashboards": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAnalyticalDashboardToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "createdBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "dashboardPlugins": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDashboardPluginToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "filterContexts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFilterContextToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "metrics": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "modifiedBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "visualizationObjects": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiVisualizationObjectToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "analyticalDashboard"
            ],
            "example": "analyticalDashboard",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDashboardPluginOutWithLinks"
          }
        ]
      },
      "JsonApiAnalyticalDashboardOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiAnalyticalDashboardPatch": {
        "description": "JSON:API representation of patching analyticalDashboard entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "analyticalDashboard"
            ],
            "example": "analyticalDashboard",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardPostOptionalId": {
        "description": "JSON:API representation of analyticalDashboard entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "analyticalDashboard"
            ],
            "example": "analyticalDashboard",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardPostOptionalIdDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPostOptionalId"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAnalyticalDashboardToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiAnalyticalDashboardLinkage"
        },
        "type": "array"
      },
      "JsonApiApiTokenIn": {
        "description": "JSON:API representation of apiToken entity.",
        "properties": {
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "apiToken"
            ],
            "example": "apiToken",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiApiTokenInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiApiTokenIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiApiTokenOut": {
        "description": "JSON:API representation of apiToken entity.",
        "properties": {
          "attributes": {
            "properties": {
              "bearerToken": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "apiToken"
            ],
            "example": "apiToken",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiApiTokenOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiApiTokenOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiApiTokenOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiApiTokenOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiApiTokenOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiApiTokenOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiAttributeHierarchyIn": {
        "description": "JSON:API representation of attributeHierarchy entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {
                  "attributes": [
                    {
                      "identifier": {
                        "id": "country",
                        "type": "attribute"
                      }
                    },
                    {
                      "identifier": {
                        "id": "city",
                        "type": "attribute"
                      }
                    }
                  ]
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "attributeHierarchy"
            ],
            "example": "attributeHierarchy",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAttributeHierarchyInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAttributeHierarchyIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAttributeHierarchyLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "attributeHierarchy"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAttributeHierarchyOut": {
        "description": "JSON:API representation of attributeHierarchy entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {
                  "attributes": [
                    {
                      "identifier": {
                        "id": "country",
                        "type": "attribute"
                      }
                    },
                    {
                      "identifier": {
                        "id": "city",
                        "type": "attribute"
                      }
                    }
                  ]
                },
                "type": "object"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "modifiedAt": {
                "format": "date-time",
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "createdBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "modifiedBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "attributeHierarchy"
            ],
            "example": "attributeHierarchy",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAttributeHierarchyOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAttributeHierarchyOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAttributeHierarchyOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
          }
        ]
      },
      "JsonApiAttributeHierarchyOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAttributeHierarchyOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeHierarchyOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiAttributeHierarchyPatch": {
        "description": "JSON:API representation of patching attributeHierarchy entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {
                  "attributes": [
                    {
                      "identifier": {
                        "id": "country",
                        "type": "attribute"
                      }
                    },
                    {
                      "identifier": {
                        "id": "city",
                        "type": "attribute"
                      }
                    }
                  ]
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "attributeHierarchy"
            ],
            "example": "attributeHierarchy",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAttributeHierarchyPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAttributeHierarchyPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAttributeHierarchyToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiAttributeHierarchyLinkage"
        },
        "type": "array"
      },
      "JsonApiAttributeLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "attribute"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAttributeOut": {
        "description": "JSON:API representation of attribute entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "granularity": {
                "enum": [
                  "MINUTE",
                  "HOUR",
                  "DAY",
                  "WEEK",
                  "MONTH",
                  "QUARTER",
                  "YEAR",
                  "MINUTE_OF_HOUR",
                  "HOUR_OF_DAY",
                  "DAY_OF_WEEK",
                  "DAY_OF_MONTH",
                  "DAY_OF_YEAR",
                  "WEEK_OF_YEAR",
                  "MONTH_OF_YEAR",
                  "QUARTER_OF_YEAR"
                ],
                "type": "string"
              },
              "sortColumn": {
                "maxLength": 255,
                "type": "string"
              },
              "sortDirection": {
                "enum": [
                  "ASC",
                  "DESC"
                ],
                "type": "string"
              },
              "sourceColumn": {
                "maxLength": 255,
                "type": "string"
              },
              "sourceColumnDataType": {
                "enum": [
                  "INT",
                  "STRING",
                  "DATE",
                  "NUMERIC",
                  "TIMESTAMP",
                  "TIMESTAMP_TZ",
                  "BOOLEAN"
                ],
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributeHierarchies": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeHierarchyToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "dataset": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "defaultView": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "attribute"
            ],
            "example": "attribute",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiAttributeOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiAttributeOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAttributeOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutWithLinks"
          }
        ]
      },
      "JsonApiAttributeOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiAttributeOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiAttributeToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiAttributeLinkage"
        },
        "type": "array"
      },
      "JsonApiAttributeToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeLinkage"
          }
        ]
      },
      "JsonApiColorPaletteIn": {
        "description": "JSON:API representation of colorPalette entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content",
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "colorPalette"
            ],
            "example": "colorPalette",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiColorPaletteIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteOut": {
        "description": "JSON:API representation of colorPalette entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content",
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "colorPalette"
            ],
            "example": "colorPalette",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiColorPaletteOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiColorPaletteOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiColorPaletteOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiColorPaletteOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiColorPalettePatch": {
        "description": "JSON:API representation of patching colorPalette entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "colorPalette"
            ],
            "example": "colorPalette",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiColorPalettePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiColorPalettePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationIn": {
        "description": "JSON:API representation of cookieSecurityConfiguration entity.",
        "properties": {
          "attributes": {
            "properties": {
              "lastRotation": {
                "format": "date-time",
                "type": "string"
              },
              "rotationInterval": {
                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                "example": "P30D",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cookieSecurityConfiguration"
            ],
            "example": "cookieSecurityConfiguration",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationOut": {
        "description": "JSON:API representation of cookieSecurityConfiguration entity.",
        "properties": {
          "attributes": {
            "properties": {
              "lastRotation": {
                "format": "date-time",
                "type": "string"
              },
              "rotationInterval": {
                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                "example": "P30D",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cookieSecurityConfiguration"
            ],
            "example": "cookieSecurityConfiguration",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationPatch": {
        "description": "JSON:API representation of patching cookieSecurityConfiguration entity.",
        "properties": {
          "attributes": {
            "properties": {
              "lastRotation": {
                "format": "date-time",
                "type": "string"
              },
              "rotationInterval": {
                "description": "Length of interval between automatic rotations expressed in format of ISO 8601 duration",
                "example": "P30D",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cookieSecurityConfiguration"
            ],
            "example": "cookieSecurityConfiguration",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCookieSecurityConfigurationPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveIn": {
        "description": "JSON:API representation of cspDirective entity.",
        "properties": {
          "attributes": {
            "properties": {
              "sources": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "sources"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cspDirective"
            ],
            "example": "cspDirective",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCspDirectiveIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveOut": {
        "description": "JSON:API representation of cspDirective entity.",
        "properties": {
          "attributes": {
            "properties": {
              "sources": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "sources"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cspDirective"
            ],
            "example": "cspDirective",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCspDirectiveOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiCspDirectiveOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCspDirectiveOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiCspDirectiveOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiCspDirectivePatch": {
        "description": "JSON:API representation of patching cspDirective entity.",
        "properties": {
          "attributes": {
            "properties": {
              "sources": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "cspDirective"
            ],
            "example": "cspDirective",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCspDirectivePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCspDirectivePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingIn": {
        "description": "JSON:API representation of customApplicationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "applicationName": {
                "maxLength": 255,
                "type": "string"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              }
            },
            "required": [
              "applicationName",
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "customApplicationSetting"
            ],
            "example": "customApplicationSetting",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingOut": {
        "description": "JSON:API representation of customApplicationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "applicationName": {
                "maxLength": 255,
                "type": "string"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              }
            },
            "required": [
              "applicationName",
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "customApplicationSetting"
            ],
            "example": "customApplicationSetting",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiCustomApplicationSettingPatch": {
        "description": "JSON:API representation of patching customApplicationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "applicationName": {
                "maxLength": 255,
                "type": "string"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "customApplicationSetting"
            ],
            "example": "customApplicationSetting",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingPostOptionalId": {
        "description": "JSON:API representation of customApplicationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "applicationName": {
                "maxLength": 255,
                "type": "string"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              }
            },
            "required": [
              "applicationName",
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "customApplicationSetting"
            ],
            "example": "customApplicationSetting",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "JsonApiCustomApplicationSettingPostOptionalIdDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPostOptionalId"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginIn": {
        "description": "JSON:API representation of dashboardPlugin entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "url": "<plugin-url>"
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dashboardPlugin"
            ],
            "example": "dashboardPlugin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDashboardPluginIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "dashboardPlugin"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginOut": {
        "description": "JSON:API representation of dashboardPlugin entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "url": "<plugin-url>"
                },
                "type": "object"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "modifiedAt": {
                "format": "date-time",
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "createdBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "modifiedBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dashboardPlugin"
            ],
            "example": "dashboardPlugin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDashboardPluginOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDashboardPluginOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDashboardPluginOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDashboardPluginPatch": {
        "description": "JSON:API representation of patching dashboardPlugin entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "url": "<plugin-url>"
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dashboardPlugin"
            ],
            "example": "dashboardPlugin",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDashboardPluginPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginPostOptionalId": {
        "description": "JSON:API representation of dashboardPlugin entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "url": "<plugin-url>"
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dashboardPlugin"
            ],
            "example": "dashboardPlugin",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginPostOptionalIdDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDashboardPluginPostOptionalId"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDashboardPluginToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiDashboardPluginLinkage"
        },
        "type": "array"
      },
      "JsonApiDataSourceIdentifierOut": {
        "description": "JSON:API representation of dataSourceIdentifier entity.",
        "properties": {
          "attributes": {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "schema": {
                "maxLength": 255,
                "type": "string"
              },
              "type": {
                "enum": [
                  "POSTGRESQL",
                  "REDSHIFT",
                  "VERTICA",
                  "SNOWFLAKE",
                  "ADS",
                  "BIGQUERY",
                  "MSSQL",
                  "PRESTO",
                  "DREMIO",
                  "DRILL",
                  "GREENPLUM",
                  "AZURESQL",
                  "SYNAPSESQL",
                  "DATABRICKS",
                  "GDSTORAGE",
                  "CLICKHOUSE",
                  "MYSQL",
                  "MARIADB"
                ],
                "type": "string"
              }
            },
            "required": [
              "name",
              "schema",
              "type"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "MANAGE",
                    "USE"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSourceIdentifier"
            ],
            "example": "dataSourceIdentifier",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourceIdentifierOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceIdentifierOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceIdentifierOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDataSourceIn": {
        "description": "JSON:API representation of dataSource entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cachePath": {
                "description": "Path to schema, where intermediate caches are stored.",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              },
              "cacheStrategy": {
                "description": "Determines how the results coming from a particular datasource should be cached.",
                "enum": [
                  "ALWAYS",
                  "NEVER"
                ],
                "nullable": true,
                "type": "string"
              },
              "enableCaching": {
                "description": "Enable CTAS caching of intermediate results in the database.",
                "example": false,
                "nullable": true,
                "type": "boolean"
              },
              "name": {
                "description": "User-facing name of the data source.",
                "maxLength": 255,
                "type": "string"
              },
              "parameters": {
                "description": "Additional parameters to be used when connecting to the database providing the data for the data source.",
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object"
                },
                "nullable": true,
                "type": "array"
              },
              "password": {
                "description": "The password to use to connect to the database providing the data for the data source.",
                "maxLength": 255,
                "nullable": true,
                "type": "string"
              },
              "schema": {
                "description": "The schema to use as the root of the data for the data source.",
                "maxLength": 255,
                "type": "string"
              },
              "token": {
                "description": "The token to use to connect to the database providing the data for the data source (for example a BigQuery Sevice Acount).",
                "maxLength": 10000,
                "nullable": true,
                "type": "string"
              },
              "type": {
                "description": "Type of the database providing the data for the data source.",
                "enum": [
                  "POSTGRESQL",
                  "REDSHIFT",
                  "VERTICA",
                  "SNOWFLAKE",
                  "ADS",
                  "BIGQUERY",
                  "MSSQL",
                  "PRESTO",
                  "DREMIO",
                  "DRILL",
                  "GREENPLUM",
                  "AZURESQL",
                  "SYNAPSESQL",
                  "DATABRICKS",
                  "GDSTORAGE",
                  "CLICKHOUSE",
                  "MYSQL",
                  "MARIADB"
                ],
                "type": "string"
              },
              "url": {
                "description": "The URL of the database providing the data for the data source.",
                "maxLength": 255,
                "nullable": true,
                "type": "string"
              },
              "username": {
                "description": "The username to use to connect to the database providing the data for the data source.",
                "maxLength": 255,
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "name",
              "schema",
              "type"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSource"
            ],
            "example": "dataSource",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourceInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourceIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceOut": {
        "description": "JSON:API representation of dataSource entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cachePath": {
                "description": "Path to schema, where intermediate caches are stored.",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              },
              "cacheStrategy": {
                "description": "Determines how the results coming from a particular datasource should be cached.",
                "enum": [
                  "ALWAYS",
                  "NEVER"
                ],
                "nullable": true,
                "type": "string"
              },
              "decodedParameters": {
                "description": "Decoded parameters to be used when connecting to the database providing the data for the data source.",
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object"
                },
                "nullable": true,
                "type": "array"
              },
              "enableCaching": {
                "description": "Enable CTAS caching of intermediate results in the database.",
                "example": false,
                "nullable": true,
                "type": "boolean"
              },
              "name": {
                "description": "User-facing name of the data source.",
                "maxLength": 255,
                "type": "string"
              },
              "parameters": {
                "description": "Additional parameters to be used when connecting to the database providing the data for the data source.",
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object"
                },
                "nullable": true,
                "type": "array"
              },
              "schema": {
                "description": "The schema to use as the root of the data for the data source.",
                "maxLength": 255,
                "type": "string"
              },
              "type": {
                "description": "Type of the database providing the data for the data source.",
                "enum": [
                  "POSTGRESQL",
                  "REDSHIFT",
                  "VERTICA",
                  "SNOWFLAKE",
                  "ADS",
                  "BIGQUERY",
                  "MSSQL",
                  "PRESTO",
                  "DREMIO",
                  "DRILL",
                  "GREENPLUM",
                  "AZURESQL",
                  "SYNAPSESQL",
                  "DATABRICKS",
                  "GDSTORAGE",
                  "CLICKHOUSE",
                  "MYSQL",
                  "MARIADB"
                ],
                "type": "string"
              },
              "url": {
                "description": "The URL of the database providing the data for the data source.",
                "maxLength": 255,
                "nullable": true,
                "type": "string"
              },
              "username": {
                "description": "The username to use to connect to the database providing the data for the data source.",
                "maxLength": 255,
                "nullable": true,
                "type": "string"
              }
            },
            "required": [
              "name",
              "schema",
              "type"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "MANAGE",
                    "USE"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSource"
            ],
            "example": "dataSource",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourceOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourceOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDataSourceOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDataSourceOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDataSourceOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDataSourcePatch": {
        "description": "JSON:API representation of patching dataSource entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cachePath": {
                "description": "Path to schema, where intermediate caches are stored.",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "type": "array"
              },
              "cacheStrategy": {
                "description": "Determines how the results coming from a particular datasource should be cached.",
                "enum": [
                  "ALWAYS",
                  "NEVER"
                ],
                "nullable": true,
                "type": "string"
              },
              "enableCaching": {
                "description": "Enable CTAS caching of intermediate results in the database.",
                "example": false,
                "nullable": true,
                "type": "boolean"
              },
              "name": {
                "description": "User-facing name of the data source.",
                "maxLength": 255,
                "type": "string"
              },
              "parameters": {
                "description": "Additional parameters to be used when connecting to the database providing the data for the data source.",
                "items": {
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "value"
                  ],
                  "type": "object"
                },
                "nullable": true,
                "type": "array"
              },
              "password": {
                "description": "The password to use to connect to the database providing the data for the data source.",
                "maxLength": 255,
                "nullable": true,
                "type": "string"
              },
              "schema": {
                "description": "The schema to use as the root of the data for the data source.",
                "maxLength": 255,
                "type": "string"
              },
              "token": {
                "description": "The token to use to connect to the database providing the data for the data source (for example a BigQuery Sevice Acount).",
                "maxLength": 10000,
                "nullable": true,
                "type": "string"
              },
              "type": {
                "description": "Type of the database providing the data for the data source.",
                "enum": [
                  "POSTGRESQL",
                  "REDSHIFT",
                  "VERTICA",
                  "SNOWFLAKE",
                  "ADS",
                  "BIGQUERY",
                  "MSSQL",
                  "PRESTO",
                  "DREMIO",
                  "DRILL",
                  "GREENPLUM",
                  "AZURESQL",
                  "SYNAPSESQL",
                  "DATABRICKS",
                  "GDSTORAGE",
                  "CLICKHOUSE",
                  "MYSQL",
                  "MARIADB"
                ],
                "type": "string"
              },
              "url": {
                "description": "The URL of the database providing the data for the data source.",
                "maxLength": 255,
                "nullable": true,
                "type": "string"
              },
              "username": {
                "description": "The username to use to connect to the database providing the data for the data source.",
                "maxLength": 255,
                "nullable": true,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataSource"
            ],
            "example": "dataSource",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDataSourcePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDataSourcePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDatasetLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "dataset"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDatasetOut": {
        "description": "JSON:API representation of dataset entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "dataSourceTableId": {
                "maxLength": 255,
                "type": "string"
              },
              "dataSourceTablePath": {
                "description": "Path to database table.",
                "example": [
                  "schema",
                  "table"
                ],
                "items": {
                  "maxLength": 255,
                  "type": "string"
                },
                "type": "array"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "grain": {
                "items": {
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "enum": [
                        "attribute",
                        "date"
                      ],
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "type"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "referenceProperties": {
                "items": {
                  "properties": {
                    "identifier": {
                      "$ref": "#/components/schemas/DatasetReferenceIdentifier"
                    },
                    "multivalue": {
                      "type": "boolean"
                    },
                    "sourceColumnDataTypes": {
                      "items": {
                        "enum": [
                          "INT",
                          "STRING",
                          "DATE",
                          "NUMERIC",
                          "TIMESTAMP",
                          "TIMESTAMP_TZ",
                          "BOOLEAN"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "sourceColumns": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "sources": {
                      "items": {
                        "$ref": "#/components/schemas/ReferenceSourceColumn"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "identifier",
                    "multivalue"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "sql": {
                "properties": {
                  "dataSourceId": {
                    "type": "string"
                  },
                  "statement": {
                    "type": "string"
                  }
                },
                "required": [
                  "dataSourceId",
                  "statement"
                ],
                "type": "object"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              },
              "type": {
                "enum": [
                  "NORMAL",
                  "DATE"
                ],
                "type": "string"
              },
              "workspaceDataFilterColumns": {
                "items": {
                  "properties": {
                    "dataType": {
                      "enum": [
                        "INT",
                        "STRING",
                        "DATE",
                        "NUMERIC",
                        "TIMESTAMP",
                        "TIMESTAMP_TZ",
                        "BOOLEAN"
                      ],
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "dataType",
                    "name"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "workspaceDataFilterReferences": {
                "items": {
                  "description": "Workspace data filter reference.",
                  "properties": {
                    "filterColumn": {
                      "type": "string"
                    },
                    "filterColumnDataType": {
                      "enum": [
                        "INT",
                        "STRING",
                        "DATE",
                        "NUMERIC",
                        "TIMESTAMP",
                        "TIMESTAMP_TZ",
                        "BOOLEAN"
                      ],
                      "type": "string"
                    },
                    "filterId": {
                      "$ref": "#/components/schemas/DatasetWorkspaceDataFilterIdentifier"
                    }
                  },
                  "required": [
                    "filterColumn",
                    "filterColumnDataType",
                    "filterId"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [
              "type"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "facts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "references": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "workspaceDataFilters": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "dataset"
            ],
            "example": "dataset",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiDatasetOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiDatasetOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDatasetOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
          }
        ]
      },
      "JsonApiDatasetOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiDatasetOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiDatasetOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiDatasetToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiDatasetLinkage"
        },
        "type": "array"
      },
      "JsonApiDatasetToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiDatasetLinkage"
          }
        ]
      },
      "JsonApiEntitlementOut": {
        "description": "JSON:API representation of entitlement entity.",
        "properties": {
          "attributes": {
            "properties": {
              "expiry": {
                "format": "date",
                "type": "string"
              },
              "value": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "entitlement"
            ],
            "example": "entitlement",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiEntitlementOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiEntitlementOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiEntitlementOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiEntitlementOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiEntitlementOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiEntitlementOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiExportDefinitionIn": {
        "description": "JSON:API representation of exportDefinition entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "requestPayload": {
                "description": "Free-form JSON content to be used as export request payload for /export/tabular endpoint. Maximum supported length is 15000 characters.",
                "example": {
                  "format": "PDF",
                  "visualizationObjectId": "<id>"
                },
                "type": "object"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "requestPayload"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "filterContext": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFilterContextToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "visualizationObject": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiVisualizationObjectToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "exportDefinition"
            ],
            "example": "exportDefinition",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiExportDefinitionInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiExportDefinitionIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiExportDefinitionOut": {
        "description": "JSON:API representation of exportDefinition entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "modifiedAt": {
                "format": "date-time",
                "type": "string"
              },
              "requestPayload": {
                "description": "Free-form JSON content to be used as export request payload for /export/tabular endpoint. Maximum supported length is 15000 characters.",
                "example": {
                  "format": "PDF",
                  "visualizationObjectId": "<id>"
                },
                "type": "object"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "requestPayload"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "createdBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "filterContext": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFilterContextToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "modifiedBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "visualizationObject": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiVisualizationObjectToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "exportDefinition"
            ],
            "example": "exportDefinition",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiExportDefinitionOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiExportDefinitionOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiExportDefinitionOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiExportDefinitionOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
          }
        ]
      },
      "JsonApiExportDefinitionOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiExportDefinitionOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiExportDefinitionOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiExportDefinitionOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiExportDefinitionOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiExportDefinitionPatch": {
        "description": "JSON:API representation of patching exportDefinition entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "requestPayload": {
                "description": "Free-form JSON content to be used as export request payload for /export/tabular endpoint. Maximum supported length is 15000 characters.",
                "example": {
                  "format": "PDF",
                  "visualizationObjectId": "<id>"
                },
                "type": "object"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "filterContext": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFilterContextToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "visualizationObject": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiVisualizationObjectToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "exportDefinition"
            ],
            "example": "exportDefinition",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiExportDefinitionPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiExportDefinitionPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFactLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "fact"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFactOut": {
        "description": "JSON:API representation of fact entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "sourceColumn": {
                "maxLength": 255,
                "type": "string"
              },
              "sourceColumnDataType": {
                "enum": [
                  "INT",
                  "STRING",
                  "DATE",
                  "NUMERIC",
                  "TIMESTAMP",
                  "TIMESTAMP_TZ",
                  "BOOLEAN"
                ],
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "dataset": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "fact"
            ],
            "example": "fact",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFactOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFactOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFactOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFactOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiFactOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiFactToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiFactLinkage"
        },
        "type": "array"
      },
      "JsonApiFilterContextIn": {
        "description": "JSON:API representation of filterContext entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "filterContext"
            ],
            "example": "filterContext",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFilterContextIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "filterContext"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextOut": {
        "description": "JSON:API representation of filterContext entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "filterContext"
            ],
            "example": "filterContext",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFilterContextOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiFilterContextOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          }
        ]
      },
      "JsonApiFilterContextOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiFilterContextOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiFilterContextOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiFilterContextOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiFilterContextPatch": {
        "description": "JSON:API representation of patching filterContext entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "filterContext"
            ],
            "example": "filterContext",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFilterContextPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextPostOptionalId": {
        "description": "JSON:API representation of filterContext entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "filterContext"
            ],
            "example": "filterContext",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "JsonApiFilterContextPostOptionalIdDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiFilterContextPostOptionalId"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiFilterContextToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiFilterContextLinkage"
        },
        "type": "array"
      },
      "JsonApiFilterContextToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiFilterContextLinkage"
          }
        ]
      },
      "JsonApiJwkIn": {
        "description": "JSON:API representation of jwk entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Specification of the cryptographic key",
                "example": {
                  "alg": "RS256",
                  "kyt": "RSA",
                  "use": "sig"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RsaSpecification"
                  }
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "jwk"
            ],
            "example": "jwk",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiJwkInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiJwkIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiJwkOut": {
        "description": "JSON:API representation of jwk entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Specification of the cryptographic key",
                "example": {
                  "alg": "RS256",
                  "kyt": "RSA",
                  "use": "sig"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RsaSpecification"
                  }
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "jwk"
            ],
            "example": "jwk",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiJwkOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiJwkOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiJwkOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiJwkOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiJwkOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiJwkOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiJwkPatch": {
        "description": "JSON:API representation of patching jwk entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Specification of the cryptographic key",
                "example": {
                  "alg": "RS256",
                  "kyt": "RSA",
                  "use": "sig"
                },
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RsaSpecification"
                  }
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "jwk"
            ],
            "example": "jwk",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiJwkPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiJwkPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiLabelLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "label"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiLabelOut": {
        "description": "JSON:API representation of label entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "primary": {
                "type": "boolean"
              },
              "sourceColumn": {
                "maxLength": 255,
                "type": "string"
              },
              "sourceColumnDataType": {
                "enum": [
                  "INT",
                  "STRING",
                  "DATE",
                  "NUMERIC",
                  "TIMESTAMP",
                  "TIMESTAMP_TZ",
                  "BOOLEAN"
                ],
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              },
              "valueType": {
                "enum": [
                  "TEXT",
                  "HYPERLINK",
                  "GEO",
                  "GEO_LONGITUDE",
                  "GEO_LATITUDE"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attribute": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "label"
            ],
            "example": "label",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiLabelOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiLabelOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiLabelOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiLabelOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiLabelOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiLabelToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiLabelLinkage"
        },
        "type": "array"
      },
      "JsonApiLabelToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiLabelLinkage"
          }
        ]
      },
      "JsonApiMetricIn": {
        "description": "JSON:API representation of metric entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "properties": {
                  "format": {
                    "maxLength": 2048,
                    "type": "string"
                  },
                  "maql": {
                    "maxLength": 10000,
                    "type": "string"
                  }
                },
                "required": [
                  "maql"
                ],
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "metric"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiMetricIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "metric"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricOut": {
        "description": "JSON:API representation of metric entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "properties": {
                  "format": {
                    "maxLength": 2048,
                    "type": "string"
                  },
                  "maql": {
                    "maxLength": 10000,
                    "type": "string"
                  }
                },
                "required": [
                  "maql"
                ],
                "type": "object"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "modifiedAt": {
                "format": "date-time",
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "createdBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "facts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "metrics": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "modifiedBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "metric"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiMetricOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          }
        ]
      },
      "JsonApiMetricOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiMetricOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiMetricPatch": {
        "description": "JSON:API representation of patching metric entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "properties": {
                  "format": {
                    "maxLength": 2048,
                    "type": "string"
                  },
                  "maql": {
                    "maxLength": 10000,
                    "type": "string"
                  }
                },
                "required": [
                  "maql"
                ],
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "metric"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiMetricPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricPostOptionalId": {
        "description": "JSON:API representation of metric entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "properties": {
                  "format": {
                    "maxLength": 2048,
                    "type": "string"
                  },
                  "maql": {
                    "maxLength": 10000,
                    "type": "string"
                  }
                },
                "required": [
                  "maql"
                ],
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "metric"
            ],
            "example": "metric",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "JsonApiMetricPostOptionalIdDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiMetricPostOptionalId"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiMetricToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiMetricLinkage"
        },
        "type": "array"
      },
      "JsonApiOrganizationIn": {
        "description": "JSON:API representation of organization entity.",
        "properties": {
          "attributes": {
            "properties": {
              "allowedOrigins": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "hostname": {
                "maxLength": 255,
                "type": "string"
              },
              "jitEnabled": {
                "description": "Flag to enable/disable JIT provisioning in the given organization",
                "type": "boolean"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientId": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientSecret": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerId": {
                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                "example": "myOidcProvider",
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerLocation": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthSubjectIdClaim": {
                "description": "Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.",
                "example": "oid",
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organization"
            ],
            "example": "organization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationOut": {
        "description": "JSON:API representation of organization entity.",
        "properties": {
          "attributes": {
            "properties": {
              "allowedOrigins": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "cacheSettings": {
                "properties": {
                  "cacheStrategy": {
                    "enum": [
                      "DURABLE",
                      "EPHEMERAL"
                    ],
                    "maxLength": 255,
                    "type": "string"
                  },
                  "extraCacheBudget": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "hostname": {
                "maxLength": 255,
                "type": "string"
              },
              "jitEnabled": {
                "description": "Flag to enable/disable JIT provisioning in the given organization",
                "type": "boolean"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientId": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerId": {
                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                "example": "myOidcProvider",
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerLocation": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthSubjectIdClaim": {
                "description": "Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.",
                "example": "oid",
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "MANAGE",
                    "SELF_CREATE_TOKEN"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "bootstrapUser": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "bootstrapUserGroup": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organization"
            ],
            "example": "organization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiOrganizationOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
          }
        ]
      },
      "JsonApiOrganizationPatch": {
        "description": "JSON:API representation of patching organization entity.",
        "properties": {
          "attributes": {
            "properties": {
              "allowedOrigins": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "hostname": {
                "maxLength": 255,
                "type": "string"
              },
              "jitEnabled": {
                "description": "Flag to enable/disable JIT provisioning in the given organization",
                "type": "boolean"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientId": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthClientSecret": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerId": {
                "description": "Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.",
                "example": "myOidcProvider",
                "maxLength": 255,
                "type": "string"
              },
              "oauthIssuerLocation": {
                "maxLength": 255,
                "type": "string"
              },
              "oauthSubjectIdClaim": {
                "description": "Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.",
                "example": "oid",
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organization"
            ],
            "example": "organization",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingIn": {
        "description": "JSON:API representation of organizationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organizationSetting"
            ],
            "example": "organizationSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingOut": {
        "description": "JSON:API representation of organizationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organizationSetting"
            ],
            "example": "organizationSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationSettingOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiOrganizationSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiOrganizationSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiOrganizationSettingPatch": {
        "description": "JSON:API representation of patching organizationSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "organizationSetting"
            ],
            "example": "organizationSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiOrganizationSettingPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiOrganizationSettingPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiThemeIn": {
        "description": "JSON:API representation of theme entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content",
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "theme"
            ],
            "example": "theme",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiThemeInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiThemeIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiThemeOut": {
        "description": "JSON:API representation of theme entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content",
              "name"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "theme"
            ],
            "example": "theme",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiThemeOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiThemeOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiThemeOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiThemeOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiThemeOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiThemeOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiThemePatch": {
        "description": "JSON:API representation of patching theme entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "theme"
            ],
            "example": "theme",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiThemePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiThemePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterIn": {
        "description": "JSON:API representation of userDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "maql": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "maql"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "user": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "userGroup": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userDataFilter"
            ],
            "example": "userDataFilter",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserDataFilterIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterOut": {
        "description": "JSON:API representation of userDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "maql": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "maql"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "facts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "metrics": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "user": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "userGroup": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userDataFilter"
            ],
            "example": "userDataFilter",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserDataFilterOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserDataFilterOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterOutIncludes": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiFactOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiAttributeOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiLabelOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiMetricOutWithLinks"
          },
          {
            "$ref": "#/components/schemas/JsonApiDatasetOutWithLinks"
          }
        ]
      },
      "JsonApiUserDataFilterOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiUserDataFilterOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserDataFilterOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserDataFilterOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiUserDataFilterPatch": {
        "description": "JSON:API representation of patching userDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "maql": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "user": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "userGroup": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userDataFilter"
            ],
            "example": "userDataFilter",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserDataFilterPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterPostOptionalId": {
        "description": "JSON:API representation of userDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "maql": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "maql"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "user": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "userGroup": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userDataFilter"
            ],
            "example": "userDataFilter",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserDataFilterPostOptionalIdDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserDataFilterPostOptionalId"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupIn": {
        "description": "JSON:API representation of userGroup entity.",
        "properties": {
          "attributes": {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parents": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userGroup"
            ],
            "example": "userGroup",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserGroupInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserGroupIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "userGroup"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserGroupOut": {
        "description": "JSON:API representation of userGroup entity.",
        "properties": {
          "attributes": {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parents": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userGroup"
            ],
            "example": "userGroup",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserGroupOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserGroupOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserGroupOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiUserGroupPatch": {
        "description": "JSON:API representation of patching userGroup entity.",
        "properties": {
          "attributes": {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parents": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userGroup"
            ],
            "example": "userGroup",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserGroupPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserGroupPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserGroupToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiUserGroupLinkage"
        },
        "type": "array"
      },
      "JsonApiUserGroupToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserGroupLinkage"
          }
        ]
      },
      "JsonApiUserIdentifierLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "userIdentifier"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserIdentifierOut": {
        "description": "JSON:API representation of userIdentifier entity.",
        "properties": {
          "attributes": {
            "properties": {
              "email": {
                "maxLength": 255,
                "type": "string"
              },
              "firstname": {
                "maxLength": 255,
                "type": "string"
              },
              "lastname": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userIdentifier"
            ],
            "example": "userIdentifier",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserIdentifierOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserIdentifierOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserIdentifierOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiUserIdentifierOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserIdentifierOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserIdentifierOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiUserIdentifierToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserIdentifierLinkage"
          }
        ]
      },
      "JsonApiUserIn": {
        "description": "JSON:API representation of user entity.",
        "properties": {
          "attributes": {
            "properties": {
              "authenticationId": {
                "maxLength": 255,
                "type": "string"
              },
              "email": {
                "maxLength": 255,
                "type": "string"
              },
              "firstname": {
                "maxLength": 255,
                "type": "string"
              },
              "lastname": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "userGroups": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "user"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "user"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserOut": {
        "description": "JSON:API representation of user entity.",
        "properties": {
          "attributes": {
            "properties": {
              "authenticationId": {
                "maxLength": 255,
                "type": "string"
              },
              "email": {
                "maxLength": 255,
                "type": "string"
              },
              "firstname": {
                "maxLength": 255,
                "type": "string"
              },
              "lastname": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "userGroups": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "user"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiUserOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiUserGroupOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiUserPatch": {
        "description": "JSON:API representation of patching user entity.",
        "properties": {
          "attributes": {
            "properties": {
              "authenticationId": {
                "maxLength": 255,
                "type": "string"
              },
              "email": {
                "maxLength": 255,
                "type": "string"
              },
              "firstname": {
                "maxLength": 255,
                "type": "string"
              },
              "lastname": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "userGroups": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserGroupToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "user"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserSettingIn": {
        "description": "JSON:API representation of userSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userSetting"
            ],
            "example": "userSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserSettingOut": {
        "description": "JSON:API representation of userSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "userSetting"
            ],
            "example": "userSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiUserSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiUserSettingOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiUserSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiUserSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiUserToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiUserLinkage"
          }
        ]
      },
      "JsonApiVisualizationObjectIn": {
        "description": "JSON:API representation of visualizationObject entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "visualizationObject"
            ],
            "example": "visualizationObject",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "visualizationObject"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectOut": {
        "description": "JSON:API representation of visualizationObject entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "createdAt": {
                "format": "date-time",
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "modifiedAt": {
                "format": "date-time",
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "attributes": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiAttributeToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "createdBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "datasets": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiDatasetToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "facts": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiFactToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "labels": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiLabelToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "metrics": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiMetricToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              },
              "modifiedBy": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiUserIdentifierToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "visualizationObject"
            ],
            "example": "visualizationObject",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiVisualizationObjectOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiMetricOutIncludes"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiVisualizationObjectPatch": {
        "description": "JSON:API representation of patching visualizationObject entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "visualizationObject"
            ],
            "example": "visualizationObject",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectPostOptionalId": {
        "description": "JSON:API representation of visualizationObject entity.",
        "properties": {
          "attributes": {
            "properties": {
              "areRelationsValid": {
                "type": "boolean"
              },
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 250000 characters.",
                "example": {
                  "identifier": {
                    "id": "label.leaf",
                    "type": "label"
                  },
                  "someBoolProp": false
                },
                "type": "object"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "required": [
              "content"
            ],
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "visualizationObject"
            ],
            "example": "visualizationObject",
            "type": "string"
          }
        },
        "required": [
          "attributes",
          "type"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectPostOptionalIdDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectPostOptionalId"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiVisualizationObjectToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiVisualizationObjectLinkage"
        },
        "type": "array"
      },
      "JsonApiVisualizationObjectToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiVisualizationObjectLinkage"
          }
        ]
      },
      "JsonApiWorkspaceDataFilterIn": {
        "description": "JSON:API representation of workspaceDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "columnName": {
                "maxLength": 255,
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "filterSettings": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilter"
            ],
            "example": "workspaceDataFilter",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "workspaceDataFilter"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterOut": {
        "description": "JSON:API representation of workspaceDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "columnName": {
                "maxLength": 255,
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "filterSettings": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilter"
            ],
            "example": "workspaceDataFilter",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiWorkspaceDataFilterPatch": {
        "description": "JSON:API representation of patching workspaceDataFilter entity.",
        "properties": {
          "attributes": {
            "properties": {
              "columnName": {
                "maxLength": 255,
                "type": "string"
              },
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "filterSettings": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingToManyLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilter"
            ],
            "example": "workspaceDataFilter",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingIn": {
        "description": "JSON:API representation of workspaceDataFilterSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "filterValues": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "workspaceDataFilter": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilterSetting"
            ],
            "example": "workspaceDataFilterSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "workspaceDataFilterSetting"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingOut": {
        "description": "JSON:API representation of workspaceDataFilterSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "filterValues": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "workspaceDataFilter": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilterSetting"
            ],
            "example": "workspaceDataFilterSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiWorkspaceDataFilterSettingPatch": {
        "description": "JSON:API representation of patching workspaceDataFilterSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "description": {
                "maxLength": 10000,
                "type": "string"
              },
              "filterValues": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "workspaceDataFilter": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceDataFilterSetting"
            ],
            "example": "workspaceDataFilterSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceDataFilterSettingToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingLinkage"
        },
        "type": "array"
      },
      "JsonApiWorkspaceDataFilterToManyLinkage": {
        "description": "References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "items": {
          "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterLinkage"
        },
        "type": "array"
      },
      "JsonApiWorkspaceDataFilterToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterLinkage"
          }
        ]
      },
      "JsonApiWorkspaceIn": {
        "description": "JSON:API representation of workspace entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cacheExtraLimit": {
                "format": "int64",
                "type": "integer"
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "prefix": {
                "description": "Custom prefix of entity identifiers in workspace",
                "maxLength": 255,
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parent": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspace"
            ],
            "example": "workspace",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceLinkage": {
        "description": "The \\\"type\\\" and \\\"id\\\" to non-empty members.",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "workspace"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceOut": {
        "description": "JSON:API representation of workspace entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cacheExtraLimit": {
                "format": "int64",
                "type": "integer"
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "prefix": {
                "description": "Custom prefix of entity identifiers in workspace",
                "maxLength": 255,
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "config": {
                "properties": {
                  "approximateCountAvailable": {
                    "default": false,
                    "description": "is approximate count enabled - based on type of data-source connected to this workspace",
                    "type": "boolean"
                  },
                  "dataSamplingAvailable": {
                    "default": false,
                    "description": "is sampling enabled - based on type of data-source connected to this workspace",
                    "type": "boolean"
                  },
                  "showAllValuesOnDatesAvailable": {
                    "default": false,
                    "description": "is 'show all values' displayed for dates - based on type of data-source connected to this workspace",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "dataModel": {
                "properties": {
                  "datasetCount": {
                    "description": "include the number of dataset of each workspace",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "datasetCount"
                ],
                "type": "object"
              },
              "hierarchy": {
                "properties": {
                  "childrenCount": {
                    "description": "include the number of direct children of each workspace",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "childrenCount"
                ],
                "type": "object"
              },
              "permissions": {
                "description": "List of valid permissions for a logged-in user.",
                "items": {
                  "enum": [
                    "MANAGE",
                    "ANALYZE",
                    "EXPORT",
                    "EXPORT_TABULAR",
                    "EXPORT_PDF",
                    "VIEW"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "relationships": {
            "properties": {
              "parent": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspace"
            ],
            "example": "workspace",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceOut"
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "included": {
            "description": "Included resources",
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiWorkspacePatch": {
        "description": "JSON:API representation of patching workspace entity.",
        "properties": {
          "attributes": {
            "properties": {
              "cacheExtraLimit": {
                "format": "int64",
                "type": "integer"
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "earlyAccess": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "prefix": {
                "description": "Custom prefix of entity identifiers in workspace",
                "maxLength": 255,
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "relationships": {
            "properties": {
              "parent": {
                "properties": {
                  "data": {
                    "$ref": "#/components/schemas/JsonApiWorkspaceToOneLinkage"
                  }
                },
                "required": [
                  "data"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspace"
            ],
            "example": "workspace",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspacePatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspacePatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingIn": {
        "description": "JSON:API representation of workspaceSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceSetting"
            ],
            "example": "workspaceSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingInDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingIn"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingOut": {
        "description": "JSON:API representation of workspaceSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "meta": {
            "properties": {
              "origin": {
                "properties": {
                  "originId": {
                    "description": "defines id of the workspace where the entity comes from",
                    "type": "string"
                  },
                  "originType": {
                    "description": "defines type of the origin of the entity",
                    "enum": [
                      "NATIVE",
                      "PARENT"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "originId",
                  "originType"
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceSetting"
            ],
            "example": "workspaceSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingOutDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingOut"
          },
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingOutList": {
        "description": "A JSON:API document with a list of resources",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutWithLinks"
            },
            "type": "array",
            "uniqueItems": true
          },
          "links": {
            "$ref": "#/components/schemas/ListLinks"
          },
          "meta": {
            "properties": {
              "page": {
                "$ref": "#/components/schemas/PageMetadata"
              }
            },
            "type": "object"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingOutWithLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingOut"
          },
          {
            "$ref": "#/components/schemas/ObjectLinksContainer"
          }
        ]
      },
      "JsonApiWorkspaceSettingPatch": {
        "description": "JSON:API representation of patching workspaceSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceSetting"
            ],
            "example": "workspaceSetting",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingPatchDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingPatch"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingPostOptionalId": {
        "description": "JSON:API representation of workspaceSetting entity.",
        "properties": {
          "attributes": {
            "properties": {
              "content": {
                "description": "Free-form JSON content. Maximum supported length is 15000 characters.",
                "example": {},
                "type": "object"
              },
              "type": {
                "enum": [
                  "TIMEZONE",
                  "ACTIVE_THEME",
                  "ACTIVE_COLOR_PALETTE",
                  "WHITE_LABELING",
                  "LOCALE",
                  "METADATA_LOCALE",
                  "FORMAT_LOCALE",
                  "MAPBOX_TOKEN",
                  "WEEK_START",
                  "SHOW_HIDDEN_CATALOG_ITEMS",
                  "OPERATOR_OVERRIDES",
                  "TIMEZONE_VALIDATION_ENABLED"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "id": {
            "description": "API identifier of an object",
            "example": "id1",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "Object type",
            "enum": [
              "workspaceSetting"
            ],
            "example": "workspaceSetting",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceSettingPostOptionalIdDocument": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JsonApiWorkspaceSettingPostOptionalId"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "JsonApiWorkspaceToOneLinkage": {
        "description": "References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource's links object.",
        "nullable": true,
        "oneOf": [
          {
            "$ref": "#/components/schemas/JsonApiWorkspaceLinkage"
          }
        ]
      },
      "JsonNode": {
        "description": "A definition of the metric in JSON format.",
        "example": "{ \"content\": { \"maql\": \"SELECT 1\", \"format\": \"%0.2f\" } \"}",
        "type": "object"
      },
      "LabelIdentifier": {
        "description": "A label identifier.",
        "properties": {
          "id": {
            "description": "Label ID.",
            "example": "label_id",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type of the label.",
            "enum": [
              "label"
            ],
            "example": "label",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ListLinks": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectLinks"
          },
          {
            "properties": {
              "next": {
                "description": "A string containing the link's URL for the next page of data.",
                "format": "uri",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "LocaleRequest": {
        "properties": {
          "locale": {
            "description": "Requested locale in the form of language tag. Can contain special 'default' locale which points to original (not translated) values in entity properties.",
            "example": "en-US",
            "type": "string"
          }
        },
        "required": [
          "locale"
        ],
        "type": "object"
      },
      "MeasureDefinition": {
        "description": "Abstract metric definition type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/InlineMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/ArithmeticMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/SimpleMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/PopMeasureDefinition"
          }
        ],
        "type": "object"
      },
      "MeasureExecutionResultHeader": {
        "properties": {
          "measureHeader": {
            "$ref": "#/components/schemas/MeasureResultHeader"
          }
        },
        "required": [
          "measureHeader"
        ],
        "type": "object"
      },
      "MeasureGroupHeaders": {
        "properties": {
          "measureGroupHeaders": {
            "items": {
              "$ref": "#/components/schemas/MeasureHeaderOut"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MeasureHeaderOut": {
        "properties": {
          "format": {
            "type": "string"
          },
          "localIdentifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "localIdentifier"
        ],
        "type": "object"
      },
      "MeasureItem": {
        "properties": {
          "definition": {
            "$ref": "#/components/schemas/MeasureDefinition"
          },
          "localIdentifier": {
            "example": "metric_1",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          }
        },
        "required": [
          "definition",
          "localIdentifier"
        ],
        "type": "object"
      },
      "MeasureResultHeader": {
        "description": "Header containing the information related to metrics.",
        "properties": {
          "measureIndex": {
            "description": "Metric index. Starts at 0.",
            "example": 0,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "measureIndex"
        ],
        "type": "object"
      },
      "MeasureValueFilter": {
        "description": "Abstract filter definition type filtering by the value of the metric.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          }
        ],
        "type": "object"
      },
      "NegativeAttributeFilter": {
        "description": "Filter able to limit element values by label and related selected negated elements.",
        "properties": {
          "negativeAttributeFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "label": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "notIn": {
                "$ref": "#/components/schemas/AttributeFilterElements"
              }
            },
            "required": [
              "notIn",
              "label"
            ],
            "type": "object"
          }
        },
        "required": [
          "negativeAttributeFilter"
        ],
        "type": "object"
      },
      "Note": {
        "properties": {
          "appliesTo": {
            "enum": [
              "SOURCE",
              "TARGET"
            ],
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "category": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "content": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "otherAttributes": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "priority": {
            "format": "int32",
            "type": "integer",
            "xml": {
              "attribute": true
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "note",
          "namespace": "urn:oasis:names:tc:xliff:document:2.0"
        }
      },
      "Notes": {
        "properties": {
          "note": {
            "items": {
              "$ref": "#/components/schemas/Note"
            },
            "type": "array"
          }
        },
        "required": [
          "note"
        ],
        "type": "object",
        "xml": {
          "name": "notes",
          "namespace": "urn:oasis:names:tc:xliff:document:2.0"
        }
      },
      "ObjectLinks": {
        "properties": {
          "self": {
            "description": "A string containing the link's URL.",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "self"
        ],
        "type": "object"
      },
      "ObjectLinksContainer": {
        "properties": {
          "links": {
            "$ref": "#/components/schemas/ObjectLinks"
          }
        },
        "type": "object"
      },
      "OrganizationPermissionAssignment": {
        "description": "Organization permission assignments",
        "properties": {
          "assigneeIdentifier": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "permissions": {
            "items": {
              "enum": [
                "MANAGE",
                "SELF_CREATE_TOKEN"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "assigneeIdentifier",
          "permissions"
        ],
        "type": "object"
      },
      "PageMetadata": {
        "properties": {
          "number": {
            "description": "The number of the current page",
            "format": "int32",
            "type": "integer"
          },
          "size": {
            "description": "The size of the current page",
            "format": "int32",
            "type": "integer"
          },
          "totalElements": {
            "description": "The total number of elements",
            "format": "int32",
            "type": "integer"
          },
          "totalPages": {
            "description": "The total number of pages",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Paging": {
        "description": "Current page description.",
        "properties": {
          "count": {
            "description": "Count of items in this page.",
            "example": 5,
            "format": "int32",
            "type": "integer"
          },
          "next": {
            "description": "Link to next page, or null if this is last page.",
            "example": "https://sample.gooddata.com/api/v1/actions/workspaces/sampleWorkspace/execution/collectLabelElements?label=sample.price&limit=5&offset=10",
            "type": "string"
          },
          "offset": {
            "description": "Offset of this page.",
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "description": "Count of returnable items ignoring paging.",
            "example": 100,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "count",
          "offset",
          "total"
        ],
        "type": "object"
      },
      "Parameter": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "PdfExportRequest": {
        "description": "Export request object describing the export properties and metadata for pdf exports.",
        "properties": {
          "dashboardId": {
            "description": "Dashboard identifier",
            "example": "761cd28b-3f57-4ac9-bbdc-1c552cc0d1d0",
            "type": "string"
          },
          "fileName": {
            "description": "File name to be used for retrieving the pdf document.",
            "example": "filename",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonNode"
          }
        },
        "required": [
          "dashboardId",
          "fileName"
        ],
        "type": "object"
      },
      "PdfTableStyle": {
        "description": "Custom CSS styles for the table. (PDF, HTML)",
        "example": [
          {
            "properties": [
              {
                "key": "font-size",
                "value": "30px"
              }
            ],
            "selector": "th"
          }
        ],
        "properties": {
          "properties": {
            "description": "List of CSS properties.",
            "items": {
              "$ref": "#/components/schemas/PdfTableStyleProperty"
            },
            "type": "array"
          },
          "selector": {
            "description": "CSS selector where to apply given properties.",
            "type": "string"
          }
        },
        "required": [
          "selector"
        ],
        "type": "object"
      },
      "PdfTableStyleProperty": {
        "description": "CSS property.",
        "properties": {
          "key": {
            "description": "CSS property key.",
            "type": "string"
          },
          "value": {
            "description": "CSS property value.",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "PdmLdmRequest": {
        "description": "PDM additions wrapper.",
        "properties": {
          "sqls": {
            "description": "List of SQL datasets.",
            "items": {
              "$ref": "#/components/schemas/PdmSql"
            },
            "type": "array"
          },
          "tables": {
            "description": "List of physical database tables.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeTable"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PdmSql": {
        "description": "SQL dataset definition.",
        "properties": {
          "columns": {
            "description": "Columns defining SQL dataset.",
            "items": {
              "$ref": "#/components/schemas/SqlColumn"
            },
            "type": "array"
          },
          "statement": {
            "description": "SQL statement.",
            "example": "select * from abc",
            "type": "string"
          },
          "title": {
            "description": "SQL dataset title.",
            "example": "My special dataset",
            "type": "string"
          }
        },
        "required": [
          "statement",
          "title"
        ],
        "type": "object"
      },
      "PermissionsAssignment": {
        "properties": {
          "assignees": {
            "items": {
              "$ref": "#/components/schemas/AssigneeIdentifier"
            },
            "type": "array"
          },
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/UserManagementDataSourcePermissionAssignment"
            },
            "type": "array"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/UserManagementWorkspacePermissionAssignment"
            },
            "type": "array"
          }
        },
        "required": [
          "assignees"
        ],
        "type": "object"
      },
      "PermissionsForAssignee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardPermissionsAssignment"
          },
          {
            "properties": {
              "assigneeIdentifier": {
                "$ref": "#/components/schemas/AssigneeIdentifier"
              }
            },
            "type": "object"
          }
        ],
        "description": "Desired levels of permissions for an assignee identified by an identifier.",
        "required": [
          "assigneeIdentifier",
          "permissions"
        ],
        "type": "object"
      },
      "PermissionsForAssigneeRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DashboardPermissionsAssignment"
          },
          {
            "properties": {
              "assigneeRule": {
                "$ref": "#/components/schemas/AssigneeRule"
              }
            },
            "type": "object"
          }
        ],
        "description": "Desired levels of permissions for a collection of assignees identified by a rule.",
        "required": [
          "assigneeRule",
          "permissions"
        ],
        "type": "object"
      },
      "PlatformUsage": {
        "properties": {
          "count": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "enum": [
              "UserCount",
              "WorkspaceCount"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "PlatformUsageRequest": {
        "properties": {
          "usageItemNames": {
            "items": {
              "enum": [
                "UserCount",
                "WorkspaceCount"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "usageItemNames"
        ],
        "type": "object"
      },
      "PopDataset": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
          },
          "periodsAgo": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "dataset",
          "periodsAgo"
        ],
        "type": "object"
      },
      "PopDatasetMeasureDefinition": {
        "description": "Previous period type of metric.",
        "properties": {
          "previousPeriodMeasure": {
            "properties": {
              "dateDatasets": {
                "items": {
                  "$ref": "#/components/schemas/PopDataset"
                },
                "type": "array"
              },
              "measureIdentifier": {
                "$ref": "#/components/schemas/AfmLocalIdentifier"
              }
            },
            "required": [
              "dateDatasets",
              "measureIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "previousPeriodMeasure"
        ],
        "type": "object"
      },
      "PopDate": {
        "properties": {
          "attribute": {
            "$ref": "#/components/schemas/AfmObjectIdentifierAttribute"
          },
          "periodsAgo": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "attribute",
          "periodsAgo"
        ],
        "type": "object"
      },
      "PopDateMeasureDefinition": {
        "description": "Period over period type of metric.",
        "properties": {
          "overPeriodMeasure": {
            "properties": {
              "dateAttributes": {
                "items": {
                  "$ref": "#/components/schemas/PopDate"
                },
                "type": "array"
              },
              "measureIdentifier": {
                "$ref": "#/components/schemas/AfmLocalIdentifier"
              }
            },
            "required": [
              "dateAttributes",
              "measureIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "overPeriodMeasure"
        ],
        "type": "object"
      },
      "PopMeasureDefinition": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PopDatasetMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/PopDateMeasureDefinition"
          }
        ],
        "type": "object"
      },
      "PositiveAttributeFilter": {
        "description": "Filter able to limit element values by label and related selected elements.",
        "properties": {
          "positiveAttributeFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "in": {
                "$ref": "#/components/schemas/AttributeFilterElements"
              },
              "label": {
                "$ref": "#/components/schemas/AfmIdentifier"
              }
            },
            "required": [
              "in",
              "label"
            ],
            "type": "object"
          }
        },
        "required": [
          "positiveAttributeFilter"
        ],
        "type": "object"
      },
      "RangeMeasureValueFilter": {
        "description": "Filter the result by comparing specified metric to given range of values.",
        "properties": {
          "rangeMeasureValueFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "from": {
                "example": 100,
                "type": "number"
              },
              "measure": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "operator": {
                "enum": [
                  "BETWEEN",
                  "NOT_BETWEEN"
                ],
                "example": "BETWEEN",
                "type": "string"
              },
              "to": {
                "example": 999,
                "type": "number"
              },
              "treatNullValuesAs": {
                "example": 0,
                "type": "number"
              }
            },
            "required": [
              "from",
              "operator",
              "to",
              "measure"
            ],
            "type": "object"
          }
        },
        "required": [
          "rangeMeasureValueFilter"
        ],
        "type": "object"
      },
      "RankingFilter": {
        "description": "Filter the result on top/bottom N values according to given metric(s).",
        "properties": {
          "rankingFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "measures": {
                "items": {
                  "$ref": "#/components/schemas/AfmIdentifier"
                },
                "type": "array"
              },
              "operator": {
                "enum": [
                  "TOP",
                  "BOTTOM"
                ],
                "type": "string"
              },
              "value": {
                "example": 5,
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "measures",
              "operator",
              "value"
            ],
            "type": "object"
          }
        },
        "required": [
          "rankingFilter"
        ],
        "type": "object"
      },
      "ReferenceIdentifier": {
        "description": "A reference identifier.",
        "properties": {
          "id": {
            "description": "Reference ID.",
            "example": "customers",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type of the reference.",
            "enum": [
              "dataset"
            ],
            "example": "DATASET",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ReferenceSourceColumn": {
        "properties": {
          "column": {
            "type": "string"
          },
          "dataType": {
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/DatasetGrain"
          }
        },
        "required": [
          "column",
          "target"
        ],
        "type": "object"
      },
      "RelativeDateFilter": {
        "description": "A date filter specifying a time interval that is relative to the current date. For example, last week, next month, and so on. Field dataset is representing qualifier of date dimension.",
        "properties": {
          "relativeDateFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dataset": {
                "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
              },
              "from": {
                "description": "Start of the filtering interval. Specified by number of periods (with respect to given granularity). Typically negative (historical time interval like -2 for '2 days/weeks, ... ago').",
                "example": -6,
                "format": "int32",
                "type": "integer"
              },
              "granularity": {
                "description": "Date granularity specifying particular date attribute in given dimension.",
                "enum": [
                  "MINUTE",
                  "HOUR",
                  "DAY",
                  "WEEK",
                  "MONTH",
                  "QUARTER",
                  "YEAR",
                  "MINUTE_OF_HOUR",
                  "HOUR_OF_DAY",
                  "DAY_OF_WEEK",
                  "DAY_OF_MONTH",
                  "DAY_OF_YEAR",
                  "WEEK_OF_YEAR",
                  "MONTH_OF_YEAR",
                  "QUARTER_OF_YEAR"
                ],
                "example": "DAY",
                "type": "string"
              },
              "to": {
                "description": "End of the filtering interval. Specified by number of periods (with respect to given granularity). Value 'O' is representing current time-interval (current day, week, ...).",
                "example": 0,
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "from",
              "granularity",
              "to",
              "dataset"
            ],
            "type": "object"
          }
        },
        "required": [
          "relativeDateFilter"
        ],
        "type": "object"
      },
      "ResolveSettingsRequest": {
        "description": "A request containing setting IDs to resolve.",
        "properties": {
          "settings": {
            "description": "An array of setting IDs to resolve.",
            "example": [
              "timezone"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "settings"
        ],
        "type": "object"
      },
      "ResolvedSetting": {
        "description": "Setting and its value.",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "id": {
            "deprecated": true,
            "description": "Setting ID. Formerly used to identify a type of a particular setting, going to be removed in a favor of setting's type.",
            "type": "string"
          },
          "type": {
            "description": "Type of the setting.",
            "enum": [
              "TIMEZONE",
              "ACTIVE_THEME",
              "ACTIVE_COLOR_PALETTE",
              "WHITE_LABELING",
              "LOCALE",
              "METADATA_LOCALE",
              "FORMAT_LOCALE",
              "MAPBOX_TOKEN",
              "WEEK_START",
              "SHOW_HIDDEN_CATALOG_ITEMS",
              "OPERATOR_OVERRIDES",
              "TIMEZONE_VALIDATION_ENABLED"
            ],
            "example": "TIMEZONE",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "RestApiIdentifier": {
        "description": "Object identifier.",
        "properties": {
          "id": {
            "example": "sample_item.price",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "example": "fact",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ResultCacheMetadata": {
        "description": "All execution result's metadata used for calculation including ExecutionResponse",
        "properties": {
          "afm": {
            "$ref": "#/components/schemas/AFM"
          },
          "executionResponse": {
            "$ref": "#/components/schemas/ExecutionResponse"
          },
          "resultSize": {
            "format": "int64",
            "type": "integer"
          },
          "resultSpec": {
            "$ref": "#/components/schemas/ResultSpec"
          }
        },
        "required": [
          "afm",
          "executionResponse",
          "resultSize",
          "resultSpec"
        ],
        "type": "object"
      },
      "ResultDimension": {
        "properties": {
          "headers": {
            "items": {
              "$ref": "#/components/schemas/ResultDimensionHeader"
            },
            "type": "array"
          },
          "localIdentifier": {
            "type": "string"
          }
        },
        "required": [
          "headers",
          "localIdentifier"
        ],
        "type": "object"
      },
      "ResultDimensionHeader": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/MeasureGroupHeaders"
          },
          {
            "$ref": "#/components/schemas/AttributeHeaderOut"
          }
        ],
        "type": "object"
      },
      "ResultSpec": {
        "description": "Specifies how the result data will be formatted (```dimensions```) and which additional data shall be computed (```totals```).",
        "properties": {
          "dimensions": {
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "type": "array"
          },
          "totals": {
            "items": {
              "$ref": "#/components/schemas/Total"
            },
            "type": "array"
          }
        },
        "required": [
          "dimensions"
        ],
        "type": "object"
      },
      "RsaSpecification": {
        "properties": {
          "alg": {
            "enum": [
              "RS256",
              "RS384",
              "RS512"
            ],
            "type": "string"
          },
          "e": {
            "type": "string"
          },
          "kid": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[^.]",
            "type": "string"
          },
          "kty": {
            "enum": [
              "RSA"
            ],
            "type": "string"
          },
          "n": {
            "type": "string"
          },
          "use": {
            "enum": [
              "sig"
            ],
            "type": "string"
          },
          "x5c": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "x5t": {
            "type": "string"
          }
        },
        "required": [
          "alg",
          "e",
          "kid",
          "kty",
          "n",
          "use"
        ],
        "type": "object"
      },
      "RulePermission": {
        "description": "List of rules",
        "properties": {
          "permissions": {
            "description": "Permissions granted by the rule",
            "items": {
              "$ref": "#/components/schemas/GrantedPermission"
            },
            "type": "array"
          },
          "type": {
            "description": "Type of the rule",
            "example": "allWorkspaceUsers",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ScanRequest": {
        "description": "A request containing all information critical to model scanning.",
        "properties": {
          "scanTables": {
            "description": "A flag indicating whether the tables should be scanned.",
            "example": true,
            "type": "boolean"
          },
          "scanViews": {
            "description": "A flag indicating whether the views should be scanned.",
            "example": true,
            "type": "boolean"
          },
          "schemata": {
            "description": "What schemata will be scanned.",
            "example": [
              "tpch",
              "demo"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "separator": {
            "description": "A separator between prefixes and the names.",
            "example": "__",
            "type": "string"
          },
          "tablePrefix": {
            "description": "Tables starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.",
            "example": "out_table",
            "type": "string"
          },
          "viewPrefix": {
            "description": "Views starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.",
            "example": "out_view",
            "type": "string"
          }
        },
        "required": [
          "scanTables",
          "scanViews",
          "separator"
        ],
        "type": "object"
      },
      "ScanResultPdm": {
        "description": "Result of scan of data source physical model.",
        "properties": {
          "pdm": {
            "$ref": "#/components/schemas/DeclarativeTables"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/TableWarning"
            },
            "type": "array"
          }
        },
        "required": [
          "pdm",
          "warnings"
        ],
        "type": "object"
      },
      "ScanSqlRequest": {
        "description": "A request with SQL query to by analyzed.",
        "properties": {
          "sql": {
            "description": "SQL query to be analyzed.",
            "example": "SELECT a.special_value as result FROM tableA a",
            "type": "string"
          }
        },
        "required": [
          "sql"
        ],
        "type": "object"
      },
      "ScanSqlResponse": {
        "description": "Result of scanSql. Consists of array of query columns including type. Sql query result data preview can be attached optionally",
        "properties": {
          "columns": {
            "description": "Array of columns with types.",
            "items": {
              "$ref": "#/components/schemas/SqlColumn"
            },
            "type": "array"
          },
          "dataPreview": {
            "description": "Array of rows where each row is another array of string values.",
            "items": {
              "items": {
                "nullable": true,
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "columns"
        ],
        "type": "object"
      },
      "Settings": {
        "description": "Additional settings.",
        "properties": {
          "mergeHeaders": {
            "description": "Merge equal headers in neighbouring cells. (XLSX)",
            "example": true,
            "type": "boolean"
          },
          "pdfPageSize": {
            "description": "Page size and orientation. (PDF)",
            "example": "a4 landscape",
            "type": "string"
          },
          "pdfTableStyle": {
            "description": "Custom CSS styles for the table. (PDF, HTML)",
            "example": [
              {
                "properties": [
                  {
                    "key": "font-size",
                    "value": "30px"
                  }
                ],
                "selector": "th"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/PdfTableStyle"
            },
            "type": "array"
          },
          "pdfTopLeftContent": {
            "description": "Top left header content. (PDF)",
            "example": "Good",
            "type": "string"
          },
          "pdfTopRightContent": {
            "description": "Top right header content. (PDF)",
            "example": "Morning",
            "type": "string"
          },
          "showFilters": {
            "description": "Print applied filters on top of the document. (Not supported yet)",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SimpleMeasureDefinition": {
        "properties": {
          "measure": {
            "properties": {
              "aggregation": {
                "description": "Definition of aggregation type of the metric.",
                "enum": [
                  "SUM",
                  "COUNT",
                  "AVG",
                  "MIN",
                  "MAX",
                  "MEDIAN",
                  "RUNSUM",
                  "APPROXIMATE_COUNT"
                ],
                "example": "SUM",
                "type": "string"
              },
              "computeRatio": {
                "default": false,
                "description": "If true compute the percentage of given metric values (broken down by AFM attributes) to the total (not broken down).",
                "example": true,
                "type": "boolean"
              },
              "filters": {
                "description": "Metrics can be filtered by attribute filters with the same interface as ones for global AFM. Note that only one DateFilter is allowed.",
                "items": {
                  "$ref": "#/components/schemas/FilterDefinitionForSimpleMeasure"
                },
                "type": "array"
              },
              "item": {
                "$ref": "#/components/schemas/AfmObjectIdentifierCore"
              }
            },
            "required": [
              "item"
            ],
            "type": "object"
          }
        },
        "required": [
          "measure"
        ],
        "type": "object"
      },
      "Skeleton": {
        "properties": {
          "content": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "href": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "type": "object",
        "xml": {
          "name": "skeleton",
          "namespace": "urn:oasis:names:tc:xliff:document:2.0"
        }
      },
      "SortKey": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SortKeyAttribute"
          },
          {
            "$ref": "#/components/schemas/SortKeyValue"
          },
          {
            "$ref": "#/components/schemas/SortKeyTotal"
          }
        ],
        "type": "object"
      },
      "SortKeyAttribute": {
        "description": "Sorting rule for sorting by attribute value in current dimension.",
        "properties": {
          "attribute": {
            "properties": {
              "attributeIdentifier": {
                "description": "Item reference (to 'itemIdentifiers') referencing, which item should be used for sorting. Only references to attributes are allowed.",
                "example": "attribute1",
                "type": "string"
              },
              "direction": {
                "description": "Sorting elements - ascending/descending order.",
                "enum": [
                  "ASC",
                  "DESC"
                ],
                "type": "string"
              },
              "sortType": {
                "default": "DEFAULT",
                "description": "Mechanism by which this attribute should be sorted. Available options are:\n- DEFAULT: sorting based on default rules (using sort column if defined, otherwise this label) \n- LABEL: sorting by this label values \n- ATTRIBUTE: sorting by values of this label's attribute (or rather the primary label) \n- AREA: sorting by area (total or subtotal) corresponding to each attribute value. The area is computed by summing up all metric values in all other dimensions.",
                "enum": [
                  "DEFAULT",
                  "LABEL",
                  "ATTRIBUTE",
                  "AREA"
                ],
                "type": "string"
              }
            },
            "required": [
              "attributeIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "attribute"
        ],
        "type": "object"
      },
      "SortKeyTotal": {
        "description": "Sorting rule for sorting by total value. DataColumnLocators are only required if there is ambiguity. Locator for measureGroup is taken from the metric of the total.",
        "properties": {
          "total": {
            "properties": {
              "dataColumnLocators": {
                "$ref": "#/components/schemas/DataColumnLocators"
              },
              "direction": {
                "description": "Sorting elements - ascending/descending order.",
                "enum": [
                  "ASC",
                  "DESC"
                ],
                "type": "string"
              },
              "totalIdentifier": {
                "type": "string"
              }
            },
            "required": [
              "totalIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "total"
        ],
        "type": "object"
      },
      "SortKeyValue": {
        "description": "Sorting rule for sorting by measure value. DataColumnLocators for each dimension opposite to the sorted one must be specified.",
        "properties": {
          "value": {
            "properties": {
              "dataColumnLocators": {
                "$ref": "#/components/schemas/DataColumnLocators"
              },
              "direction": {
                "description": "Sorting elements - ascending/descending order.",
                "enum": [
                  "ASC",
                  "DESC"
                ],
                "type": "string"
              }
            },
            "required": [
              "dataColumnLocators"
            ],
            "type": "object"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "SqlColumn": {
        "description": "A SQL query result column.",
        "properties": {
          "dataType": {
            "description": "Column type",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "INT",
            "type": "string"
          },
          "name": {
            "description": "Column name",
            "example": "customer_id",
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "name"
        ],
        "type": "object"
      },
      "TableWarning": {
        "description": "Warnings related to single table.",
        "properties": {
          "columns": {
            "items": {
              "$ref": "#/components/schemas/ColumnWarning"
            },
            "type": "array"
          },
          "message": {
            "description": "Warning message related to the table.",
            "type": "string"
          },
          "name": {
            "description": "Table name.",
            "type": "string"
          }
        },
        "required": [
          "columns",
          "name"
        ],
        "type": "object"
      },
      "TabularExportRequest": {
        "description": "Export request object describing the export properties and overrides for tabular exports.",
        "properties": {
          "customOverride": {
            "$ref": "#/components/schemas/CustomOverride"
          },
          "executionResult": {
            "description": "Execution result identifier.",
            "example": "ff483727196c9dc862c7fd3a5a84df55c96d61a4",
            "type": "string"
          },
          "fileName": {
            "description": "Filename of downloaded file without extension.",
            "example": "result",
            "type": "string"
          },
          "format": {
            "description": "Expected file format.",
            "enum": [
              "CSV",
              "XLSX",
              "HTML",
              "PDF"
            ],
            "example": "CSV",
            "type": "string"
          },
          "settings": {
            "$ref": "#/components/schemas/Settings"
          },
          "visualizationObject": {
            "description": "Visualization object identifier. Alternative to executionResult property. (HTML/PDF only)",
            "example": "f7c359bc-c230-4487-b15b-ad9685bcb537",
            "type": "string"
          }
        },
        "required": [
          "fileName",
          "format"
        ],
        "type": "object"
      },
      "TestDefinitionRequest": {
        "description": "A request containing all information for testing data source definition.",
        "properties": {
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/DataSourceParameter"
            },
            "type": "array"
          },
          "password": {
            "description": "Database user password.",
            "example": "admin123",
            "type": "string"
          },
          "schema": {
            "description": "Database schema.",
            "example": "public",
            "type": "string"
          },
          "token": {
            "description": "Secret for token based authentication for data sources which supports it.",
            "type": "string"
          },
          "type": {
            "description": "Type of database, where test should connect to.",
            "enum": [
              "POSTGRESQL",
              "REDSHIFT",
              "VERTICA",
              "SNOWFLAKE",
              "ADS",
              "BIGQUERY",
              "MSSQL",
              "PRESTO",
              "DREMIO",
              "DRILL",
              "GREENPLUM",
              "AZURESQL",
              "SYNAPSESQL",
              "DATABRICKS",
              "GDSTORAGE",
              "CLICKHOUSE",
              "MYSQL",
              "MARIADB"
            ],
            "example": "POSTGRESQL",
            "type": "string"
          },
          "url": {
            "description": "URL to database in JDBC format, where test should connect to.",
            "example": "jdbc:postgresql://localhost:5432/db_name",
            "type": "string"
          },
          "username": {
            "description": "Database user name.",
            "example": "dbadmin",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "TestQueryDuration": {
        "description": "A structure containing duration of the test queries run on a data source. It is omitted if an error happens.",
        "properties": {
          "createCacheTable": {
            "description": "Field containing duration of a test 'create table as select' query on a datasource. In milliseconds. The field is omitted if a data source doesn't support caching.",
            "example": 235,
            "format": "int32",
            "type": "integer"
          },
          "simpleSelect": {
            "description": "Field containing duration of a test select query on a data source. In milliseconds.",
            "example": 562,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "simpleSelect"
        ],
        "type": "object"
      },
      "TestRequest": {
        "description": "A request containing all information for testing existing data source.",
        "properties": {
          "cachePath": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enableCaching": {
            "description": "Enable caching of intermediate results.",
            "example": false,
            "type": "boolean"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/DataSourceParameter"
            },
            "type": "array"
          },
          "password": {
            "description": "Database user password.",
            "example": "admin123",
            "type": "string"
          },
          "schema": {
            "description": "Database schema.",
            "example": "public",
            "type": "string"
          },
          "token": {
            "description": "Secret for token based authentication for data sources which supports it.",
            "type": "string"
          },
          "url": {
            "description": "URL to database in JDBC format, where test should connect to.",
            "example": "jdbc:postgresql://localhost:5432/db_name",
            "type": "string"
          },
          "username": {
            "description": "Database user name.",
            "example": "dbadmin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestResponse": {
        "description": "Response from data source testing.",
        "properties": {
          "error": {
            "description": "Field containing more details in case of a failure. Details are available to a privileged user only.",
            "example": "Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \"user\"",
            "type": "string"
          },
          "queryDurationMillis": {
            "$ref": "#/components/schemas/TestQueryDuration"
          },
          "successful": {
            "description": "A flag indicating whether test passed or not.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "successful"
        ],
        "type": "object"
      },
      "Total": {
        "description": "Definition of a total. There are two types of totals: grand totals and subtotals. Grand total data will be returned in a separate section of the result structure while subtotals are fully integrated into the main result data. The mechanism for this distinction is automatic and it's described in `TotalDimension`",
        "properties": {
          "function": {
            "description": "Aggregation function to compute the total.",
            "enum": [
              "SUM",
              "MIN",
              "MAX",
              "AVG",
              "MED"
            ],
            "example": "SUM",
            "type": "string"
          },
          "localIdentifier": {
            "description": "Total identification within this request. Used e.g. in sorting by a total.",
            "example": "firstTotal",
            "type": "string"
          },
          "metric": {
            "description": "The metric for which the total will be computed",
            "example": "metric_1",
            "type": "string"
          },
          "totalDimensions": {
            "items": {
              "$ref": "#/components/schemas/TotalDimension"
            },
            "type": "array"
          }
        },
        "required": [
          "function",
          "localIdentifier",
          "metric",
          "totalDimensions"
        ],
        "type": "object"
      },
      "TotalDimension": {
        "description": "A list of dimensions across which the total will be computed. Total headers for only these dimensions will be returned in the result.",
        "properties": {
          "dimensionIdentifier": {
            "description": "An identifier of a dimension for which the total will be computed.",
            "example": "firstDimension",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "totalDimensionItems": {
            "description": "List of dimension items which will be used for total computation. The total is a grand total in this dimension if the list is empty or it includes the first dimension item from the dimension definition, and its data and header will be returned in a separate `ExecutionResultGrandTotal` structure. Otherwise, it is a subtotal and the data will be integrated into the main result.",
            "example": [
              "measureGroup"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "dimensionIdentifier",
          "totalDimensionItems"
        ],
        "type": "object"
      },
      "TotalExecutionResultHeader": {
        "properties": {
          "totalHeader": {
            "$ref": "#/components/schemas/TotalResultHeader"
          }
        },
        "required": [
          "totalHeader"
        ],
        "type": "object"
      },
      "TotalResultHeader": {
        "description": "Header containing the information related to a subtotal.",
        "properties": {
          "function": {
            "type": "string"
          }
        },
        "required": [
          "function"
        ],
        "type": "object"
      },
      "UserAssignee": {
        "description": "List of users",
        "properties": {
          "email": {
            "description": "User email address",
            "example": "user@example.com",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "User name",
            "example": "John Wick",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserGroupAssignee": {
        "description": "List of user groups",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "description": "User group name",
            "example": "admins",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserGroupIdentifier": {
        "description": "A list of groups where user is a member",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserGroupPermission": {
        "description": "List of user groups",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "description": "Name of the user group",
            "example": "admins",
            "type": "string"
          },
          "permissions": {
            "description": "Permissions granted to the user group",
            "items": {
              "$ref": "#/components/schemas/GrantedPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserManagementDataSourcePermissionAssignment": {
        "description": "Datasource permission assignments for users and userGroups",
        "properties": {
          "id": {
            "description": "Id of the datasource",
            "type": "string"
          },
          "name": {
            "description": "Name of the datasource",
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "enum": [
                "MANAGE",
                "USE"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "permissions"
        ],
        "type": "object"
      },
      "UserManagementPermissionAssignments": {
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/UserManagementDataSourcePermissionAssignment"
            },
            "type": "array"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/UserManagementWorkspacePermissionAssignment"
            },
            "type": "array"
          }
        },
        "required": [
          "dataSources",
          "workspaces"
        ],
        "type": "object"
      },
      "UserManagementUserGroupMember": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "UserManagementUserGroupMembers": {
        "properties": {
          "members": {
            "items": {
              "$ref": "#/components/schemas/UserManagementUserGroupMember"
            },
            "type": "array"
          }
        },
        "required": [
          "members"
        ],
        "type": "object"
      },
      "UserManagementUserGroups": {
        "properties": {
          "totalCount": {
            "description": "Total number of groups",
            "format": "int32",
            "type": "integer"
          },
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/UserManagementUserGroupsItem"
            },
            "type": "array"
          }
        },
        "required": [
          "totalCount",
          "userGroups"
        ],
        "type": "object"
      },
      "UserManagementUserGroupsItem": {
        "description": "List of groups",
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/UserManagementDataSourcePermissionAssignment"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "Group name",
            "example": "admins",
            "type": "string"
          },
          "organizationAdmin": {
            "description": "Is group organization admin",
            "example": false,
            "type": "boolean"
          },
          "userCount": {
            "description": "The number of users belonging to the group",
            "format": "int32",
            "type": "integer"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/UserManagementWorkspacePermissionAssignment"
            },
            "type": "array"
          }
        },
        "required": [
          "dataSources",
          "id",
          "organizationAdmin",
          "userCount",
          "workspaces"
        ],
        "type": "object"
      },
      "UserManagementUsers": {
        "properties": {
          "totalCount": {
            "description": "The total number of users is based on applied filters.",
            "format": "int32",
            "type": "integer"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/UserManagementUsersItem"
            },
            "type": "array"
          }
        },
        "required": [
          "totalCount",
          "users"
        ],
        "type": "object"
      },
      "UserManagementUsersItem": {
        "description": "List of users",
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/UserManagementDataSourcePermissionAssignment"
            },
            "type": "array"
          },
          "email": {
            "description": "User email address",
            "example": "user@example.com",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "User name",
            "example": "John Wick",
            "type": "string"
          },
          "organizationAdmin": {
            "description": "Is user organization admin",
            "example": false,
            "type": "boolean"
          },
          "userGroups": {
            "items": {
              "$ref": "#/components/schemas/UserGroupIdentifier"
            },
            "type": "array"
          },
          "workspaces": {
            "items": {
              "$ref": "#/components/schemas/UserManagementWorkspacePermissionAssignment"
            },
            "type": "array"
          }
        },
        "required": [
          "dataSources",
          "id",
          "organizationAdmin",
          "userGroups",
          "workspaces"
        ],
        "type": "object"
      },
      "UserManagementWorkspacePermissionAssignment": {
        "description": "Workspace permission assignments for users and userGroups",
        "properties": {
          "hierarchyPermissions": {
            "items": {
              "enum": [
                "MANAGE",
                "ANALYZE",
                "EXPORT",
                "EXPORT_TABULAR",
                "EXPORT_PDF",
                "VIEW"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "enum": [
                "MANAGE",
                "ANALYZE",
                "EXPORT",
                "EXPORT_TABULAR",
                "EXPORT_PDF",
                "VIEW"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "hierarchyPermissions",
          "id",
          "permissions"
        ],
        "type": "object"
      },
      "UserPermission": {
        "description": "List of users",
        "properties": {
          "email": {
            "description": "User email address",
            "example": "user@example.com",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "Name of user",
            "example": "John Wick",
            "type": "string"
          },
          "permissions": {
            "description": "Permissions granted to the user",
            "items": {
              "$ref": "#/components/schemas/GrantedPermission"
            },
            "type": "array"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "ValidateByItem": {
        "nullable": true,
        "properties": {
          "id": {
            "description": "Specifies entity used for valid elements computation.",
            "type": "string"
          },
          "type": {
            "description": "Specifies entity type which could be label, attribute, fact, or metric.",
            "pattern": "^(label)|(attribute)|(fact)|(metric)$",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "WorkspaceIdentifier": {
        "description": "A workspace identifier.",
        "example": "{ id: demo, type: workspace }",
        "properties": {
          "id": {
            "description": "Identifier of the workspace.",
            "example": "alpha.sales",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "description": "A type.",
            "enum": [
              "workspace"
            ],
            "example": "workspace",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "WorkspacePermissionAssignment": {
        "description": "Workspace permission assignments",
        "properties": {
          "assigneeIdentifier": {
            "$ref": "#/components/schemas/AssigneeIdentifier"
          },
          "hierarchyPermissions": {
            "items": {
              "enum": [
                "MANAGE",
                "ANALYZE",
                "EXPORT",
                "EXPORT_TABULAR",
                "EXPORT_PDF",
                "VIEW"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "enum": [
                "MANAGE",
                "ANALYZE",
                "EXPORT",
                "EXPORT_TABULAR",
                "EXPORT_PDF",
                "VIEW"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "assigneeIdentifier"
        ],
        "type": "object"
      },
      "Xliff": {
        "properties": {
          "file": {
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "type": "array"
          },
          "otherAttributes": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "space": {
            "type": "string",
            "xml": {
              "attribute": true,
              "namespace": "http://www.w3.org/XML/1998/namespace"
            }
          },
          "srcLang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "trgLang": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "version": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        },
        "required": [
          "file"
        ],
        "type": "object",
        "xml": {
          "name": "xliff",
          "namespace": "urn:oasis:names:tc:xliff:document:2.0"
        }
      }
    }
  },
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/v1/actions/collectUsage": {
      "get": {
        "description": "Provides information about platform usage, like amount of users, workspaces, ...",
        "operationId": "allPlatformUsage",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PlatformUsage"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Info about the platform usage.",
        "tags": [
          "Usage",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "post": {
        "description": "Provides information about platform usage, like amount of users, workspaces, ...",
        "operationId": "particularPlatformUsage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformUsageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PlatformUsage"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Info about the platform usage for particular items.",
        "tags": [
          "Usage",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSource/test": {
      "post": {
        "description": "Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.",
        "operationId": "testDataSourceDefinition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful connection": {
                    "description": "An example of a successful connection",
                    "value": {
                      "queryDurationMillis": {
                        "createCacheTable": 235,
                        "simpleSelect": 562
                      },
                      "successful": true
                    }
                  },
                  "An example of an unsuccessful connection": {
                    "description": "An example of an unsuccessful connection",
                    "value": {
                      "error": "Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \"user\"",
                      "successful": false
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            },
            "description": "The result of the test of a data source connection."
          }
        },
        "summary": "Test connection by data source definition",
        "tags": [
          "Test Connection",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal organization permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/generateLogicalModel": {
      "post": {
        "description": "Generate logical data model (LDM) from physical data model (PDM) stored in data source.",
        "operationId": "generateLogicalModel",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateLdmRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeModel"
                }
              }
            },
            "description": "LDM generated successfully."
          }
        },
        "summary": "Generate logical data model (LDM) from physical data model (PDM)",
        "tags": [
          "Generate Logical Data Model",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/managePermissions": {
      "post": {
        "description": "Manage Permissions for a Data Source",
        "operationId": "manageDataSourcePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An array of data source permissions assignments",
                "items": {
                  "$ref": "#/components/schemas/DataSourcePermissionAssignment"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Manage Permissions for a Data Source",
        "tags": [
          "Permissions",
          "actions"
        ]
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/scan": {
      "post": {
        "description": "It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.",
        "operationId": "scanDataSource",
        "parameters": [
          {
            "description": "Data source id",
            "example": "myPostgres",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful scan": {
                    "description": "An example of a successful scan",
                    "value": {
                      "pdm": {
                        "tables": [
                          {
                            "columns": [
                              {
                                "dataType": "NUMERIC",
                                "isPrimaryKey": false,
                                "name": "budget"
                              },
                              {
                                "dataType": "STRING",
                                "isPrimaryKey": false,
                                "name": "category"
                              },
                              {
                                "dataType": "NUMERIC",
                                "isPrimaryKey": false,
                                "name": "spend"
                              }
                            ],
                            "id": "campaign_channels",
                            "path": [
                              "demo",
                              "campaign_channels"
                            ],
                            "type": "TABLE"
                          }
                        ]
                      },
                      "warnings": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ScanResultPdm"
                }
              }
            },
            "description": "The result of the scan."
          }
        },
        "summary": "Scan a database to get a physical data model (PDM)",
        "tags": [
          "Scanning",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "USE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/scanSchemata": {
      "get": {
        "description": "It scans a database and reads metadata. The result of the request contains a list of schema names of a database.",
        "operationId": "getDataSourceSchemata",
        "parameters": [
          {
            "description": "Data source id",
            "example": "myPostgres",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful scan": {
                    "description": "An example of a successful scan",
                    "value": {
                      "schemaNames": [
                        "demo",
                        "public"
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DataSourceSchemata"
                }
              }
            },
            "description": "The result of the scan schemata"
          }
        },
        "summary": "Get a list of schema names of a database",
        "tags": [
          "Scanning",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/scanSql": {
      "post": {
        "description": "It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query",
        "operationId": "scanSql",
        "parameters": [
          {
            "description": "Data source id",
            "example": "myPostgres",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanSqlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful scan": {
                    "description": "An example of a successful scan",
                    "value": {
                      "columns": [
                        {
                          "dataType": "NUMERIC",
                          "name": "budget"
                        },
                        {
                          "dataType": "STRING",
                          "name": "category"
                        },
                        {
                          "dataType": "NUMERIC",
                          "name": "spend"
                        }
                      ],
                      "dataPreview": [
                        [
                          "1000",
                          "campaign1",
                          "458.8"
                        ],
                        [
                          "1800",
                          "campaign2",
                          "144"
                        ]
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ScanSqlResponse"
                }
              }
            },
            "description": "The result of the scan."
          }
        },
        "summary": "Collect metadata about SQL query",
        "tags": [
          "Scanning",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/test": {
      "post": {
        "description": "Test if it is possible to connect to a database using an existing data source definition.",
        "operationId": "testDataSource",
        "parameters": [
          {
            "description": "Data source id",
            "example": "myPostgres",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful connection": {
                    "description": "An example of a successful connection",
                    "value": {
                      "queryDurationMillis": {
                        "createCacheTable": 235,
                        "simpleSelect": 562
                      },
                      "successful": true
                    }
                  },
                  "An example of an unsuccessful connection": {
                    "description": "An example of an unsuccessful connection",
                    "value": {
                      "error": "Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \"user\"",
                      "successful": false
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            },
            "description": "The result of the test of a data source connection."
          }
        },
        "summary": "Test data source connection by data source id",
        "tags": [
          "Test Connection",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to test a data source.",
          "permissions": [
            "USE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/uploadNotification": {
      "post": {
        "description": "Notification sets up all reports to be computed again with new data.",
        "operationId": "registerUploadNotification",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "An upload notification has been successfully registered."
          }
        },
        "summary": "Register an upload notification",
        "tags": [
          "Invalidate Cache",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/organization/managePermissions": {
      "post": {
        "description": "Manage Permissions for a Organization",
        "operationId": "manageOrganizationPermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An array of organization permissions assignments",
                "items": {
                  "$ref": "#/components/schemas/OrganizationPermissionAssignment"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Manage Permissions for a Organization",
        "tags": [
          "Permissions",
          "actions"
        ]
      }
    },
    "/api/v1/actions/resolveEntitlements": {
      "get": {
        "description": "Resolves values of available entitlements for the organization.",
        "operationId": "resolveAllEntitlements",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiEntitlement"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Values for all public entitlements.",
        "tags": [
          "Entitlement",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "description": "Resolves values for requested entitlements in the organization.",
        "operationId": "resolveRequestedEntitlements",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntitlementsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApiEntitlement"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Values for requested public entitlements.",
        "tags": [
          "Entitlement",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/resolveSettings": {
      "get": {
        "description": "Resolves values for all settings without workspace by current user, organization, or default settings.",
        "operationId": "resolveAllSettingsWithoutWorkspace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Values for selected settings."
          }
        },
        "summary": "Values for all settings without workspace.",
        "tags": [
          "Reporting - Settings",
          "actions"
        ]
      },
      "post": {
        "description": "Resolves values for selected settings without workspace by current user, organization, or default settings.",
        "operationId": "resolveSettingsWithoutWorkspace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Values for selected settings."
          }
        },
        "summary": "Values for selected settings without workspace.",
        "tags": [
          "Reporting - Settings",
          "actions"
        ]
      }
    },
    "/api/v1/actions/userManagement/assignPermissions": {
      "post": {
        "operationId": "assignPermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsAssignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/removeUsersUserGroups": {
      "post": {
        "operationId": "removeUsersUserGroups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/AssigneeIdentifier"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/revokePermissions": {
      "post": {
        "operationId": "revokePermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionsAssignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/userGroups": {
      "get": {
        "operationId": "listUserGroups",
        "parameters": [
          {
            "description": "Zero-based page index (0..N)",
            "example": "page=0",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The size of the page to be returned.",
            "example": "size=20",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter by user name. Note that user name is case insensitive.",
            "example": "name=charles",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by workspaceId.",
            "example": "workspace=demo",
            "in": "query",
            "name": "workspace",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by dataSourceId.",
            "example": "dataSource=demo-test-ds",
            "in": "query",
            "name": "dataSource",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserManagementUserGroups"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/userGroups/{userGroupId}/addMembers": {
      "post": {
        "operationId": "addGroupMembers",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserManagementUserGroupMembers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/userGroups/{userGroupId}/members": {
      "get": {
        "operationId": "getGroupMembers",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserManagementUserGroupMembers"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/userGroups/{userGroupId}/permissions": {
      "get": {
        "operationId": "listPermissionsForUserGroup",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserManagementPermissionAssignments"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "User management"
        ]
      },
      "post": {
        "operationId": "managePermissionsForUserGroup",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserManagementPermissionAssignments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/userGroups/{userGroupId}/removeMembers": {
      "post": {
        "operationId": "removeGroupMembers",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserManagementUserGroupMembers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/users": {
      "get": {
        "operationId": "listUsers",
        "parameters": [
          {
            "description": "Zero-based page index (0..N)",
            "example": "page=0",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The size of the page to be returned.",
            "example": "size=20",
            "in": "query",
            "name": "size",
            "required": false,
            "schema": {
              "default": 20,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter by user name. Note that user name is case insensitive.",
            "example": "name=charles",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by workspaceId.",
            "example": "workspace=demo",
            "in": "query",
            "name": "workspace",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by userGroupId.",
            "example": "group=admin",
            "in": "query",
            "name": "group",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by dataSourceId.",
            "example": "dataSource=demo-test-ds",
            "in": "query",
            "name": "dataSource",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserManagementUsers"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/userManagement/users/{userId}/permissions": {
      "get": {
        "operationId": "listPermissionsForUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserManagementPermissionAssignments"
                }
              }
            },
            "description": "OK"
          }
        },
        "tags": [
          "User management"
        ]
      },
      "post": {
        "operationId": "managePermissionsForUser",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserManagementPermissionAssignments"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/availableAssignees": {
      "get": {
        "operationId": "availableAssignees",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "dashboardId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvailableAssignees"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get Available Assignees",
        "tags": [
          "Permissions",
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/managePermissions": {
      "post": {
        "operationId": "manageDashboardPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "dashboardId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An array of dashboard permissions assignments",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PermissionsForAssignee"
                    },
                    {
                      "$ref": "#/components/schemas/PermissionsForAssigneeRule"
                    }
                  ]
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Manage Permissions for a Dashboard",
        "tags": [
          "Permissions",
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/analyticalDashboards/{dashboardId}/permissions": {
      "get": {
        "operationId": "dashboardPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "dashboardId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardPermissions"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "Get Dashboard Permissions",
        "tags": [
          "Permissions",
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/checkEntityOverrides": {
      "post": {
        "description": "Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).",
        "operationId": "checkEntityOverrides",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An array of object identifications",
                "items": {
                  "$ref": "#/components/schemas/HierarchyObjectIdentification"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentifierDuplications"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Searching for entities finished successfully."
          }
        },
        "summary": "Finds entities with given ID in hierarchy.",
        "tags": [
          "Hierarchy",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/dependentEntitiesGraph": {
      "get": {
        "description": "Computes the dependent entities graph",
        "operationId": "getDependentEntitiesGraph",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DependentEntitiesResponse"
                }
              }
            },
            "description": "Computes the dependent entities graph"
          }
        },
        "summary": "Computes the dependent entities graph",
        "tags": [
          "Dependency Graph",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to read the graph.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "description": "Computes the dependent entities graph from given entry points",
        "operationId": "getDependentEntitiesGraphFromEntryPoints",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependentEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DependentEntitiesResponse"
                }
              }
            },
            "description": "Computes the dependent entities graph from given entry points"
          }
        },
        "summary": "Computes the dependent entities graph from given entry points",
        "tags": [
          "Dependency Graph",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to read the graph.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/computeValidDescendants": {
      "post": {
        "description": "(BETA) Returns map of lists of attributes that can be used as descendants of the given attributes.",
        "operationId": "computeValidDescendants",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AfmValidDescendantsQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AfmValidDescendantsResponse"
                }
              }
            },
            "description": "Map of lists of attributes valid as descendants of the given attributes."
          }
        },
        "summary": "(BETA) Valid descendants",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to analyze data.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/computeValidObjects": {
      "post": {
        "description": "Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.",
        "operationId": "computeValidObjects",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AfmValidObjectsQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AfmValidObjectsResponse"
                }
              }
            },
            "description": "List of attributes, facts and metrics valid with respect to given AFM."
          }
        },
        "summary": "Valid objects",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to analyze data.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute": {
      "post": {
        "description": "AFM is a combination of attributes, measures and filters that describe a query you want to execute.",
        "operationId": "computeReport",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Ignore all caches during execution of current request.",
            "in": "header",
            "name": "skip-cache",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "example": "2020-06-03T10:15:30+01:00",
            "in": "header",
            "name": "timestamp",
            "required": false,
            "schema": {
              "format": "timestamp",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AfmExecution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AfmExecutionResponse"
                }
              }
            },
            "description": "AFM Execution response with links to the result and server-enhanced dimensions from the original request."
          }
        },
        "summary": "Executes analytical request and returns link to the result",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to view a report or label elements.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute/result/{resultId}": {
      "get": {
        "description": "Gets a single execution result.",
        "operationId": "retrieveResult",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Result ID",
            "example": "a9b28f9dc55f37ea9f4a5fb0c76895923591e781",
            "in": "path",
            "name": "resultId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Request page with these offsets. Format is offset=1,2,3,... - one offset for each dimensions in ResultSpec from originating AFM.",
            "example": "offset=1,10",
            "explode": false,
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Return only this number of items. Format is limit=1,2,3,... - one limit for each dimensions in ResultSpec from originating AFM.",
            "example": "limit=1,10",
            "explode": false,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Identifiers of the dimensions where grand total data should not be returned for this request. A grand total will not be returned if all of its totalDimensions are in excludedTotalDimensions.",
            "example": "excludedTotalDimensions=dim_0,dim_1",
            "explode": false,
            "in": "query",
            "name": "excludedTotalDimensions",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResult"
                }
              }
            },
            "description": "Execution result was found and returned."
          }
        },
        "summary": "Get a single execution result",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to view a report or label elements.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute/result/{resultId}/metadata": {
      "get": {
        "description": "The resource provides execution result's metadata as AFM and resultSpec used in execution request and an executionResponse",
        "operationId": "retrieveExecutionMetadata",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Result ID",
            "example": "a9b28f9dc55f37ea9f4a5fb0c76895923591e781",
            "in": "path",
            "name": "resultId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultCacheMetadata"
                }
              }
            },
            "description": "Execution result's metadata was found and returned."
          }
        },
        "summary": "Get a single execution result's metadata.",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to analyze data.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/explain": {
      "post": {
        "description": "The resource provides static structures needed for investigation of a problem with given AFM.",
        "operationId": "explainAFM",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Requested explain type. If not specified all types are bundled in a ZIP archive.\n\n`MAQL` - MAQL Abstract Syntax Tree, execution dimensions and related info\n\n`GRPC_MODEL` - Datasets used in execution\n\n`GRPC_MODEL_SVG` - Generated SVG image of the datasets\n\n`WDF` - Workspace data filters in execution workspace context\n\n`QT` - Query Tree, created from MAQL AST using Logical Data Model,  contains all information needed to generate SQL\n\n`QT_SVG` - Generated SVG image of the Query Tree\n\n`OPT_QT` - Optimized Query Tree\n\n`OPT_QT_SVG` - Generated SVG image of the Optimized Query Tree\n\n`SQL` - Final SQL to be executed\n\n`SETTINGS` - Settings used to execute explain request",
            "in": "query",
            "name": "explainType",
            "required": false,
            "schema": {
              "enum": [
                "MAQL",
                "GRPC_MODEL",
                "GRPC_MODEL_SVG",
                "WDF",
                "QT",
                "QT_SVG",
                "OPT_QT",
                "OPT_QT_SVG",
                "SQL",
                "SETTINGS"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AfmExecution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {},
              "application/sql": {},
              "application/zip": {
                "schema": {
                  "description": "ZIP with MAQL, GRPC_MODEL, GRPC_MODEL_SVG, WDF, QT, QT_SVG, OPT_QT, OPT_QT_SVG and SQL files",
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/svg+xml": {}
            },
            "description": "Requested resource"
          }
        },
        "summary": "AFM explain resource.",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to analyze data.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/collectLabelElements": {
      "post": {
        "description": "Returns paged list of elements (values) of given label satisfying given filtering criteria.",
        "operationId": "computeLabelElementsPost",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Request page with this offset. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "maximum": 10000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Return only this number of items. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Ignore all caches during execution of current request.",
            "in": "header",
            "name": "skip-cache",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementsResponse"
                }
              }
            },
            "description": "List of label values."
          }
        },
        "summary": "Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to view a report or label elements.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/export/tabular": {
      "post": {
        "description": "An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.",
        "operationId": "createTabularExport",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TabularExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                }
              }
            },
            "description": "Tabular export request created successfully."
          }
        },
        "summary": "Create tabular export request",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to execute tabular export.",
          "permissions": [
            "EXPORT_TABULAR"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/export/tabular/{exportId}": {
      "get": {
        "description": "After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn't ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.",
        "operationId": "getTabularExport",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "exportId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {},
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {},
              "text/csv": {},
              "text/html": {}
            },
            "description": "Binary export result.",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "example": "attachment; filename='result.csv'",
                  "pattern": "attachment; filename='[^']+'",
                  "type": "string"
                },
                "style": "simple"
              }
            }
          },
          "202": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "text/csv": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "text/html": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Request is accepted, provided exportId exists, but export is not yet ready."
          }
        },
        "summary": "Retrieve exported files",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "EXPORT_TABULAR"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/export/visual": {
      "post": {
        "description": "An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.",
        "operationId": "createPdfExport",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportResponse"
                }
              }
            },
            "description": "Visual export request created successfully."
          }
        },
        "summary": "Create visual - pdf export request",
        "tags": [
          "Exporting",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to execute pdf export.",
          "permissions": [
            "EXPORT_PDF"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/export/visual/{exportId}": {
      "get": {
        "description": "Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.",
        "operationId": "getExportedFile",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "exportId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {}
            },
            "description": "Binary export result.",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "example": "attachment; filename='result.pdf'",
                  "pattern": "attachment; filename='[^']+'",
                  "type": "string"
                },
                "style": "simple"
              }
            }
          },
          "202": {
            "content": {
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Request is accepted, provided exportId exists, but export is not yet ready."
          }
        },
        "summary": "Retrieve exported files",
        "tags": [
          "Exporting",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "EXPORT_PDF"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/export/visual/{exportId}/metadata": {
      "get": {
        "description": "This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.",
        "operationId": "getMetadata",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "exportId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {}
            },
            "description": "Json metadata representation"
          }
        },
        "summary": "Retrieve metadata context",
        "tags": [
          "Exporting",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "EXPORT_PDF"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/inheritedEntityConflicts": {
      "get": {
        "description": "Finds API identifier conflicts in given workspace hierarchy.",
        "operationId": "inheritedEntityConflicts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentifierDuplications"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Searching for conflicting identifiers finished successfully"
          }
        },
        "summary": "Finds identifier conflicts in workspace hierarchy.",
        "tags": [
          "Hierarchy",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/inheritedEntityPrefixes": {
      "get": {
        "description": "Get used entity prefixes in hierarchy of parent workspaces",
        "operationId": "inheritedEntityPrefixes",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Prefixes used in parent entities"
          }
        },
        "summary": "Get used entity prefixes in hierarchy",
        "tags": [
          "Hierarchy",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/managePermissions": {
      "post": {
        "description": "Manage Permissions for a Workspace and its Workspace Hierarchy",
        "operationId": "manageWorkspacePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An array of workspace permissions assignments",
                "items": {
                  "$ref": "#/components/schemas/WorkspacePermissionAssignment"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Manage Permissions for a Workspace",
        "tags": [
          "Permissions",
          "actions"
        ]
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/overriddenChildEntities": {
      "get": {
        "description": "Finds API identifier overrides in given workspace hierarchy.",
        "operationId": "overriddenChildEntities",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentifierDuplications"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Searching for overridden identifiers finished successfully"
          }
        },
        "summary": "Finds identifier overrides in workspace hierarchy.",
        "tags": [
          "Hierarchy",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/resolveSettings": {
      "get": {
        "description": "Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.",
        "operationId": "workspaceResolveAllSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Values for selected settings."
          }
        },
        "summary": "Values for all settings.",
        "tags": [
          "Workspaces - Settings",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "description": "Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.",
        "operationId": "workspaceResolveSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ResolvedSetting"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Values for selected settings."
          }
        },
        "summary": "Values for selected settings.",
        "tags": [
          "Workspaces - Settings",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/translations": {
      "get": {
        "description": "Provides a list of effective translation tags. The resulting array always contains a special 'default' value which points to original not-translated values specified directly in entity attributes.",
        "operationId": "getTranslationTags",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Retrieved list of translation tags."
          }
        },
        "summary": "Get translation tags.",
        "tags": [
          "Translations",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/translations/clean": {
      "post": {
        "description": "Cleans up all translations for a particular locale. Cleaning up the special 'default' locale value is forbidden.",
        "operationId": "cleanTranslations",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocaleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Translations were successfully removed."
          }
        },
        "summary": "Cleans up translations.",
        "tags": [
          "Translations",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/translations/retrieve": {
      "post": {
        "description": "Retrieve all translation for existing entities in a particular locale. The source translations returned by this endpoint are always original, not translated, texts. Because the XLIFF schema definition has the 'xs:language' constraint for the 'srcLang' attribute, it is always set to 'en-US' value. If you use the special 'default' locale value in the request, only source translations are returned.",
        "operationId": "retrieveTranslations",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocaleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Xliff"
                }
              }
            },
            "description": "XLIFF file containing translations for a particular locale."
          }
        },
        "summary": "Retrieve translations for entities.",
        "tags": [
          "Translations",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/translations/set": {
      "post": {
        "description": "Set translation for existing entities in a particular locale.",
        "operationId": "setTranslations",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Xliff"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Translations were successfully set."
          }
        },
        "summary": "Set translations for entities.",
        "tags": [
          "Translations",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/admin/cookieSecurityConfigurations/{id}": {
      "get": {
        "operationId": "getEntity@CookieSecurityConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get CookieSecurityConfiguration",
        "tags": [
          "Cookie Security Configuration",
          "entities",
          "organization-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@CookieSecurityConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch CookieSecurityConfiguration",
        "tags": [
          "Cookie Security Configuration",
          "entities",
          "organization-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@CookieSecurityConfigurations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=lastRotation==InstantValue;rotationInterval==DurationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCookieSecurityConfigurationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put CookieSecurityConfiguration",
        "tags": [
          "Cookie Security Configuration",
          "entities",
          "organization-controller"
        ]
      }
    },
    "/api/v1/entities/admin/organizations/{id}": {
      "get": {
        "operationId": "getEntity@Organizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=bootstrapUser,bootstrapUserGroup",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "bootstrapUser",
                  "bootstrapUserGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Organizations",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains permissions required to manipulate the Organization.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@Organizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=bootstrapUser,bootstrapUserGroup",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "bootstrapUser",
                  "bootstrapUserGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch Organization",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains permissions required to manipulate the Organization.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@Organizations",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;hostname==someString;bootstrapUser.id==321;bootstrapUserGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=bootstrapUser,bootstrapUserGroup",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "bootstrapUser",
                  "bootstrapUserGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put Organization",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains permissions required to manipulate the Organization.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/colorPalettes": {
      "get": {
        "operationId": "getAllEntities@ColorPalettes",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Color Pallettes",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@ColorPalettes",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiColorPaletteInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Color Pallettes",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/colorPalettes/{id}": {
      "delete": {
        "operationId": "deleteEntity@ColorPalettes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Color Pallette",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@ColorPalettes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Color Pallette",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@ColorPalettes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiColorPalettePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch Color Pallette",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@ColorPalettes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiColorPaletteInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiColorPaletteOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put Color Pallette",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/cspDirectives": {
      "get": {
        "description": " Context Security Police Directive",
        "operationId": "getAllEntities@CspDirectives",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get CSP Directives",
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "description": " Context Security Police Directive",
        "operationId": "createEntity@CspDirectives",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCspDirectiveInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post CSP Directives",
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/cspDirectives/{id}": {
      "delete": {
        "description": " Context Security Police Directive",
        "operationId": "deleteEntity@CspDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete CSP Directives",
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      },
      "get": {
        "description": " Context Security Police Directive",
        "operationId": "getEntity@CspDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get CSP Directives",
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "description": " Context Security Police Directive",
        "operationId": "patchEntity@CspDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCspDirectivePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch CSP Directives",
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      },
      "put": {
        "description": " Context Security Police Directive",
        "operationId": "updateEntity@CspDirectives",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=sources==v1,v2,v3",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCspDirectiveInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCspDirectiveOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put CSP Directives",
        "tags": [
          "CSP Directives",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/dataSourceIdentifiers": {
      "get": {
        "operationId": "getAllEntities@DataSourceIdentifiers",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;schema==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Data Source Identifiers",
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "USE"
          ]
        }
      }
    },
    "/api/v1/entities/dataSourceIdentifiers/{id}": {
      "get": {
        "operationId": "getEntity@DataSourceIdentifiers",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;schema==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceIdentifierOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Data Source Identifier",
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "USE"
          ]
        }
      }
    },
    "/api/v1/entities/dataSources": {
      "get": {
        "description": "Data Source - represents data source for the workspace",
        "operationId": "getAllEntities@DataSources",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Data Source entities",
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "post": {
        "description": "Data Source - represents data source for the workspace",
        "operationId": "createEntity@DataSources",
        "parameters": [
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDataSourceInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Data Sources",
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/dataSources/{id}": {
      "delete": {
        "description": "Data Source - represents data source for the workspace",
        "operationId": "deleteEntity@DataSources",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete Data Source entity",
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "description": "Data Source - represents data source for the workspace",
        "operationId": "getEntity@DataSources",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Data Source entity",
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "patch": {
        "description": "Data Source - represents data source for the workspace",
        "operationId": "patchEntity@DataSources",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDataSourcePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch Data Source entity",
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Data Source - represents data source for the workspace",
        "operationId": "updateEntity@DataSources",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;type==DatabaseTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDataSourceInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDataSourceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put Data Source entity",
        "tags": [
          "Data Source - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/entitlements": {
      "get": {
        "description": "Space of the shared interest",
        "operationId": "getAllEntities@Entitlements",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=value==someString;expiry==LocalDateValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiEntitlementOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Entitlements",
        "tags": [
          "Entitlement",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/entitlements/{id}": {
      "get": {
        "description": "Space of the shared interest",
        "operationId": "getEntity@Entitlements",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=value==someString;expiry==LocalDateValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiEntitlementOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Entitlement",
        "tags": [
          "Entitlement",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/jwks": {
      "get": {
        "description": "Returns all JSON web keys - used to verify JSON web tokens (Jwts)",
        "operationId": "getAllEntities@Jwks",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JwkSpecificationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiJwkOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Jwks",
        "tags": [
          "JWKS",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "description": "Creates JSON web key - used to verify JSON web tokens (Jwts)",
        "operationId": "createEntity@Jwks",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiJwkInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiJwkOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Jwks",
        "tags": [
          "JWKS",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/jwks/{id}": {
      "delete": {
        "description": "Deletes JSON web key - used to verify JSON web tokens (Jwts)",
        "operationId": "deleteEntity@Jwks",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JwkSpecificationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete Jwk",
        "tags": [
          "JWKS",
          "entities",
          "organization-model-controller"
        ]
      },
      "get": {
        "description": "Returns JSON web key - used to verify JSON web tokens (Jwts)",
        "operationId": "getEntity@Jwks",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JwkSpecificationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiJwkOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Jwk",
        "tags": [
          "JWKS",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "description": "Patches JSON web key - used to verify JSON web tokens (Jwts)",
        "operationId": "patchEntity@Jwks",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JwkSpecificationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiJwkPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiJwkOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch Jwk",
        "tags": [
          "JWKS",
          "entities",
          "organization-model-controller"
        ]
      },
      "put": {
        "description": "Updates JSON web key - used to verify JSON web tokens (Jwts)",
        "operationId": "updateEntity@Jwks",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JwkSpecificationValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiJwkInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiJwkOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put Jwk",
        "tags": [
          "JWKS",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/organization": {
      "get": {
        "description": "Gets a basic information about organization.",
        "operationId": "getOrganization",
        "parameters": [
          {
            "description": "Return list of permissions available to logged user.",
            "example": "metaInclude=permissions",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "schema": {
              "items": {
                "description": "Available meta objects to include.",
                "enum": [
                  "permissions",
                  "all"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to entity URI."
          }
        },
        "summary": "Get current organization info",
        "tags": [
          "Organization - Entity APIs",
          "entities"
        ]
      }
    },
    "/api/v1/entities/organizationSettings": {
      "get": {
        "operationId": "getAllEntities@OrganizationSettings",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Organization entities",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@OrganizationSettings",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Organization Setting entities",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/organizationSettings/{id}": {
      "delete": {
        "operationId": "deleteEntity@OrganizationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete Organization entity",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@OrganizationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Organization entity",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@OrganizationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationSettingPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch Organization entity",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@OrganizationSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiOrganizationSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiOrganizationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put Organization entity",
        "tags": [
          "Organization - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/themes": {
      "get": {
        "operationId": "getAllEntities@Themes",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Theming entities",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@Themes",
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiThemeInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Theming",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/themes/{id}": {
      "delete": {
        "operationId": "deleteEntity@Themes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete Theming",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@Themes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Theming",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@Themes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiThemePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch Theming",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@Themes",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiThemeInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiThemeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put Theming",
        "tags": [
          "Appearance",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/userGroups": {
      "get": {
        "description": "User Group - creates tree-like structure for categorizing users",
        "operationId": "getAllEntities@UserGroups",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get UserGroup entities",
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "post": {
        "description": "User Group - creates tree-like structure for categorizing users",
        "operationId": "createEntity@UserGroups",
        "parameters": [
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserGroupInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post User Group entities",
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/userGroups/{id}": {
      "delete": {
        "description": "User Group - creates tree-like structure for categorizing users",
        "operationId": "deleteEntity@UserGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete UserGroup entity",
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "description": "User Group - creates tree-like structure for categorizing users",
        "operationId": "getEntity@UserGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get UserGroup entity",
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "patch": {
        "description": "User Group - creates tree-like structure for categorizing users",
        "operationId": "patchEntity@UserGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserGroupPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch UserGroup entity",
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "User Group - creates tree-like structure for categorizing users",
        "operationId": "updateEntity@UserGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parents",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "parents",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserGroupInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserGroupOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put UserGroup entity",
        "tags": [
          "UserGroups - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/userIdentifiers": {
      "get": {
        "description": "UserIdentifier - represents entity interacting with platform",
        "operationId": "getAllEntities@UserIdentifiers",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=firstname==someString;lastname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserIdentifierOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get UserIdentifier entities",
        "tags": [
          "User Identifiers",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/userIdentifiers/{id}": {
      "get": {
        "description": "UserIdentifier - represents basic information about entity interacting with platform",
        "operationId": "getEntity@UserIdentifiers",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=firstname==someString;lastname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserIdentifierOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get UserIdentifier entity",
        "tags": [
          "User Identifiers",
          "entities",
          "organization-model-controller"
        ]
      }
    },
    "/api/v1/entities/users": {
      "get": {
        "description": "User - represents entity interacting with platform",
        "operationId": "getAllEntities@Users",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get User entities",
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "post": {
        "description": "User - represents entity interacting with platform",
        "operationId": "createEntity@Users",
        "parameters": [
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post User entities",
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/users/{id}": {
      "delete": {
        "description": "User - represents entity interacting with platform",
        "operationId": "deleteEntity@Users",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete User entity",
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "description": "User - represents entity interacting with platform",
        "operationId": "getEntity@Users",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get User entity",
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "patch": {
        "description": "User - represents entity interacting with platform",
        "operationId": "patchEntity@Users",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch User entity",
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "User - represents entity interacting with platform",
        "operationId": "updateEntity@Users",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=authenticationId==someString;firstname==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=userGroups",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userGroups",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put User entity",
        "tags": [
          "Users - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/users/{userId}/apiTokens": {
      "get": {
        "operationId": "getAllEntities@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=bearerToken==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiApiTokenOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "List all api tokens for a user",
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiApiTokenInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post a new API token for the user",
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      }
    },
    "/api/v1/entities/users/{userId}/apiTokens/{id}": {
      "delete": {
        "operationId": "deleteEntity@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=bearerToken==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete an API Token for a user",
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@ApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=bearerToken==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiApiTokenOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get an API Token for a user",
        "tags": [
          "API tokens",
          "entities",
          "user-model-controller"
        ]
      }
    },
    "/api/v1/entities/users/{userId}/userSettings": {
      "get": {
        "operationId": "getAllEntities@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "List all settings for a user",
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post new user settings for the user",
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      }
    },
    "/api/v1/entities/users/{userId}/userSettings/{id}": {
      "delete": {
        "operationId": "deleteEntity@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a setting for a user",
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a setting for a user",
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@UserSettings",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put new user settings for the user",
        "tags": [
          "User Settings",
          "entities",
          "user-model-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces": {
      "get": {
        "description": "Space of the shared interest",
        "operationId": "getAllEntities@Workspaces",
        "parameters": [
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=config,permissions,hierarchy,dataModelDatasets,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "config",
                  "permissions",
                  "hierarchy",
                  "dataModelDatasets",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Workspace entities",
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "description": "Space of the shared interest",
        "operationId": "createEntity@Workspaces",
        "parameters": [
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=config,permissions,hierarchy,dataModelDatasets,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "config",
                  "permissions",
                  "hierarchy",
                  "dataModelDatasets",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Workspace entities",
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{id}": {
      "delete": {
        "description": "Space of the shared interest",
        "operationId": "deleteEntity@Workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete Workspace entity",
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "description": "Space of the shared interest",
        "operationId": "getEntity@Workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=config,permissions,hierarchy,dataModelDatasets,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "config",
                  "permissions",
                  "hierarchy",
                  "dataModelDatasets",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get Workspace entity",
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "description": "Space of the shared interest",
        "operationId": "patchEntity@Workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspacePatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch Workspace entity",
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Space of the shared interest",
        "operationId": "updateEntity@Workspaces",
        "parameters": [
          {
            "$ref": "#/components/parameters/idPathParameter"
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=name==someString;earlyAccess==someString;parent.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=parent",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaces",
                  "parent",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put Workspace entity",
        "tags": [
          "Workspaces - Entity APIs",
          "entities",
          "organization-model-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards": {
      "get": {
        "operationId": "getAllEntities@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,origin,accessInfo,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "origin",
                  "accessInfo",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Dashboards",
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,origin,accessInfo,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "origin",
                  "accessInfo",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPostOptionalIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Dashboards",
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/analyticalDashboards/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Dashboard",
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=permissions,origin,accessInfo,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "permissions",
                  "origin",
                  "accessInfo",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Dashboard",
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Dashboard",
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@AnalyticalDashboards",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,visualizationObjects,analyticalDashboards,labels,metrics,datasets,filterContexts,dashboardPlugins",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "visualizationObjects",
                  "analyticalDashboards",
                  "labels",
                  "metrics",
                  "datasets",
                  "filterContexts",
                  "dashboardPlugins",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAnalyticalDashboardInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAnalyticalDashboardOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put Dashboards",
        "tags": [
          "Dashboards",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/attributeHierarchies": {
      "get": {
        "operationId": "getAllEntities@AttributeHierarchies",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,attributes",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "attributes",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Attribute Hierarchies",
        "tags": [
          "Attribute Hierarchies",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@AttributeHierarchies",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,attributes",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "attributes",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAttributeHierarchyInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Attribute Hierarchies",
        "tags": [
          "Attribute Hierarchies",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/attributeHierarchies/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@AttributeHierarchies",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete an Attribute Hierarchy",
        "tags": [
          "Attribute Hierarchies",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@AttributeHierarchies",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,attributes",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "attributes",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get an Attribute Hierarchy",
        "tags": [
          "Attribute Hierarchies",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@AttributeHierarchies",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,attributes",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "attributes",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAttributeHierarchyPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch an Attribute Hierarchy",
        "tags": [
          "Attribute Hierarchies",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@AttributeHierarchies",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,attributes",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "attributes",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiAttributeHierarchyInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeHierarchyOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put an Attribute Hierarchy",
        "tags": [
          "Attribute Hierarchies",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/attributes": {
      "get": {
        "operationId": "getAllEntities@Attributes",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;dataset.id==321;defaultView.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=dataset,defaultView,labels,attributeHierarchies",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "datasets",
                  "labels",
                  "attributeHierarchies",
                  "dataset",
                  "defaultView",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Attributes",
        "tags": [
          "Attributes",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/attributes/{objectId}": {
      "get": {
        "operationId": "getEntity@Attributes",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;dataset.id==321;defaultView.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=dataset,defaultView,labels,attributeHierarchies",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "datasets",
                  "labels",
                  "attributeHierarchies",
                  "dataset",
                  "defaultView",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiAttributeOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get an Attribute",
        "tags": [
          "Attributes",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings": {
      "get": {
        "operationId": "getAllEntities@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Custom Application Settings",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPostOptionalIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Custom Application Settings",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/customApplicationSettings/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Custom Application Setting",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Custom Application Setting",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Custom Application Setting",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@CustomApplicationSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=applicationName==someString;content==JsonNodeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiCustomApplicationSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiCustomApplicationSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a Custom Application Setting",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins": {
      "get": {
        "operationId": "getAllEntities@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Plugins",
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDashboardPluginPostOptionalIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Plugins",
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/dashboardPlugins/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Plugin",
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Plugin",
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDashboardPluginPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Plugin",
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@DashboardPlugins",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiDashboardPluginInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDashboardPluginOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a Plugin",
        "tags": [
          "Plugins",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/datasets": {
      "get": {
        "operationId": "getAllEntities@Datasets",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,facts,references,workspaceDataFilters",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "facts",
                  "datasets",
                  "workspaceDataFilters",
                  "references",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDatasetOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Datasets",
        "tags": [
          "Datasets",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/datasets/{objectId}": {
      "get": {
        "operationId": "getEntity@Datasets",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,facts,references,workspaceDataFilters",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "facts",
                  "datasets",
                  "workspaceDataFilters",
                  "references",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiDatasetOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Dataset",
        "tags": [
          "Datasets",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/exportDefinitions": {
      "get": {
        "operationId": "getAllEntities@ExportDefinitions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;visualizationObject.id==321;filterContext.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObject,filterContext,createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "filterContexts",
                  "userIdentifiers",
                  "visualizationObject",
                  "filterContext",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiExportDefinitionOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "entities",
          "workspace-object-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@ExportDefinitions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObject,filterContext,createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "filterContexts",
                  "userIdentifiers",
                  "visualizationObject",
                  "filterContext",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiExportDefinitionInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiExportDefinitionOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Export Definitions",
        "tags": [
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/exportDefinitions/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@ExportDefinitions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;visualizationObject.id==321;filterContext.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "tags": [
          "entities",
          "workspace-object-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@ExportDefinitions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;visualizationObject.id==321;filterContext.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObject,filterContext,createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "filterContexts",
                  "userIdentifiers",
                  "visualizationObject",
                  "filterContext",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiExportDefinitionOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "entities",
          "workspace-object-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@ExportDefinitions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;visualizationObject.id==321;filterContext.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObject,filterContext,createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "filterContexts",
                  "userIdentifiers",
                  "visualizationObject",
                  "filterContext",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiExportDefinitionPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiExportDefinitionOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "entities",
          "workspace-object-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@ExportDefinitions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;visualizationObject.id==321;filterContext.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=visualizationObject,filterContext,createdBy,modifiedBy",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "visualizationObjects",
                  "filterContexts",
                  "userIdentifiers",
                  "visualizationObject",
                  "filterContext",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiExportDefinitionInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiExportDefinitionOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "tags": [
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/facts": {
      "get": {
        "operationId": "getAllEntities@Facts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;dataset.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=dataset",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "datasets",
                  "dataset",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFactOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Facts",
        "tags": [
          "Facts",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/facts/{objectId}": {
      "get": {
        "operationId": "getEntity@Facts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;dataset.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=dataset",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "datasets",
                  "dataset",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFactOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Fact",
        "tags": [
          "Facts",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/filterContexts": {
      "get": {
        "operationId": "getAllEntities@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Context Filters",
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiFilterContextPostOptionalIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Context Filters",
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/filterContexts/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Context Filter",
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Context Filter",
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiFilterContextPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Context Filter",
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@FilterContexts",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attributes,datasets,labels",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "datasets",
                  "labels",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiFilterContextInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiFilterContextOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a Context Filter",
        "tags": [
          "Context Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/labels": {
      "get": {
        "operationId": "getAllEntities@Labels",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;attribute.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attribute",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "attribute",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiLabelOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Labels",
        "tags": [
          "Labels",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/labels/{objectId}": {
      "get": {
        "operationId": "getEntity@Labels",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;attribute.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=attribute",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "attributes",
                  "attribute",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiLabelOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Label",
        "tags": [
          "Labels",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/metrics": {
      "get": {
        "operationId": "getAllEntities@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Metrics",
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiMetricPostOptionalIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Metrics",
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/metrics/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Metric",
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Metric",
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiMetricPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Metric",
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@Metrics",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiMetricInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiMetricOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a Metric",
        "tags": [
          "Metrics",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/userDataFilters": {
      "get": {
        "operationId": "getAllEntities@UserDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "user",
                  "userGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserDataFilterOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all User Data Filters",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ]
      },
      "post": {
        "operationId": "createEntity@UserDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "user",
                  "userGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserDataFilterPostOptionalIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post User Data Filters",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/userDataFilters/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@UserDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a User Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@UserDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "user",
                  "userGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a User Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ]
      },
      "patch": {
        "operationId": "patchEntity@UserDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "user",
                  "userGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserDataFilterPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a User Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@UserDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;user.id==321;userGroup.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=user,userGroup,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "users",
                  "userGroups",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "user",
                  "userGroup",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiUserDataFilterInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiUserDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a User Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects": {
      "get": {
        "operationId": "getAllEntities@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Visualization Objects",
        "tags": [
          "Visualization Object",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiVisualizationObjectPostOptionalIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Visualization Objects",
        "tags": [
          "Visualization Object",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/visualizationObjects/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Visualization Object",
        "tags": [
          "Visualization Object",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Visualization Object",
        "tags": [
          "Visualization Object",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiVisualizationObjectPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Visualization Object",
        "tags": [
          "Visualization Object",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@VisualizationObjects",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;createdBy.id==321;modifiedBy.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=createdBy,modifiedBy,facts,attributes,labels,metrics,datasets",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "userIdentifiers",
                  "facts",
                  "attributes",
                  "labels",
                  "metrics",
                  "datasets",
                  "createdBy",
                  "modifiedBy",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiVisualizationObjectInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiVisualizationObjectOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a Visualization Object",
        "tags": [
          "Visualization Object",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage this object type.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings": {
      "get": {
        "operationId": "getAllEntities@WorkspaceDataFilterSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=workspaceDataFilter",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilters",
                  "workspaceDataFilter",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Settings for Workspace Data Filters",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@WorkspaceDataFilterSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=workspaceDataFilter",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilters",
                  "workspaceDataFilter",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Settings for Workspace Data Filters",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilterSettings/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@WorkspaceDataFilterSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Settings for Workspace Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@WorkspaceDataFilterSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=workspaceDataFilter",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilters",
                  "workspaceDataFilter",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Setting for Workspace Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@WorkspaceDataFilterSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=workspaceDataFilter",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilters",
                  "workspaceDataFilter",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Settings for Workspace Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@WorkspaceDataFilterSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString;workspaceDataFilter.id==321",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=workspaceDataFilter",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilters",
                  "workspaceDataFilter",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a Settings for Workspace Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters": {
      "get": {
        "operationId": "getAllEntities@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Workspace Data Filters",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Workspace Data Filters",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceDataFilters/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Workspace Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "get": {
        "operationId": "getEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Workspace Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Workspace Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "operationId": "updateEntity@WorkspaceDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=title==someString;description==someString",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of included collections or individual relationships. Includes are separated by commas (e.g. include=entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \"ALL\" is present, all possible includes are used (include=ALL).\n\n__WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.",
            "example": "include=filterSettings",
            "explode": false,
            "in": "query",
            "name": "include",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "workspaceDataFilterSettings",
                  "filterSettings",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceDataFilterOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a Workspace Data Filter",
        "tags": [
          "Data Filters",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to manage WorkspaceDataFilter/Settings for the workspace the WDF originates and related workspace hierarchy.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings": {
      "get": {
        "operationId": "getAllEntities@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "default": "ALL",
              "description": "Defines scope of origin of objects. All by default.",
              "enum": [
                "ALL",
                "PARENTS",
                "NATIVE"
              ],
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,page,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "page",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutList"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get all Setting for Workspaces",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "post": {
        "operationId": "createEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceSettingPostOptionalIdDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Post Settings for Workspaces",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/entities/workspaces/{workspaceId}/workspaceSettings/{objectId}": {
      "delete": {
        "operationId": "deleteEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          }
        },
        "summary": "Delete a Setting for Workspace",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      },
      "get": {
        "operationId": "getEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "X-GDC-VALIDATE-RELATIONS",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include Meta objects.",
            "example": "metaInclude=origin,all",
            "explode": false,
            "in": "query",
            "name": "metaInclude",
            "required": false,
            "schema": {
              "description": "Included meta objects",
              "items": {
                "enum": [
                  "origin",
                  "all",
                  "ALL"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Get a Setting for Workspace",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ],
        "x-gdc-security-info": {
          "description": "Contains minimal permission level required to view this object type.",
          "permissions": [
            "VIEW"
          ]
        }
      },
      "patch": {
        "operationId": "patchEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceSettingPatchDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Patch a Setting for Workspace",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      },
      "put": {
        "operationId": "updateEntity@WorkspaceSettings",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title=='Some Title';description=='desc'). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty=='Value 123').",
            "example": "filter=content==JsonNodeValue;type==SettingTypeValue",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.gooddata.api+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonApiWorkspaceSettingInDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/vnd.gooddata.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonApiWorkspaceSettingOutDocument"
                }
              }
            },
            "description": "Request successfully processed"
          }
        },
        "summary": "Put a Setting for a Workspace",
        "tags": [
          "Workspaces - Settings",
          "entities",
          "workspace-object-controller"
        ]
      }
    },
    "/api/v1/layout/dataSources": {
      "get": {
        "description": "Retrieve all data sources including related physical model.",
        "operationId": "getDataSourcesLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeDataSources"
                }
              }
            },
            "description": "Retrieved all data sources."
          }
        },
        "summary": "Get all data sources",
        "tags": [
          "layout",
          "Data Source - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get data sources layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set all data sources including related physical model.",
        "operationId": "putDataSourcesLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeDataSources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Defined all data sources."
          }
        },
        "summary": "Put all data sources",
        "tags": [
          "layout",
          "Data Source - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set data sources layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/dataSources/{dataSourceId}/permissions": {
      "get": {
        "description": "Retrieve current set of permissions of the data source in a declarative form.",
        "operationId": "getDataSourcePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeDataSourcePermissions"
                }
              }
            },
            "description": "Retrieved current set of permissions."
          }
        },
        "summary": "Get permissions for the data source",
        "tags": [
          "layout"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "et data source permissions.",
        "operationId": "setDataSourcePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeDataSourcePermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "summary": "Set data source permissions.",
        "tags": [
          "layout"
        ],
        "x-gdc-security-info": {
          "description": "Permissions to modify the user data filters.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/organization": {
      "get": {
        "description": "Retrieve complete layout of organization, workspaces, user-groups, etc.",
        "operationId": "getOrganizationLayout",
        "parameters": [
          {
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "items": {
                "description": "Defines properties which should not be included in the payload.",
                "enum": [
                  "ACTIVITY_INFO"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeOrganization"
                }
              }
            },
            "description": "Retrieved all parts of an organization."
          }
        },
        "summary": "Get organization layout",
        "tags": [
          "layout",
          "Organization - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get organization layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Sets complete layout of organization, like workspaces, user-groups, etc.",
        "operationId": "setOrganizationLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeOrganization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Defined all parts of an organization."
          }
        },
        "summary": "Set organization layout",
        "tags": [
          "layout",
          "Organization - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set organization layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/organization/permissions": {
      "get": {
        "description": "Retrieve organization permissions",
        "operationId": "getOrganizationPermissions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeclarativeOrganizationPermission"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Retrieved all organization permissions."
          }
        },
        "summary": "Get organization permissions",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get organization permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Sets organization permissions",
        "operationId": "setOrganizationPermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "An array of declarative organization permissions assignments",
                "items": {
                  "$ref": "#/components/schemas/DeclarativeOrganizationPermission"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Organization permissions set."
          }
        },
        "summary": "Set organization permissions",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set organization permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/userGroups": {
      "get": {
        "description": "Retrieve all user-groups eventually with parent group.",
        "operationId": "getUserGroupsLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUserGroups"
                }
              }
            },
            "description": "Retrieved all user groups."
          }
        },
        "summary": "Get all user groups",
        "tags": [
          "layout",
          "UserGroups - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get groups layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Define all user groups with their parents eventually.",
        "operationId": "putUserGroupsLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUserGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Defined all user groups."
          }
        },
        "summary": "Put all user groups",
        "tags": [
          "layout",
          "UserGroups - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set groups layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/userGroups/{userGroupId}/permissions": {
      "get": {
        "description": "Retrieve current set of permissions of the user-group in a declarative form.",
        "operationId": "getUserGroupPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUserGroupPermissions"
                }
              }
            },
            "description": "Retrieved current set of permissions."
          }
        },
        "summary": "Get permissions for the user-group",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set effective permissions for the user-group",
        "operationId": "setUserGroupPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "userGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUserGroupPermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User-group permissions successfully set."
          }
        },
        "summary": "Set permissions for the user-group",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/users": {
      "get": {
        "description": "Retrieve all users including authentication properties.",
        "operationId": "getUsersLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUsers"
                }
              }
            },
            "description": "Retrieved all users."
          }
        },
        "summary": "Get all users",
        "tags": [
          "layout",
          "Users - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get users layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set all users and their authentication properties.",
        "operationId": "putUsersLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUsers"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Defined all users."
          }
        },
        "summary": "Put all users",
        "tags": [
          "layout",
          "Users - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set users layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/users/{userId}/permissions": {
      "get": {
        "description": "Retrieve current set of permissions of the user in a declarative form.",
        "operationId": "getUserPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUserPermissions"
                }
              }
            },
            "description": "Retrieved current set of permissions."
          }
        },
        "summary": "Get permissions for the user",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set effective permissions for the user",
        "operationId": "setUserPermissions",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUserPermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User permissions successfully set."
          }
        },
        "summary": "Set permissions for the user",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/usersAndUserGroups": {
      "get": {
        "description": "Retrieve all users and user groups with theirs properties.",
        "operationId": "getUsersUserGroupsLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUsersUserGroups"
                }
              }
            },
            "description": "Retrieved all users and user groups."
          }
        },
        "summary": "Get all users and user groups",
        "tags": [
          "layout",
          "UserGroups - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get user/groups layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Define all users and user groups with theirs properties.",
        "operationId": "putUsersUserGroupsLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUsersUserGroups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Defined all users and user groups."
          }
        },
        "summary": "Put all users and user groups",
        "tags": [
          "layout",
          "UserGroups - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set user/groups layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaceDataFilters": {
      "get": {
        "description": "Retrieve all workspaces and related workspace data filters (and their settings / values).",
        "operationId": "getWorkspaceDataFiltersLayout",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilters"
                }
              }
            },
            "description": "Retrieved all workspace data filters."
          }
        },
        "summary": "Get workspace data filters for all workspaces",
        "tags": [
          "layout",
          "Data Filters"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get data filters layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Sets workspace data filters in all workspaces in entire organization.",
        "operationId": "setWorkspaceDataFiltersLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeWorkspaceDataFilters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "All workspace data filters set."
          }
        },
        "summary": "Set all workspace data filters",
        "tags": [
          "layout",
          "Data Filters"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set data filters layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces": {
      "get": {
        "description": "Gets complete layout of workspaces, their hierarchy, models.",
        "operationId": "getWorkspacesLayout",
        "parameters": [
          {
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "items": {
                "description": "Defines properties which should not be included in the payload.",
                "enum": [
                  "ACTIVITY_INFO"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeWorkspaces"
                }
              }
            },
            "description": "Retrieved layout of all workspaces."
          }
        },
        "summary": "Get all workspaces layout",
        "tags": [
          "layout",
          "Workspaces - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to get workspaces layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Sets complete layout of workspaces, their hierarchy, models.",
        "operationId": "setWorkspacesLayout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeWorkspaces"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "All workspaces layout set."
          }
        },
        "summary": "Set all workspaces layout",
        "tags": [
          "layout",
          "Workspaces - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permission required to set workspaces layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}": {
      "get": {
        "description": "Retrieve current model of the workspace in declarative form.",
        "operationId": "getWorkspaceLayout",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "items": {
                "description": "Defines properties which should not be included in the payload.",
                "enum": [
                  "ACTIVITY_INFO"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
                }
              }
            },
            "description": "Retrieved the workspace model."
          }
        },
        "summary": "Get workspace layout",
        "tags": [
          "layout",
          "Workspaces - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to read the layout.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "description": "Set complete layout of workspace, like model, authorization, etc.",
        "operationId": "putWorkspaceLayout",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeWorkspaceModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The model of the workspace was set."
          }
        },
        "summary": "Set workspace layout",
        "tags": [
          "layout",
          "Workspaces - Declarative APIs"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to modify the layout.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}/analyticsModel": {
      "get": {
        "description": "Retrieve current analytics model of the workspace.",
        "operationId": "getAnalyticsModel",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exclude",
            "required": false,
            "schema": {
              "items": {
                "description": "Defines properties which should not be included in the payload.",
                "enum": [
                  "ACTIVITY_INFO"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeAnalytics"
                }
              }
            },
            "description": "Retrieved current analytics model."
          }
        },
        "summary": "Get analytics model",
        "tags": [
          "layout",
          "Analytics Model"
        ],
        "x-gdc-security-info": {
          "description": "Permissions to read the analytics layout.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "description": "Set effective analytics model of the workspace.",
        "operationId": "setAnalyticsModel",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeAnalytics"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Analytics model successfully set."
          }
        },
        "summary": "Set analytics model",
        "tags": [
          "layout",
          "Analytics Model"
        ],
        "x-gdc-security-info": {
          "description": "Permissions to modify the analytics layout.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}/logicalModel": {
      "get": {
        "description": "Retrieve current logical model of the workspace in declarative form.",
        "operationId": "getLogicalModel",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeParents",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeModel"
                }
              }
            },
            "description": "Retrieved current logical model."
          }
        },
        "summary": "Get logical model",
        "tags": [
          "LDM - Declarative APIs",
          "layout"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to read the logical model.",
          "permissions": [
            "ANALYZE"
          ]
        }
      },
      "put": {
        "description": "Set effective logical model of the workspace.",
        "operationId": "setLogicalModel",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Logical model successfully set."
          }
        },
        "summary": "Set logical model",
        "tags": [
          "LDM - Declarative APIs",
          "layout"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to alter the logical model.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}/permissions": {
      "get": {
        "description": "Retrieve current set of permissions of the workspace in a declarative form.",
        "operationId": "getWorkspacePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeWorkspacePermissions"
                }
              }
            },
            "description": "Retrieved current set of permissions."
          }
        },
        "summary": "Get permissions for the workspace",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set effective permissions for the workspace",
        "operationId": "setWorkspacePermissions",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeWorkspacePermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Workspace permissions successfully set."
          }
        },
        "summary": "Set permissions for the workspace",
        "tags": [
          "layout",
          "Permissions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to manipulate permissions.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/layout/workspaces/{workspaceId}/userDataFilters": {
      "get": {
        "description": "Retrieve current user data filters assigned to the workspace.",
        "operationId": "getUserDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeclarativeUserDataFilters"
                }
              }
            },
            "description": "Retrieved current user data filters."
          }
        },
        "summary": "Get user data filters",
        "tags": [
          "layout",
          "User Data Filters"
        ],
        "x-gdc-security-info": {
          "description": "Permissions to read the user data filters.",
          "permissions": [
            "MANAGE"
          ]
        }
      },
      "put": {
        "description": "Set user data filters assigned to the workspace.",
        "operationId": "setUserDataFilters",
        "parameters": [
          {
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclarativeUserDataFilters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "User data filters successfully set."
          }
        },
        "summary": "Set user data filters",
        "tags": [
          "layout",
          "User Data Filters"
        ],
        "x-gdc-security-info": {
          "description": "Permissions to modify the user data filters.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/options": {
      "get": {
        "description": "Retrieves links for all options for different configurations.",
        "operationId": "getAllOptions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "All options": {
                    "description": "All options",
                    "value": {
                      "options": {
                        "description": "Options resources",
                        "links": {
                          "availableDrivers": "/api/v1/options/availableDrivers"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Links for all configuration options."
          }
        },
        "summary": "Links for all configuration options",
        "tags": [
          "Options",
          "entities"
        ]
      }
    },
    "/api/v1/options/availableDrivers": {
      "get": {
        "description": "Retrieves a list of all supported data sources along with information about the used drivers.",
        "operationId": "getDataSourceDrivers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "All available drivers": {
                    "description": "All available drivers",
                    "value": {
                      "POSTGRESQL": "org.postgresql.Driver",
                      "REDSHIFT": "com.amazon.redshift.jdbc42.Driver"
                    }
                  }
                },
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of all available data source drivers."
          }
        },
        "summary": "Get all available data source drivers",
        "tags": [
          "entities",
          "Available Drivers"
        ]
      }
    }
  },
  "servers": [
    {
      "description": "GoodData.CN endpoint",
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "Use case APIs for user management",
      "name": "User management"
    },
    {
      "description": "| execution of some form of computation (RPC over JSON)",
      "name": "actions"
    },
    {
      "description": "| interconnected resources representing application state (JSON:API)",
      "name": "entities"
    },
    {
      "description": "| all-in-one declarative interface (set [PUT] & read [GET] over JSON)",
      "name": "layout"
    }
  ]
}
