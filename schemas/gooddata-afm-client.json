{
  "components": {
    "schemas": {
      "AFM": {
        "description": "Top level executable entity. Combination of [A]ttributes, [F]ilters & [M]etrics.",
        "properties": {
          "attributes": {
            "description": "Attributes to be used in the computation.",
            "items": {
              "$ref": "#/components/schemas/AttributeItem"
            },
            "type": "array"
          },
          "auxMeasures": {
            "description": "Metrics to be referenced from other AFM objects (e.g. filters) but not included in the result.",
            "items": {
              "$ref": "#/components/schemas/MeasureItem"
            },
            "type": "array"
          },
          "filters": {
            "description": "Various filter types to filter execution result.",
            "items": {
              "$ref": "#/components/schemas/FilterDefinition"
            },
            "type": "array"
          },
          "measures": {
            "description": "Metrics to be computed.",
            "items": {
              "$ref": "#/components/schemas/MeasureItem"
            },
            "type": "array"
          }
        },
        "required": [
          "attributes",
          "filters",
          "measures"
        ],
        "type": "object"
      },
      "AbsoluteDateFilter": {
        "description": "A datetime filter specifying exact from and to values.",
        "properties": {
          "absoluteDateFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dataset": {
                "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
              },
              "from": {
                "example": "2020-07-01 18:23",
                "pattern": "^\\d{4}-\\d{1,2}-\\d{1,2}( \\d{1,2}:\\d{1,2})?$",
                "type": "string"
              },
              "to": {
                "example": "2020-07-16 23:59",
                "pattern": "^\\d{4}-\\d{1,2}-\\d{1,2}( \\d{1,2}:\\d{1,2})?$",
                "type": "string"
              }
            },
            "required": [
              "from",
              "to",
              "dataset"
            ],
            "type": "object"
          }
        },
        "required": [
          "absoluteDateFilter"
        ],
        "type": "object"
      },
      "AbstractMeasureValueFilter": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RankingFilter"
          }
        ],
        "type": "object"
      },
      "AfmExecution": {
        "properties": {
          "execution": {
            "$ref": "#/components/schemas/AFM"
          },
          "resultSpec": {
            "$ref": "#/components/schemas/ResultSpec"
          },
          "settings": {
            "$ref": "#/components/schemas/ExecutionSettings"
          }
        },
        "required": [
          "execution",
          "resultSpec"
        ],
        "type": "object"
      },
      "AfmExecutionResponse": {
        "properties": {
          "executionResponse": {
            "$ref": "#/components/schemas/ExecutionResponse"
          }
        },
        "required": [
          "executionResponse"
        ],
        "type": "object"
      },
      "AfmIdentifier": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AfmObjectIdentifier"
          },
          {
            "$ref": "#/components/schemas/AfmLocalIdentifier"
          }
        ],
        "type": "object"
      },
      "AfmLocalIdentifier": {
        "properties": {
          "localIdentifier": {
            "example": "sampleAutoGenerated0123_ID",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          }
        },
        "required": [
          "localIdentifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifier": {
        "description": "ObjectIdentifier with `identifier` wrapper. This serves to distinguish MD object identifiers in AFM request from local identifiers.",
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "analyticalDashboard",
                  "attribute",
                  "dashboardPlugin",
                  "dataset",
                  "fact",
                  "label",
                  "metric",
                  "prompt",
                  "visualizationObject",
                  "filterContext"
                ],
                "example": "fact",
                "type": "string"
              }
            },
            "required": [
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierAttribute": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "attribute"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierCore": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "attribute",
                  "label",
                  "fact",
                  "metric"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierDataset": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "dataset"
                ],
                "type": "string"
              }
            },
            "required": [
              "id",
              "type"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmObjectIdentifierLabel": {
        "properties": {
          "identifier": {
            "properties": {
              "id": {
                "example": "sample_item.price",
                "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
                "type": "string"
              },
              "type": {
                "enum": [
                  "label"
                ],
                "type": "string"
              }
            },
            "required": [
              "type",
              "id"
            ],
            "type": "object"
          }
        },
        "required": [
          "identifier"
        ],
        "type": "object"
      },
      "AfmValidDescendantsQuery": {
        "description": "Entity describing the valid descendants request.",
        "properties": {
          "attributes": {
            "description": "List of identifiers of the attributes to get the valid descendants for.",
            "items": {
              "$ref": "#/components/schemas/AfmObjectIdentifierAttribute"
            },
            "type": "array"
          }
        },
        "required": [
          "attributes"
        ],
        "type": "object"
      },
      "AfmValidDescendantsResponse": {
        "description": "Entity describing the valid descendants response.",
        "properties": {
          "validDescendants": {
            "additionalProperties": {
              "description": "Map of attribute identifiers to list of valid descendants identifiers.",
              "items": {
                "$ref": "#/components/schemas/AfmObjectIdentifierAttribute"
              },
              "type": "array"
            },
            "description": "Map of attribute identifiers to list of valid descendants identifiers.",
            "type": "object"
          }
        },
        "required": [
          "validDescendants"
        ],
        "type": "object"
      },
      "AfmValidObjectsQuery": {
        "description": "Entity holding AFM and list of object types whose validity should be computed.",
        "properties": {
          "afm": {
            "$ref": "#/components/schemas/AFM"
          },
          "types": {
            "example": "facts",
            "items": {
              "enum": [
                "facts",
                "attributes",
                "measures"
              ],
              "example": "facts",
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "afm",
          "types"
        ],
        "type": "object"
      },
      "AfmValidObjectsResponse": {
        "description": "All objects of specified types valid with respect to given AFM.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/RestApiIdentifier"
            },
            "type": "array"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ArithmeticMeasureDefinition": {
        "description": "Metric representing arithmetics between metrics.",
        "properties": {
          "arithmeticMeasure": {
            "properties": {
              "measureIdentifiers": {
                "description": "List of metrics to apply arithmetic operation by chosen operator.",
                "items": {
                  "$ref": "#/components/schemas/AfmLocalIdentifier"
                },
                "type": "array"
              },
              "operator": {
                "description": "Arithmetic operator describing operation between metrics.",
                "enum": [
                  "SUM",
                  "DIFFERENCE",
                  "MULTIPLICATION",
                  "RATIO",
                  "CHANGE"
                ],
                "example": "SUM",
                "type": "string"
              }
            },
            "required": [
              "measureIdentifiers",
              "operator"
            ],
            "type": "object"
          }
        },
        "required": [
          "arithmeticMeasure"
        ],
        "type": "object"
      },
      "AttributeExecutionResultHeader": {
        "properties": {
          "attributeHeader": {
            "$ref": "#/components/schemas/AttributeResultHeader"
          }
        },
        "required": [
          "attributeHeader"
        ],
        "type": "object"
      },
      "AttributeFilter": {
        "description": "Abstract filter definition type attributes",
        "oneOf": [
          {
            "$ref": "#/components/schemas/NegativeAttributeFilter"
          },
          {
            "$ref": "#/components/schemas/PositiveAttributeFilter"
          }
        ],
        "type": "object"
      },
      "AttributeFilterElements": {
        "description": "Filter on specific set of label values.",
        "properties": {
          "values": {
            "description": "Set of label values.",
            "example": [
              "value1",
              "value2"
            ],
            "items": {
              "nullable": true,
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "values"
        ],
        "type": "object"
      },
      "AttributeFormat": {
        "properties": {
          "locale": {
            "description": "Format locale",
            "type": "string"
          },
          "pattern": {
            "description": "Format pattern",
            "type": "string"
          }
        },
        "required": [
          "locale",
          "pattern"
        ],
        "type": "object"
      },
      "AttributeHeaderOut": {
        "properties": {
          "attributeHeader": {
            "properties": {
              "attribute": {
                "$ref": "#/components/schemas/RestApiIdentifier"
              },
              "attributeName": {
                "type": "string"
              },
              "format": {
                "$ref": "#/components/schemas/AttributeFormat"
              },
              "granularity": {
                "enum": [
                  "MINUTE",
                  "HOUR",
                  "DAY",
                  "WEEK",
                  "MONTH",
                  "QUARTER",
                  "YEAR",
                  "MINUTE_OF_HOUR",
                  "HOUR_OF_DAY",
                  "DAY_OF_WEEK",
                  "DAY_OF_MONTH",
                  "DAY_OF_YEAR",
                  "WEEK_OF_YEAR",
                  "MONTH_OF_YEAR",
                  "QUARTER_OF_YEAR"
                ],
                "type": "string"
              },
              "label": {
                "$ref": "#/components/schemas/RestApiIdentifier"
              },
              "labelName": {
                "type": "string"
              },
              "localIdentifier": {
                "pattern": "^[.a-zA-Z0-9_-]+$",
                "type": "string"
              },
              "primaryLabel": {
                "$ref": "#/components/schemas/RestApiIdentifier"
              }
            },
            "required": [
              "attribute",
              "attributeName",
              "label",
              "labelName",
              "localIdentifier",
              "primaryLabel"
            ],
            "type": "object"
          }
        },
        "required": [
          "attributeHeader"
        ],
        "type": "object"
      },
      "AttributeItem": {
        "properties": {
          "label": {
            "$ref": "#/components/schemas/AfmObjectIdentifierLabel"
          },
          "localIdentifier": {
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "showAllValues": {
            "default": false,
            "description": "Specifies that the label should be outer-joined.",
            "type": "boolean"
          }
        },
        "required": [
          "label",
          "localIdentifier"
        ],
        "type": "object"
      },
      "AttributeResultHeader": {
        "description": "Header containing the information related to attributes.",
        "properties": {
          "labelValue": {
            "description": "A value of the current attribute label.",
            "example": "East Coast",
            "type": "string"
          },
          "primaryLabelValue": {
            "description": "A value of the primary attribute label.",
            "example": "1225",
            "type": "string"
          }
        },
        "required": [
          "labelValue",
          "primaryLabelValue"
        ],
        "type": "object"
      },
      "ComparisonMeasureValueFilter": {
        "description": "Filter the result by comparing specified metric to given constant value, using given comparison operator.",
        "properties": {
          "comparisonMeasureValueFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "measure": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "operator": {
                "enum": [
                  "GREATER_THAN",
                  "GREATER_THAN_OR_EQUAL_TO",
                  "LESS_THAN",
                  "LESS_THAN_OR_EQUAL_TO",
                  "EQUAL_TO",
                  "NOT_EQUAL_TO"
                ],
                "example": "GREATER_THAN",
                "type": "string"
              },
              "treatNullValuesAs": {
                "example": 0,
                "type": "number"
              },
              "value": {
                "example": 1327,
                "type": "number"
              }
            },
            "required": [
              "operator",
              "value",
              "measure"
            ],
            "type": "object"
          }
        },
        "required": [
          "comparisonMeasureValueFilter"
        ],
        "type": "object"
      },
      "DataColumnLocator": {
        "description": "Mapping from dimension items (either 'localIdentifier' from 'AttributeItem', or \"measureGroup\") to their respective values. This effectively specifies the path (location) of the data column used for sorting. Therefore values for all dimension items must be specified.",
        "example": {
          "dim2": {
            "measureGroup": "m1",
            "status": "lost"
          }
        },
        "properties": {
          "properties": {
            "additionalProperties": {
              "description": "Mapping from dimension items (either 'localIdentifier' from 'AttributeItem', or \"measureGroup\") to their respective values. This effectively specifies the path (location) of the data column used for sorting. Therefore values for all dimension items must be specified.",
              "example": "{\"status\":\"lost\",\"measureGroup\":\"m1\"}",
              "type": "string"
            },
            "description": "Mapping from dimension items (either 'localIdentifier' from 'AttributeItem', or \"measureGroup\") to their respective values. This effectively specifies the path (location) of the data column used for sorting. Therefore values for all dimension items must be specified.",
            "example": {
              "measureGroup": "m1",
              "status": "lost"
            },
            "type": "object"
          }
        },
        "required": [
          "properties"
        ],
        "type": "object"
      },
      "DataColumnLocators": {
        "properties": {
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/DataColumnLocator"
            },
            "description": "Mapping from dimensions to data column locators.",
            "example": {
              "dim2": {
                "measureGroup": "m1",
                "status": "lost"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "DateFilter": {
        "description": "Abstract filter definition type for dates",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AbsoluteDateFilter"
          },
          {
            "$ref": "#/components/schemas/RelativeDateFilter"
          }
        ],
        "type": "object"
      },
      "DependsOn": {
        "nullable": true,
        "properties": {
          "complementFilter": {
            "default": false,
            "description": "Inverse filtering mode.",
            "type": "boolean"
          },
          "label": {
            "description": "Specifies on which label the filter depends on.",
            "type": "string"
          },
          "values": {
            "description": "Specifies values of the label for element filtering.",
            "items": {
              "nullable": true,
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "label",
          "values"
        ],
        "type": "object"
      },
      "Dimension": {
        "description": "Single dimension description.",
        "properties": {
          "itemIdentifiers": {
            "description": "List of items in current dimension. Can reference 'localIdentifier' from 'AttributeItem', or special pseudo attribute \"measureGroup\" representing list of metrics.",
            "example": [
              "attribute_1",
              "measureGroup"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "localIdentifier": {
            "description": "Dimension identification within requests. Other entities can reference this dimension by this value.",
            "example": "firstDimension",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "sorting": {
            "description": "List of sorting rules. From most relevant to least relevant (less relevant rule is applied, when more relevant rule compares items as equal).",
            "items": {
              "$ref": "#/components/schemas/SortKey"
            },
            "type": "array"
          }
        },
        "required": [
          "itemIdentifiers"
        ],
        "type": "object"
      },
      "DimensionHeader": {
        "description": "Contains the dimension-specific header information.",
        "properties": {
          "headerGroups": {
            "description": "An array containing header groups.",
            "items": {
              "$ref": "#/components/schemas/HeaderGroup"
            },
            "type": "array"
          }
        },
        "required": [
          "headerGroups"
        ],
        "type": "object"
      },
      "Element": {
        "description": "List of returned elements.",
        "properties": {
          "primaryTitle": {
            "description": "Title of primary label of attribute owning requested label, null if the title is null or the primary label is excluded",
            "type": "string"
          },
          "title": {
            "description": "Title of requested label.",
            "type": "string"
          }
        },
        "required": [
          "primaryTitle",
          "title"
        ],
        "type": "object"
      },
      "ElementsRequest": {
        "properties": {
          "complementFilter": {
            "default": false,
            "description": "Inverse filters:\n* ```false``` - return items matching ```patternFilter``` and ```exactFilter```\n* ```true``` - return items not matching ```patternFilter``` and ```exactFilter```",
            "type": "boolean"
          },
          "dataSamplingPercentage": {
            "default": 100.0,
            "deprecated": true,
            "description": "Specifies percentage of source table data scanned during the computation. This field is deprecated and is no longer used during the elements computation.",
            "format": "float",
            "type": "number"
          },
          "dependsOn": {
            "description": "Return only items, whose are not filtered out by the parent filters.",
            "items": {
              "$ref": "#/components/schemas/DependsOn"
            },
            "type": "array"
          },
          "exactFilter": {
            "description": "Return only items, whose ```label``` title exactly matches one of ```filter```.",
            "items": {
              "nullable": true,
              "type": "string"
            },
            "type": "array"
          },
          "excludePrimaryLabel": {
            "default": false,
            "description": "Excludes items from the result that differ only by primary label\n* ```false``` - return items with distinct primary label\n* ```true``` - return items with distinct requested label",
            "type": "boolean"
          },
          "filterBy": {
            "$ref": "#/components/schemas/FilterBy"
          },
          "label": {
            "description": "Requested label.",
            "example": "label_id",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "patternFilter": {
            "description": "Return only items, whose ```label``` title case insensitively contains ```filter``` as substring.",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort order of returned items.\nItems are sorted by ```label``` title. If no sort order is specified then attribute's ```sortDirection``` is used, which is ASC by default",
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          },
          "validateBy": {
            "description": "Return only items, what are computable on metric.",
            "items": {
              "$ref": "#/components/schemas/ValidateByItem"
            },
            "type": "array"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "ElementsResponse": {
        "description": "Entity holding list of sorted & filtered label elements, related primary label of attribute owning requested label and paging.",
        "properties": {
          "elements": {
            "description": "List of returned elements.",
            "items": {
              "$ref": "#/components/schemas/Element"
            },
            "type": "array"
          },
          "format": {
            "$ref": "#/components/schemas/AttributeFormat"
          },
          "granularity": {
            "description": "Granularity of requested label in case of date attribute",
            "enum": [
              "MINUTE",
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH",
              "QUARTER",
              "YEAR",
              "MINUTE_OF_HOUR",
              "HOUR_OF_DAY",
              "DAY_OF_WEEK",
              "DAY_OF_MONTH",
              "DAY_OF_YEAR",
              "WEEK_OF_YEAR",
              "MONTH_OF_YEAR",
              "QUARTER_OF_YEAR"
            ],
            "type": "string"
          },
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "primaryLabel": {
            "$ref": "#/components/schemas/RestApiIdentifier"
          }
        },
        "required": [
          "elements",
          "paging",
          "primaryLabel"
        ],
        "type": "object"
      },
      "ExecutionLinks": {
        "properties": {
          "executionResult": {
            "type": "string"
          }
        },
        "required": [
          "executionResult"
        ],
        "type": "object"
      },
      "ExecutionResponse": {
        "properties": {
          "dimensions": {
            "items": {
              "$ref": "#/components/schemas/ResultDimension"
            },
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/ExecutionLinks"
          }
        },
        "required": [
          "dimensions",
          "links"
        ],
        "type": "object"
      },
      "ExecutionResult": {
        "description": "Contains the result of an AFM execution.",
        "properties": {
          "data": {
            "description": "A multi-dimensional array of computed results. The most common one being a 2-dimensional array. The arrays can be composed of Double or null values.",
            "example": [
              [
                1.0,
                2.5
              ],
              [
                -1.3,
                3.14
              ]
            ],
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "dimensionHeaders": {
            "description": "An array containing dimension headers. The size of the array corresponds to the number of dimensions. Their order corresponds to the dimension order in the execution result spec.",
            "items": {
              "$ref": "#/components/schemas/DimensionHeader"
            },
            "type": "array"
          },
          "grandTotals": {
            "items": {
              "$ref": "#/components/schemas/ExecutionResultGrandTotal"
            },
            "type": "array"
          },
          "paging": {
            "$ref": "#/components/schemas/ExecutionResultPaging"
          }
        },
        "required": [
          "data",
          "dimensionHeaders",
          "grandTotals",
          "paging"
        ],
        "type": "object"
      },
      "ExecutionResultGrandTotal": {
        "description": "Contains the data of grand totals with the same dimensions.",
        "properties": {
          "data": {
            "description": "A multi-dimensional array of computed results. The most common one being a 2-dimensional array. The arrays can be composed of Double or null values.",
            "example": [
              [
                1.0,
                2.5
              ],
              [
                -1.3,
                3.14
              ]
            ],
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "dimensionHeaders": {
            "description": "Contains headers for a subset of `totalDimensions` in which the totals are grand totals.",
            "items": {
              "$ref": "#/components/schemas/DimensionHeader"
            },
            "type": "array"
          },
          "totalDimensions": {
            "description": "Dimensions of the grand totals.",
            "items": {
              "description": "Dimensions of the grand totals.",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "data",
          "dimensionHeaders",
          "totalDimensions"
        ],
        "type": "object"
      },
      "ExecutionResultHeader": {
        "description": "Abstract execution result header",
        "oneOf": [
          {
            "$ref": "#/components/schemas/AttributeExecutionResultHeader"
          },
          {
            "$ref": "#/components/schemas/MeasureExecutionResultHeader"
          },
          {
            "$ref": "#/components/schemas/TotalExecutionResultHeader"
          }
        ],
        "type": "object"
      },
      "ExecutionResultPaging": {
        "description": "A paging information related to the data presented in the execution result. These paging information are multi-dimensional.",
        "properties": {
          "count": {
            "description": "A count of the returned results in every dimension.",
            "example": [
              2,
              2
            ],
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "offset": {
            "description": "The offset of the results returned in every dimension.",
            "example": [
              0,
              0
            ],
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "total": {
            "description": "A total count of the results in every dimension.",
            "example": [
              2,
              2
            ],
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "required": [
          "count",
          "offset",
          "total"
        ],
        "type": "object"
      },
      "ExecutionSettings": {
        "description": "Various settings affecting the process of AFM execution or its result",
        "properties": {
          "dataSamplingPercentage": {
            "description": "Specifies the percentage of rows from fact datasets to use during computation. This feature is available only for workspaces that use a Vertica Data Source without table views.",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "format": "float",
            "maximum": 100,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "FilterBy": {
        "description": "Specifies what is used for filtering.",
        "properties": {
          "labelType": {
            "default": "REQUESTED",
            "description": "Specifies which label is used for filtering - primary or requested.",
            "enum": [
              "PRIMARY",
              "REQUESTED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilterDefinition": {
        "description": "Abstract filter definition type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/InlineFilterDefinition"
          },
          {
            "$ref": "#/components/schemas/RankingFilter"
          },
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/AbsoluteDateFilter"
          },
          {
            "$ref": "#/components/schemas/RelativeDateFilter"
          },
          {
            "$ref": "#/components/schemas/NegativeAttributeFilter"
          },
          {
            "$ref": "#/components/schemas/PositiveAttributeFilter"
          }
        ],
        "type": "object"
      },
      "FilterDefinitionForSimpleMeasure": {
        "description": "Abstract filter definition type for simple metric.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/DateFilter"
          },
          {
            "$ref": "#/components/schemas/AttributeFilter"
          }
        ],
        "type": "object"
      },
      "HeaderGroup": {
        "description": "Contains the information specific for a group of headers. These groups correlate to attributes and metric groups.",
        "properties": {
          "headers": {
            "description": "An array containing headers.",
            "items": {
              "$ref": "#/components/schemas/ExecutionResultHeader"
            },
            "type": "array"
          }
        },
        "required": [
          "headers"
        ],
        "type": "object"
      },
      "InlineFilterDefinition": {
        "description": "Filter in form of direct MAQL query.",
        "properties": {
          "inline": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "filter": {
                "type": "string"
              }
            },
            "required": [
              "filter"
            ],
            "type": "object"
          }
        },
        "required": [
          "inline"
        ],
        "type": "object"
      },
      "InlineMeasureDefinition": {
        "description": "Metric defined by the raw MAQL query.",
        "properties": {
          "inline": {
            "properties": {
              "maql": {
                "type": "string"
              }
            },
            "required": [
              "maql"
            ],
            "type": "object"
          }
        },
        "required": [
          "inline"
        ],
        "type": "object"
      },
      "MeasureDefinition": {
        "description": "Abstract metric definition type",
        "oneOf": [
          {
            "$ref": "#/components/schemas/InlineMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/ArithmeticMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/SimpleMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/PopMeasureDefinition"
          }
        ],
        "type": "object"
      },
      "MeasureExecutionResultHeader": {
        "properties": {
          "measureHeader": {
            "$ref": "#/components/schemas/MeasureResultHeader"
          }
        },
        "required": [
          "measureHeader"
        ],
        "type": "object"
      },
      "MeasureGroupHeaders": {
        "properties": {
          "measureGroupHeaders": {
            "items": {
              "$ref": "#/components/schemas/MeasureHeaderOut"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MeasureHeaderOut": {
        "properties": {
          "format": {
            "type": "string"
          },
          "localIdentifier": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "localIdentifier"
        ],
        "type": "object"
      },
      "MeasureItem": {
        "properties": {
          "definition": {
            "$ref": "#/components/schemas/MeasureDefinition"
          },
          "localIdentifier": {
            "example": "metric_1",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          }
        },
        "required": [
          "definition",
          "localIdentifier"
        ],
        "type": "object"
      },
      "MeasureResultHeader": {
        "description": "Header containing the information related to metrics.",
        "properties": {
          "measureIndex": {
            "description": "Metric index. Starts at 0.",
            "example": 0,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "measureIndex"
        ],
        "type": "object"
      },
      "MeasureValueFilter": {
        "description": "Abstract filter definition type filtering by the value of the metric.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ComparisonMeasureValueFilter"
          },
          {
            "$ref": "#/components/schemas/RangeMeasureValueFilter"
          }
        ],
        "type": "object"
      },
      "NegativeAttributeFilter": {
        "description": "Filter able to limit element values by label and related selected negated elements.",
        "properties": {
          "negativeAttributeFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "label": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "notIn": {
                "$ref": "#/components/schemas/AttributeFilterElements"
              }
            },
            "required": [
              "notIn",
              "label"
            ],
            "type": "object"
          }
        },
        "required": [
          "negativeAttributeFilter"
        ],
        "type": "object"
      },
      "Paging": {
        "description": "Current page description.",
        "properties": {
          "count": {
            "description": "Count of items in this page.",
            "example": 5,
            "format": "int32",
            "type": "integer"
          },
          "next": {
            "description": "Link to next page, or null if this is last page.",
            "example": "https://sample.gooddata.com/api/v1/actions/workspaces/sampleWorkspace/execution/collectLabelElements?label=sample.price&limit=5&offset=10",
            "type": "string"
          },
          "offset": {
            "description": "Offset of this page.",
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "description": "Count of returnable items ignoring paging.",
            "example": 100,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "count",
          "offset",
          "total"
        ],
        "type": "object"
      },
      "PopDataset": {
        "properties": {
          "dataset": {
            "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
          },
          "periodsAgo": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "dataset",
          "periodsAgo"
        ],
        "type": "object"
      },
      "PopDatasetMeasureDefinition": {
        "description": "Previous period type of metric.",
        "properties": {
          "previousPeriodMeasure": {
            "properties": {
              "dateDatasets": {
                "items": {
                  "$ref": "#/components/schemas/PopDataset"
                },
                "type": "array"
              },
              "measureIdentifier": {
                "$ref": "#/components/schemas/AfmLocalIdentifier"
              }
            },
            "required": [
              "dateDatasets",
              "measureIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "previousPeriodMeasure"
        ],
        "type": "object"
      },
      "PopDate": {
        "properties": {
          "attribute": {
            "$ref": "#/components/schemas/AfmObjectIdentifierAttribute"
          },
          "periodsAgo": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "attribute",
          "periodsAgo"
        ],
        "type": "object"
      },
      "PopDateMeasureDefinition": {
        "description": "Period over period type of metric.",
        "properties": {
          "overPeriodMeasure": {
            "properties": {
              "dateAttributes": {
                "items": {
                  "$ref": "#/components/schemas/PopDate"
                },
                "type": "array"
              },
              "measureIdentifier": {
                "$ref": "#/components/schemas/AfmLocalIdentifier"
              }
            },
            "required": [
              "dateAttributes",
              "measureIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "overPeriodMeasure"
        ],
        "type": "object"
      },
      "PopMeasureDefinition": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/PopDatasetMeasureDefinition"
          },
          {
            "$ref": "#/components/schemas/PopDateMeasureDefinition"
          }
        ],
        "type": "object"
      },
      "PositiveAttributeFilter": {
        "description": "Filter able to limit element values by label and related selected elements.",
        "properties": {
          "positiveAttributeFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "in": {
                "$ref": "#/components/schemas/AttributeFilterElements"
              },
              "label": {
                "$ref": "#/components/schemas/AfmIdentifier"
              }
            },
            "required": [
              "in",
              "label"
            ],
            "type": "object"
          }
        },
        "required": [
          "positiveAttributeFilter"
        ],
        "type": "object"
      },
      "RangeMeasureValueFilter": {
        "description": "Filter the result by comparing specified metric to given range of values.",
        "properties": {
          "rangeMeasureValueFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "from": {
                "example": 100,
                "type": "number"
              },
              "measure": {
                "$ref": "#/components/schemas/AfmIdentifier"
              },
              "operator": {
                "enum": [
                  "BETWEEN",
                  "NOT_BETWEEN"
                ],
                "example": "BETWEEN",
                "type": "string"
              },
              "to": {
                "example": 999,
                "type": "number"
              },
              "treatNullValuesAs": {
                "example": 0,
                "type": "number"
              }
            },
            "required": [
              "from",
              "operator",
              "to",
              "measure"
            ],
            "type": "object"
          }
        },
        "required": [
          "rangeMeasureValueFilter"
        ],
        "type": "object"
      },
      "RankingFilter": {
        "description": "Filter the result on top/bottom N values according to given metric(s).",
        "properties": {
          "rankingFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "measures": {
                "items": {
                  "$ref": "#/components/schemas/AfmIdentifier"
                },
                "type": "array"
              },
              "operator": {
                "enum": [
                  "TOP",
                  "BOTTOM"
                ],
                "type": "string"
              },
              "value": {
                "example": 5,
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "measures",
              "operator",
              "value"
            ],
            "type": "object"
          }
        },
        "required": [
          "rankingFilter"
        ],
        "type": "object"
      },
      "RelativeDateFilter": {
        "description": "A date filter specifying a time interval that is relative to the current date. For example, last week, next month, and so on. Field dataset is representing qualifier of date dimension.",
        "properties": {
          "relativeDateFilter": {
            "properties": {
              "applyOnResult": {
                "type": "boolean"
              },
              "dataset": {
                "$ref": "#/components/schemas/AfmObjectIdentifierDataset"
              },
              "from": {
                "description": "Start of the filtering interval. Specified by number of periods (with respect to given granularity). Typically negative (historical time interval like -2 for '2 days/weeks, ... ago').",
                "example": -6,
                "format": "int32",
                "type": "integer"
              },
              "granularity": {
                "description": "Date granularity specifying particular date attribute in given dimension.",
                "enum": [
                  "MINUTE",
                  "HOUR",
                  "DAY",
                  "WEEK",
                  "MONTH",
                  "QUARTER",
                  "YEAR",
                  "MINUTE_OF_HOUR",
                  "HOUR_OF_DAY",
                  "DAY_OF_WEEK",
                  "DAY_OF_MONTH",
                  "DAY_OF_YEAR",
                  "WEEK_OF_YEAR",
                  "MONTH_OF_YEAR",
                  "QUARTER_OF_YEAR"
                ],
                "example": "DAY",
                "type": "string"
              },
              "to": {
                "description": "End of the filtering interval. Specified by number of periods (with respect to given granularity). Value 'O' is representing current time-interval (current day, week, ...).",
                "example": 0,
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "from",
              "granularity",
              "to",
              "dataset"
            ],
            "type": "object"
          }
        },
        "required": [
          "relativeDateFilter"
        ],
        "type": "object"
      },
      "RestApiIdentifier": {
        "description": "Object identifier.",
        "properties": {
          "id": {
            "example": "sample_item.price",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "type": {
            "example": "fact",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "ResultCacheMetadata": {
        "description": "All execution result's metadata used for calculation including ExecutionResponse",
        "properties": {
          "afm": {
            "$ref": "#/components/schemas/AFM"
          },
          "executionResponse": {
            "$ref": "#/components/schemas/ExecutionResponse"
          },
          "resultSize": {
            "format": "int64",
            "type": "integer"
          },
          "resultSpec": {
            "$ref": "#/components/schemas/ResultSpec"
          }
        },
        "required": [
          "afm",
          "executionResponse",
          "resultSize",
          "resultSpec"
        ],
        "type": "object"
      },
      "ResultDimension": {
        "properties": {
          "headers": {
            "items": {
              "$ref": "#/components/schemas/ResultDimensionHeader"
            },
            "type": "array"
          },
          "localIdentifier": {
            "type": "string"
          }
        },
        "required": [
          "headers",
          "localIdentifier"
        ],
        "type": "object"
      },
      "ResultDimensionHeader": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/MeasureGroupHeaders"
          },
          {
            "$ref": "#/components/schemas/AttributeHeaderOut"
          }
        ],
        "type": "object"
      },
      "ResultSpec": {
        "description": "Specifies how the result data will be formatted (```dimensions```) and which additional data shall be computed (```totals```).",
        "properties": {
          "dimensions": {
            "items": {
              "$ref": "#/components/schemas/Dimension"
            },
            "type": "array"
          },
          "totals": {
            "items": {
              "$ref": "#/components/schemas/Total"
            },
            "type": "array"
          }
        },
        "required": [
          "dimensions"
        ],
        "type": "object"
      },
      "SimpleMeasureDefinition": {
        "properties": {
          "measure": {
            "properties": {
              "aggregation": {
                "description": "Definition of aggregation type of the metric.",
                "enum": [
                  "SUM",
                  "COUNT",
                  "AVG",
                  "MIN",
                  "MAX",
                  "MEDIAN",
                  "RUNSUM",
                  "APPROXIMATE_COUNT"
                ],
                "example": "SUM",
                "type": "string"
              },
              "computeRatio": {
                "default": false,
                "description": "If true compute the percentage of given metric values (broken down by AFM attributes) to the total (not broken down).",
                "example": true,
                "type": "boolean"
              },
              "filters": {
                "description": "Metrics can be filtered by attribute filters with the same interface as ones for global AFM. Note that only one DateFilter is allowed.",
                "items": {
                  "$ref": "#/components/schemas/FilterDefinitionForSimpleMeasure"
                },
                "type": "array"
              },
              "item": {
                "$ref": "#/components/schemas/AfmObjectIdentifierCore"
              }
            },
            "required": [
              "item"
            ],
            "type": "object"
          }
        },
        "required": [
          "measure"
        ],
        "type": "object"
      },
      "SortKey": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SortKeyAttribute"
          },
          {
            "$ref": "#/components/schemas/SortKeyValue"
          },
          {
            "$ref": "#/components/schemas/SortKeyTotal"
          }
        ],
        "type": "object"
      },
      "SortKeyAttribute": {
        "description": "Sorting rule for sorting by attribute value in current dimension.",
        "properties": {
          "attribute": {
            "properties": {
              "attributeIdentifier": {
                "description": "Item reference (to 'itemIdentifiers') referencing, which item should be used for sorting. Only references to attributes are allowed.",
                "example": "attribute1",
                "type": "string"
              },
              "direction": {
                "description": "Sorting elements - ascending/descending order.",
                "enum": [
                  "ASC",
                  "DESC"
                ],
                "type": "string"
              },
              "sortType": {
                "default": "DEFAULT",
                "description": "Mechanism by which this attribute should be sorted. Available options are:\n- DEFAULT: sorting based on default rules (using sort column if defined, otherwise this label) \n- LABEL: sorting by this label values \n- ATTRIBUTE: sorting by values of this label's attribute (or rather the primary label) \n- AREA: sorting by area (total or subtotal) corresponding to each attribute value. The area is computed by summing up all metric values in all other dimensions.",
                "enum": [
                  "DEFAULT",
                  "LABEL",
                  "ATTRIBUTE",
                  "AREA"
                ],
                "type": "string"
              }
            },
            "required": [
              "attributeIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "attribute"
        ],
        "type": "object"
      },
      "SortKeyTotal": {
        "description": "Sorting rule for sorting by total value. DataColumnLocators are only required if there is ambiguity. Locator for measureGroup is taken from the metric of the total.",
        "properties": {
          "total": {
            "properties": {
              "dataColumnLocators": {
                "$ref": "#/components/schemas/DataColumnLocators"
              },
              "direction": {
                "description": "Sorting elements - ascending/descending order.",
                "enum": [
                  "ASC",
                  "DESC"
                ],
                "type": "string"
              },
              "totalIdentifier": {
                "type": "string"
              }
            },
            "required": [
              "totalIdentifier"
            ],
            "type": "object"
          }
        },
        "required": [
          "total"
        ],
        "type": "object"
      },
      "SortKeyValue": {
        "description": "Sorting rule for sorting by measure value. DataColumnLocators for each dimension opposite to the sorted one must be specified.",
        "properties": {
          "value": {
            "properties": {
              "dataColumnLocators": {
                "$ref": "#/components/schemas/DataColumnLocators"
              },
              "direction": {
                "description": "Sorting elements - ascending/descending order.",
                "enum": [
                  "ASC",
                  "DESC"
                ],
                "type": "string"
              }
            },
            "required": [
              "dataColumnLocators"
            ],
            "type": "object"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "Total": {
        "description": "Definition of a total. There are two types of totals: grand totals and subtotals. Grand total data will be returned in a separate section of the result structure while subtotals are fully integrated into the main result data. The mechanism for this distinction is automatic and it's described in `TotalDimension`",
        "properties": {
          "function": {
            "description": "Aggregation function to compute the total.",
            "enum": [
              "SUM",
              "MIN",
              "MAX",
              "AVG",
              "MED"
            ],
            "example": "SUM",
            "type": "string"
          },
          "localIdentifier": {
            "description": "Total identification within this request. Used e.g. in sorting by a total.",
            "example": "firstTotal",
            "type": "string"
          },
          "metric": {
            "description": "The metric for which the total will be computed",
            "example": "metric_1",
            "type": "string"
          },
          "totalDimensions": {
            "items": {
              "$ref": "#/components/schemas/TotalDimension"
            },
            "type": "array"
          }
        },
        "required": [
          "function",
          "localIdentifier",
          "metric",
          "totalDimensions"
        ],
        "type": "object"
      },
      "TotalDimension": {
        "description": "A list of dimensions across which the total will be computed. Total headers for only these dimensions will be returned in the result.",
        "properties": {
          "dimensionIdentifier": {
            "description": "An identifier of a dimension for which the total will be computed.",
            "example": "firstDimension",
            "pattern": "^[.a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "totalDimensionItems": {
            "description": "List of dimension items which will be used for total computation. The total is a grand total in this dimension if the list is empty or it includes the first dimension item from the dimension definition, and its data and header will be returned in a separate `ExecutionResultGrandTotal` structure. Otherwise, it is a subtotal and the data will be integrated into the main result.",
            "example": [
              "measureGroup"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "dimensionIdentifier",
          "totalDimensionItems"
        ],
        "type": "object"
      },
      "TotalExecutionResultHeader": {
        "properties": {
          "totalHeader": {
            "$ref": "#/components/schemas/TotalResultHeader"
          }
        },
        "required": [
          "totalHeader"
        ],
        "type": "object"
      },
      "TotalResultHeader": {
        "description": "Header containing the information related to a subtotal.",
        "properties": {
          "function": {
            "type": "string"
          }
        },
        "required": [
          "function"
        ],
        "type": "object"
      },
      "ValidateByItem": {
        "nullable": true,
        "properties": {
          "id": {
            "description": "Specifies entity used for valid elements computation.",
            "type": "string"
          },
          "type": {
            "description": "Specifies entity type which could be label, attribute, fact, or metric.",
            "pattern": "^(label)|(attribute)|(fact)|(metric)$",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/computeValidDescendants": {
      "post": {
        "description": "(BETA) Returns map of lists of attributes that can be used as descendants of the given attributes.",
        "operationId": "computeValidDescendants",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AfmValidDescendantsQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AfmValidDescendantsResponse"
                }
              }
            },
            "description": "Map of lists of attributes valid as descendants of the given attributes."
          }
        },
        "summary": "(BETA) Valid descendants",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to analyze data.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/computeValidObjects": {
      "post": {
        "description": "Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.",
        "operationId": "computeValidObjects",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AfmValidObjectsQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AfmValidObjectsResponse"
                }
              }
            },
            "description": "List of attributes, facts and metrics valid with respect to given AFM."
          }
        },
        "summary": "Valid objects",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to analyze data.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute": {
      "post": {
        "description": "AFM is a combination of attributes, measures and filters that describe a query you want to execute.",
        "operationId": "computeReport",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Ignore all caches during execution of current request.",
            "in": "header",
            "name": "skip-cache",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "example": "2020-06-03T10:15:30+01:00",
            "in": "header",
            "name": "timestamp",
            "required": false,
            "schema": {
              "format": "timestamp",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AfmExecution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AfmExecutionResponse"
                }
              }
            },
            "description": "AFM Execution response with links to the result and server-enhanced dimensions from the original request."
          }
        },
        "summary": "Executes analytical request and returns link to the result",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to view a report or label elements.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute/result/{resultId}": {
      "get": {
        "description": "Gets a single execution result.",
        "operationId": "retrieveResult",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Result ID",
            "example": "a9b28f9dc55f37ea9f4a5fb0c76895923591e781",
            "in": "path",
            "name": "resultId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Request page with these offsets. Format is offset=1,2,3,... - one offset for each dimensions in ResultSpec from originating AFM.",
            "example": "offset=1,10",
            "explode": false,
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Return only this number of items. Format is limit=1,2,3,... - one limit for each dimensions in ResultSpec from originating AFM.",
            "example": "limit=1,10",
            "explode": false,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Identifiers of the dimensions where grand total data should not be returned for this request. A grand total will not be returned if all of its totalDimensions are in excludedTotalDimensions.",
            "example": "excludedTotalDimensions=dim_0,dim_1",
            "explode": false,
            "in": "query",
            "name": "excludedTotalDimensions",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionResult"
                }
              }
            },
            "description": "Execution result was found and returned."
          }
        },
        "summary": "Get a single execution result",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to view a report or label elements.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/execute/result/{resultId}/metadata": {
      "get": {
        "description": "The resource provides execution result's metadata as AFM and resultSpec used in execution request and an executionResponse",
        "operationId": "retrieveExecutionMetadata",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Result ID",
            "example": "a9b28f9dc55f37ea9f4a5fb0c76895923591e781",
            "in": "path",
            "name": "resultId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultCacheMetadata"
                }
              }
            },
            "description": "Execution result's metadata was found and returned."
          }
        },
        "summary": "Get a single execution result's metadata.",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to analyze data.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/afm/explain": {
      "post": {
        "description": "The resource provides static structures needed for investigation of a problem with given AFM.",
        "operationId": "explainAFM",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Requested explain type. If not specified all types are bundled in a ZIP archive.\n\n`MAQL` - MAQL Abstract Syntax Tree, execution dimensions and related info\n\n`GRPC_MODEL` - Datasets used in execution\n\n`GRPC_MODEL_SVG` - Generated SVG image of the datasets\n\n`WDF` - Workspace data filters in execution workspace context\n\n`QT` - Query Tree, created from MAQL AST using Logical Data Model,  contains all information needed to generate SQL\n\n`QT_SVG` - Generated SVG image of the Query Tree\n\n`OPT_QT` - Optimized Query Tree\n\n`OPT_QT_SVG` - Generated SVG image of the Optimized Query Tree\n\n`SQL` - Final SQL to be executed\n\n`SETTINGS` - Settings used to execute explain request",
            "in": "query",
            "name": "explainType",
            "required": false,
            "schema": {
              "enum": [
                "MAQL",
                "GRPC_MODEL",
                "GRPC_MODEL_SVG",
                "WDF",
                "QT",
                "QT_SVG",
                "OPT_QT",
                "OPT_QT_SVG",
                "SQL",
                "SETTINGS"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AfmExecution"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {},
              "application/sql": {},
              "application/zip": {
                "schema": {
                  "description": "ZIP with MAQL, GRPC_MODEL, GRPC_MODEL_SVG, WDF, QT, QT_SVG, OPT_QT, OPT_QT_SVG and SQL files",
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/svg+xml": {}
            },
            "description": "Requested resource"
          }
        },
        "summary": "AFM explain resource.",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to analyze data.",
          "permissions": [
            "ANALYZE"
          ]
        }
      }
    },
    "/api/v1/actions/workspaces/{workspaceId}/execution/collectLabelElements": {
      "post": {
        "description": "Returns paged list of elements (values) of given label satisfying given filtering criteria.",
        "operationId": "computeLabelElementsPost",
        "parameters": [
          {
            "description": "Workspace identifier",
            "in": "path",
            "name": "workspaceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          },
          {
            "description": "Request page with this offset. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "maximum": 10000,
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Return only this number of items. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "format": "int32",
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Ignore all caches during execution of current request.",
            "in": "header",
            "name": "skip-cache",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementsResponse"
                }
              }
            },
            "description": "List of label values."
          }
        },
        "summary": "Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.",
        "tags": [
          "Computation",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to view a report or label elements.",
          "permissions": [
            "VIEW"
          ]
        }
      }
    }
  },
  "servers": [
    {
      "description": "GoodData.CN endpoint",
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "| execution of some form of computation (RPC over JSON)",
      "name": "actions"
    }
  ]
}
