{
  "components": {
    "schemas": {
      "ColumnLocation": {
        "type": "object"
      },
      "ColumnStatistic": {
        "properties": {
          "type": {
            "enum": [
              "COUNT",
              "COUNT_NULL",
              "COUNT_UNIQUE",
              "AVG",
              "STDDEV",
              "MIN",
              "MAX",
              "PERCENTILE_25",
              "PERCENTILE_50",
              "PERCENTILE_75"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "ColumnStatisticWarning": {
        "properties": {
          "action": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "action",
          "message"
        ],
        "type": "object"
      },
      "ColumnStatisticsRequest": {
        "description": "A request to retrieve statistics for a column.",
        "properties": {
          "columnName": {
            "type": "string"
          },
          "frequency": {
            "$ref": "#/components/schemas/FrequencyProperties"
          },
          "from": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SqlQuery"
              },
              {
                "$ref": "#/components/schemas/Table"
              }
            ]
          },
          "histogram": {
            "$ref": "#/components/schemas/HistogramProperties"
          },
          "statistics": {
            "items": {
              "enum": [
                "COUNT",
                "COUNT_NULL",
                "COUNT_UNIQUE",
                "AVG",
                "STDDEV",
                "MIN",
                "MAX",
                "PERCENTILE_25",
                "PERCENTILE_50",
                "PERCENTILE_75"
              ],
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "required": [
          "columnName",
          "from"
        ],
        "type": "object"
      },
      "ColumnStatisticsResponse": {
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/Frequency"
          },
          "histogram": {
            "$ref": "#/components/schemas/Histogram"
          },
          "statistics": {
            "items": {
              "$ref": "#/components/schemas/ColumnStatistic"
            },
            "type": "array"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/ColumnStatisticWarning"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ColumnWarning": {
        "description": "Warning related to single column.",
        "properties": {
          "message": {
            "description": "Warning message related to the column.",
            "type": "string"
          },
          "name": {
            "description": "Column name.",
            "type": "string"
          }
        },
        "required": [
          "message",
          "name"
        ],
        "type": "object"
      },
      "DataSourceParameter": {
        "description": "A parameter for testing data source connection",
        "properties": {
          "name": {
            "description": "Parameter name.",
            "type": "string"
          },
          "value": {
            "description": "Parameter value.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "DataSourceSchemata": {
        "description": "Result of getSchemata. Contains list of available DB schema names.",
        "properties": {
          "schemaNames": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "schemaNames"
        ],
        "type": "object"
      },
      "DeclarativeColumn": {
        "description": "A table column.",
        "properties": {
          "dataType": {
            "description": "Column type",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "INT",
            "type": "string"
          },
          "isPrimaryKey": {
            "description": "Is column part of primary key?",
            "type": "boolean"
          },
          "name": {
            "description": "Column name",
            "example": "customer_id",
            "maxLength": 255,
            "pattern": "^[^\u0000]*$",
            "type": "string"
          },
          "referencedTableColumn": {
            "description": "Referenced table (Foreign key)",
            "example": "customer_id",
            "maxLength": 255,
            "type": "string"
          },
          "referencedTableId": {
            "description": "Referenced table (Foreign key)",
            "example": "customers",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "name"
        ],
        "type": "object"
      },
      "DeclarativeTable": {
        "description": "A database table.",
        "properties": {
          "columns": {
            "description": "An array of physical columns",
            "items": {
              "$ref": "#/components/schemas/DeclarativeColumn"
            },
            "type": "array"
          },
          "id": {
            "description": "Table id.",
            "example": "customers",
            "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
            "type": "string"
          },
          "namePrefix": {
            "description": "Table or view name prefix used in scan. Will be stripped when generating LDM.",
            "example": "out_gooddata",
            "maxLength": 255,
            "type": "string"
          },
          "path": {
            "description": "Path to table.",
            "example": [
              "table_schema",
              "table_name"
            ],
            "items": {
              "example": "table_name",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "Table type: TABLE or VIEW.",
            "example": "TABLE",
            "type": "string"
          }
        },
        "required": [
          "columns",
          "id",
          "path",
          "type"
        ],
        "type": "object"
      },
      "DeclarativeTables": {
        "description": "A physical data model (PDM) tables.",
        "properties": {
          "tables": {
            "description": "An array of physical database tables.",
            "items": {
              "$ref": "#/components/schemas/DeclarativeTable"
            },
            "type": "array"
          }
        },
        "required": [
          "tables"
        ],
        "type": "object"
      },
      "Frequency": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/FrequencyBucket"
            },
            "type": "array"
          }
        },
        "required": [
          "buckets"
        ],
        "type": "object"
      },
      "FrequencyBucket": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "count"
        ],
        "type": "object"
      },
      "FrequencyProperties": {
        "properties": {
          "valueLimit": {
            "default": 10,
            "description": "The maximum number of distinct values to return.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Histogram": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/HistogramBucket"
            },
            "type": "array"
          }
        },
        "required": [
          "buckets"
        ],
        "type": "object"
      },
      "HistogramBucket": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          },
          "lowerBound": {
            "format": "double",
            "type": "number"
          },
          "upperBound": {
            "format": "double",
            "type": "number"
          }
        },
        "required": [
          "count",
          "lowerBound",
          "upperBound"
        ],
        "type": "object"
      },
      "HistogramProperties": {
        "properties": {
          "bucketCount": {
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "bucketCount"
        ],
        "type": "object"
      },
      "ScanRequest": {
        "description": "A request containing all information critical to model scanning.",
        "properties": {
          "scanTables": {
            "description": "A flag indicating whether the tables should be scanned.",
            "example": true,
            "type": "boolean"
          },
          "scanViews": {
            "description": "A flag indicating whether the views should be scanned.",
            "example": true,
            "type": "boolean"
          },
          "schemata": {
            "description": "What schemata will be scanned.",
            "example": [
              "tpch",
              "demo"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "separator": {
            "description": "A separator between prefixes and the names.",
            "example": "__",
            "type": "string"
          },
          "tablePrefix": {
            "description": "Tables starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.",
            "example": "out_table",
            "type": "string"
          },
          "viewPrefix": {
            "description": "Views starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.",
            "example": "out_view",
            "type": "string"
          }
        },
        "required": [
          "scanTables",
          "scanViews",
          "separator"
        ],
        "type": "object"
      },
      "ScanResultPdm": {
        "description": "Result of scan of data source physical model.",
        "properties": {
          "pdm": {
            "$ref": "#/components/schemas/DeclarativeTables"
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/TableWarning"
            },
            "type": "array"
          }
        },
        "required": [
          "pdm",
          "warnings"
        ],
        "type": "object"
      },
      "ScanSqlRequest": {
        "description": "A request with SQL query to by analyzed.",
        "properties": {
          "sql": {
            "description": "SQL query to be analyzed.",
            "example": "SELECT a.special_value as result FROM tableA a",
            "type": "string"
          }
        },
        "required": [
          "sql"
        ],
        "type": "object"
      },
      "ScanSqlResponse": {
        "description": "Result of scanSql. Consists of array of query columns including type. Sql query result data preview can be attached optionally",
        "properties": {
          "columns": {
            "description": "Array of columns with types.",
            "items": {
              "$ref": "#/components/schemas/SqlColumn"
            },
            "type": "array"
          },
          "dataPreview": {
            "description": "Array of rows where each row is another array of string values.",
            "items": {
              "items": {
                "nullable": true,
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "columns"
        ],
        "type": "object"
      },
      "SqlColumn": {
        "description": "A SQL query result column.",
        "properties": {
          "dataType": {
            "description": "Column type",
            "enum": [
              "INT",
              "STRING",
              "DATE",
              "NUMERIC",
              "TIMESTAMP",
              "TIMESTAMP_TZ",
              "BOOLEAN"
            ],
            "example": "INT",
            "type": "string"
          },
          "name": {
            "description": "Column name",
            "example": "customer_id",
            "type": "string"
          }
        },
        "required": [
          "dataType",
          "name"
        ],
        "type": "object"
      },
      "SqlQuery": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ColumnLocation"
          },
          {
            "properties": {
              "sql": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "sql"
        ],
        "type": "object"
      },
      "Table": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ColumnLocation"
          },
          {
            "properties": {
              "tableName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "tableName"
        ],
        "type": "object"
      },
      "TableWarning": {
        "description": "Warnings related to single table.",
        "properties": {
          "columns": {
            "items": {
              "$ref": "#/components/schemas/ColumnWarning"
            },
            "type": "array"
          },
          "message": {
            "description": "Warning message related to the table.",
            "type": "string"
          },
          "name": {
            "description": "Table name.",
            "type": "string"
          }
        },
        "required": [
          "columns",
          "name"
        ],
        "type": "object"
      },
      "TestDefinitionRequest": {
        "description": "A request containing all information for testing data source definition.",
        "properties": {
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/DataSourceParameter"
            },
            "type": "array"
          },
          "password": {
            "description": "Database user password.",
            "example": "admin123",
            "type": "string"
          },
          "schema": {
            "description": "Database schema.",
            "example": "public",
            "type": "string"
          },
          "token": {
            "description": "Secret for token based authentication for data sources which supports it.",
            "type": "string"
          },
          "type": {
            "description": "Type of database, where test should connect to.",
            "enum": [
              "POSTGRESQL",
              "REDSHIFT",
              "VERTICA",
              "SNOWFLAKE",
              "ADS",
              "BIGQUERY",
              "MSSQL",
              "PRESTO",
              "DREMIO",
              "DRILL",
              "GREENPLUM",
              "AZURESQL",
              "SYNAPSESQL",
              "DATABRICKS",
              "GDSTORAGE",
              "CLICKHOUSE",
              "MYSQL",
              "MARIADB",
              "ORACLE",
              "PINOT",
              "SINGLESTORE",
              "MOTHERDUCK"
            ],
            "example": "POSTGRESQL",
            "type": "string"
          },
          "url": {
            "description": "URL to database in JDBC format, where test should connect to.",
            "example": "jdbc:postgresql://localhost:5432/db_name",
            "type": "string"
          },
          "username": {
            "description": "Database user name.",
            "example": "dbadmin",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "TestQueryDuration": {
        "description": "A structure containing duration of the test queries run on a data source. It is omitted if an error happens.",
        "properties": {
          "createCacheTable": {
            "description": "Field containing duration of a test 'create table as select' query on a datasource. In milliseconds. The field is omitted if a data source doesn't support caching.",
            "example": 235,
            "format": "int32",
            "type": "integer"
          },
          "simpleSelect": {
            "description": "Field containing duration of a test select query on a data source. In milliseconds.",
            "example": 562,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "simpleSelect"
        ],
        "type": "object"
      },
      "TestRequest": {
        "description": "A request containing all information for testing existing data source.",
        "properties": {
          "cachePath": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enableCaching": {
            "description": "Enable caching of intermediate results.",
            "example": false,
            "type": "boolean"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/DataSourceParameter"
            },
            "type": "array"
          },
          "password": {
            "description": "Database user password.",
            "example": "admin123",
            "type": "string"
          },
          "schema": {
            "description": "Database schema.",
            "example": "public",
            "type": "string"
          },
          "token": {
            "description": "Secret for token based authentication for data sources which supports it.",
            "type": "string"
          },
          "url": {
            "description": "URL to database in JDBC format, where test should connect to.",
            "example": "jdbc:postgresql://localhost:5432/db_name",
            "type": "string"
          },
          "username": {
            "description": "Database user name.",
            "example": "dbadmin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestResponse": {
        "description": "Response from data source testing.",
        "properties": {
          "error": {
            "description": "Field containing more details in case of a failure. Details are available to a privileged user only.",
            "example": "Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \"user\"",
            "type": "string"
          },
          "queryDurationMillis": {
            "$ref": "#/components/schemas/TestQueryDuration"
          },
          "successful": {
            "description": "A flag indicating whether test passed or not.",
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "successful"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "title": "OpenAPI definition",
    "version": "v0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/api/v1/actions/dataSource/test": {
      "post": {
        "description": "Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.",
        "operationId": "testDataSourceDefinition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestDefinitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful connection": {
                    "description": "An example of a successful connection",
                    "value": {
                      "queryDurationMillis": {
                        "createCacheTable": 235,
                        "simpleSelect": 562
                      },
                      "successful": true
                    }
                  },
                  "An example of an unsuccessful connection": {
                    "description": "An example of an unsuccessful connection",
                    "value": {
                      "error": "Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \"user\"",
                      "successful": false
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            },
            "description": "The result of the test of a data source connection."
          }
        },
        "summary": "Test connection by data source definition",
        "tags": [
          "Test Connection",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal organization permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/computeColumnStatistics": {
      "post": {
        "description": "(EXPERIMENTAL) Computes the requested statistical parameters of a column in a data source.",
        "operationId": "columnStatistics",
        "parameters": [
          {
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColumnStatisticsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnStatisticsResponse"
                }
              }
            },
            "description": "OK"
          }
        },
        "summary": "(EXPERIMENTAL) Compute column statistics",
        "tags": [
          "actions"
        ]
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/scan": {
      "post": {
        "description": "It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.",
        "operationId": "scanDataSource",
        "parameters": [
          {
            "description": "Data source id",
            "example": "myPostgres",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful scan": {
                    "description": "An example of a successful scan",
                    "value": {
                      "pdm": {
                        "tables": [
                          {
                            "columns": [
                              {
                                "dataType": "NUMERIC",
                                "isPrimaryKey": false,
                                "name": "budget"
                              },
                              {
                                "dataType": "STRING",
                                "isPrimaryKey": false,
                                "name": "category"
                              },
                              {
                                "dataType": "NUMERIC",
                                "isPrimaryKey": false,
                                "name": "spend"
                              }
                            ],
                            "id": "campaign_channels",
                            "path": [
                              "demo",
                              "campaign_channels"
                            ],
                            "type": "TABLE"
                          }
                        ]
                      },
                      "warnings": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ScanResultPdm"
                }
              }
            },
            "description": "The result of the scan."
          }
        },
        "summary": "Scan a database to get a physical data model (PDM)",
        "tags": [
          "Scanning",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "USE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/scanSchemata": {
      "get": {
        "description": "It scans a database and reads metadata. The result of the request contains a list of schema names of a database.",
        "operationId": "getDataSourceSchemata",
        "parameters": [
          {
            "description": "Data source id",
            "example": "myPostgres",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful scan": {
                    "description": "An example of a successful scan",
                    "value": {
                      "schemaNames": [
                        "demo",
                        "public"
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DataSourceSchemata"
                }
              }
            },
            "description": "The result of the scan schemata"
          }
        },
        "summary": "Get a list of schema names of a database",
        "tags": [
          "Scanning",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/scanSql": {
      "post": {
        "description": "It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query",
        "operationId": "scanSql",
        "parameters": [
          {
            "description": "Data source id",
            "example": "myPostgres",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanSqlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful scan": {
                    "description": "An example of a successful scan",
                    "value": {
                      "columns": [
                        {
                          "dataType": "NUMERIC",
                          "name": "budget"
                        },
                        {
                          "dataType": "STRING",
                          "name": "category"
                        },
                        {
                          "dataType": "NUMERIC",
                          "name": "spend"
                        }
                      ],
                      "dataPreview": [
                        [
                          "1000",
                          "campaign1",
                          "458.8"
                        ],
                        [
                          "1800",
                          "campaign2",
                          "144"
                        ]
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ScanSqlResponse"
                }
              }
            },
            "description": "The result of the scan."
          }
        },
        "summary": "Collect metadata about SQL query",
        "tags": [
          "Scanning",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Minimal permission required to use this endpoint.",
          "permissions": [
            "MANAGE"
          ]
        }
      }
    },
    "/api/v1/actions/dataSources/{dataSourceId}/test": {
      "post": {
        "description": "Test if it is possible to connect to a database using an existing data source definition.",
        "operationId": "testDataSource",
        "parameters": [
          {
            "description": "Data source id",
            "example": "myPostgres",
            "in": "path",
            "name": "dataSourceId",
            "required": true,
            "schema": {
              "pattern": "^(?!\\.)[.A-Za-z0-9_-]{1,255}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "An example of a successful connection": {
                    "description": "An example of a successful connection",
                    "value": {
                      "queryDurationMillis": {
                        "createCacheTable": 235,
                        "simpleSelect": 562
                      },
                      "successful": true
                    }
                  },
                  "An example of an unsuccessful connection": {
                    "description": "An example of an unsuccessful connection",
                    "value": {
                      "error": "Connection exception: Failed to initialize pool: FATAL: password authentication failed for user \"user\"",
                      "successful": false
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            },
            "description": "The result of the test of a data source connection."
          }
        },
        "summary": "Test data source connection by data source id",
        "tags": [
          "Test Connection",
          "actions"
        ],
        "x-gdc-security-info": {
          "description": "Permissions required to test a data source.",
          "permissions": [
            "USE"
          ]
        }
      }
    }
  },
  "servers": [
    {
      "description": "GoodData.CN endpoint",
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "| execution of some form of computation (RPC over JSON)",
      "name": "actions"
    }
  ]
}
