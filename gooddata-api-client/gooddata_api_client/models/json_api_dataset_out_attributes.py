# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.json_api_dataset_out_attributes_grain_inner import JsonApiDatasetOutAttributesGrainInner
from gooddata_api_client.models.json_api_dataset_out_attributes_reference_properties_inner import JsonApiDatasetOutAttributesReferencePropertiesInner
from gooddata_api_client.models.json_api_dataset_out_attributes_sql import JsonApiDatasetOutAttributesSql
from gooddata_api_client.models.json_api_dataset_out_attributes_workspace_data_filter_columns_inner import JsonApiDatasetOutAttributesWorkspaceDataFilterColumnsInner
from gooddata_api_client.models.json_api_dataset_out_attributes_workspace_data_filter_references_inner import JsonApiDatasetOutAttributesWorkspaceDataFilterReferencesInner
from typing import Optional, Set
from typing_extensions import Self

class JsonApiDatasetOutAttributes(BaseModel):
    """
    JsonApiDatasetOutAttributes
    """ # noqa: E501
    are_relations_valid: Optional[StrictBool] = Field(default=None, alias="areRelationsValid")
    data_source_table_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="dataSourceTableId")
    data_source_table_path: Optional[List[Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="Path to database table.", alias="dataSourceTablePath")
    description: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = None
    grain: Optional[List[JsonApiDatasetOutAttributesGrainInner]] = None
    precedence: Optional[StrictInt] = None
    reference_properties: Optional[List[JsonApiDatasetOutAttributesReferencePropertiesInner]] = Field(default=None, alias="referenceProperties")
    sql: Optional[JsonApiDatasetOutAttributesSql] = None
    tags: Optional[List[StrictStr]] = None
    title: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    type: StrictStr
    workspace_data_filter_columns: Optional[List[JsonApiDatasetOutAttributesWorkspaceDataFilterColumnsInner]] = Field(default=None, alias="workspaceDataFilterColumns")
    workspace_data_filter_references: Optional[List[JsonApiDatasetOutAttributesWorkspaceDataFilterReferencesInner]] = Field(default=None, alias="workspaceDataFilterReferences")
    __properties: ClassVar[List[str]] = ["areRelationsValid", "dataSourceTableId", "dataSourceTablePath", "description", "grain", "precedence", "referenceProperties", "sql", "tags", "title", "type", "workspaceDataFilterColumns", "workspaceDataFilterReferences"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['NORMAL', 'DATE']):
            raise ValueError("must be one of enum values ('NORMAL', 'DATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiDatasetOutAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grain (list)
        _items = []
        if self.grain:
            for _item_grain in self.grain:
                if _item_grain:
                    _items.append(_item_grain.to_dict())
            _dict['grain'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reference_properties (list)
        _items = []
        if self.reference_properties:
            for _item_reference_properties in self.reference_properties:
                if _item_reference_properties:
                    _items.append(_item_reference_properties.to_dict())
            _dict['referenceProperties'] = _items
        # override the default output from pydantic by calling `to_dict()` of sql
        if self.sql:
            _dict['sql'] = self.sql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in workspace_data_filter_columns (list)
        _items = []
        if self.workspace_data_filter_columns:
            for _item_workspace_data_filter_columns in self.workspace_data_filter_columns:
                if _item_workspace_data_filter_columns:
                    _items.append(_item_workspace_data_filter_columns.to_dict())
            _dict['workspaceDataFilterColumns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workspace_data_filter_references (list)
        _items = []
        if self.workspace_data_filter_references:
            for _item_workspace_data_filter_references in self.workspace_data_filter_references:
                if _item_workspace_data_filter_references:
                    _items.append(_item_workspace_data_filter_references.to_dict())
            _dict['workspaceDataFilterReferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiDatasetOutAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "areRelationsValid": obj.get("areRelationsValid"),
            "dataSourceTableId": obj.get("dataSourceTableId"),
            "dataSourceTablePath": obj.get("dataSourceTablePath"),
            "description": obj.get("description"),
            "grain": [JsonApiDatasetOutAttributesGrainInner.from_dict(_item) for _item in obj["grain"]] if obj.get("grain") is not None else None,
            "precedence": obj.get("precedence"),
            "referenceProperties": [JsonApiDatasetOutAttributesReferencePropertiesInner.from_dict(_item) for _item in obj["referenceProperties"]] if obj.get("referenceProperties") is not None else None,
            "sql": JsonApiDatasetOutAttributesSql.from_dict(obj["sql"]) if obj.get("sql") is not None else None,
            "tags": obj.get("tags"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "workspaceDataFilterColumns": [JsonApiDatasetOutAttributesWorkspaceDataFilterColumnsInner.from_dict(_item) for _item in obj["workspaceDataFilterColumns"]] if obj.get("workspaceDataFilterColumns") is not None else None,
            "workspaceDataFilterReferences": [JsonApiDatasetOutAttributesWorkspaceDataFilterReferencesInner.from_dict(_item) for _item in obj["workspaceDataFilterReferences"]] if obj.get("workspaceDataFilterReferences") is not None else None
        })
        return _obj


