# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.json_api_workspace_in_attributes_data_source import JsonApiWorkspaceInAttributesDataSource
from typing import Optional, Set
from typing_extensions import Self

class JsonApiWorkspaceInAttributes(BaseModel):
    """
    JsonApiWorkspaceInAttributes
    """ # noqa: E501
    cache_extra_limit: Optional[StrictInt] = Field(default=None, alias="cacheExtraLimit")
    data_source: Optional[JsonApiWorkspaceInAttributesDataSource] = Field(default=None, alias="dataSource")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    early_access: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The early access feature identifier. It is used to enable experimental features. Deprecated in favor of earlyAccessValues.", alias="earlyAccess")
    early_access_values: Optional[List[Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="The early access feature identifiers. They are used to enable experimental features.", alias="earlyAccessValues")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    prefix: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Custom prefix of entity identifiers in workspace")
    __properties: ClassVar[List[str]] = ["cacheExtraLimit", "dataSource", "description", "earlyAccess", "earlyAccessValues", "name", "prefix"]

    @field_validator('prefix')
    def prefix_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiWorkspaceInAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_source
        if self.data_source:
            _dict['dataSource'] = self.data_source.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if early_access (nullable) is None
        # and model_fields_set contains the field
        if self.early_access is None and "early_access" in self.model_fields_set:
            _dict['earlyAccess'] = None

        # set to None if early_access_values (nullable) is None
        # and model_fields_set contains the field
        if self.early_access_values is None and "early_access_values" in self.model_fields_set:
            _dict['earlyAccessValues'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if prefix (nullable) is None
        # and model_fields_set contains the field
        if self.prefix is None and "prefix" in self.model_fields_set:
            _dict['prefix'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiWorkspaceInAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacheExtraLimit": obj.get("cacheExtraLimit"),
            "dataSource": JsonApiWorkspaceInAttributesDataSource.from_dict(obj["dataSource"]) if obj.get("dataSource") is not None else None,
            "description": obj.get("description"),
            "earlyAccess": obj.get("earlyAccess"),
            "earlyAccessValues": obj.get("earlyAccessValues"),
            "name": obj.get("name"),
            "prefix": obj.get("prefix")
        })
        return _obj


