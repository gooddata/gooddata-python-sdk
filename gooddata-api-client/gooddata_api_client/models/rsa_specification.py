# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RsaSpecification(BaseModel):
    """
    RsaSpecification
    """ # noqa: E501
    alg: StrictStr
    e: StrictStr
    kid: Annotated[str, Field(min_length=0, strict=True, max_length=255)]
    kty: StrictStr
    n: StrictStr
    use: StrictStr
    x5c: Optional[List[StrictStr]] = None
    x5t: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["alg", "e", "kid", "kty", "n", "use", "x5c", "x5t"]

    @field_validator('alg')
    def alg_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['RS256', 'RS384', 'RS512']):
            raise ValueError("must be one of enum values ('RS256', 'RS384', 'RS512')")
        return value

    @field_validator('kid')
    def kid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^.]", value):
            raise ValueError(r"must validate the regular expression /^[^.]/")
        return value

    @field_validator('kty')
    def kty_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['RSA']):
            raise ValueError("must be one of enum values ('RSA')")
        return value

    @field_validator('use')
    def use_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['sig']):
            raise ValueError("must be one of enum values ('sig')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RsaSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RsaSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alg": obj.get("alg"),
            "e": obj.get("e"),
            "kid": obj.get("kid"),
            "kty": obj.get("kty"),
            "n": obj.get("n"),
            "use": obj.get("use"),
            "x5c": obj.get("x5c"),
            "x5t": obj.get("x5t")
        })
        return _obj


