# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.declarative_data_source_permission import DeclarativeDataSourcePermission
from gooddata_api_client.models.parameter import Parameter
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeDataSource(BaseModel):
    """
    A data source and its properties.
    """ # noqa: E501
    authentication_type: Optional[StrictStr] = Field(default=None, description="Type of authentication used to connect to the database.", alias="authenticationType")
    cache_strategy: Optional[StrictStr] = Field(default=None, description="Determines how the results coming from a particular datasource should be cached. - ALWAYS: The results from the datasource should be cached normally (the default). - NEVER: The results from the datasource should never be cached.", alias="cacheStrategy")
    client_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Id of client with permission to connect to the data source.", alias="clientId")
    client_secret: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The client secret to use to connect to the database providing the data for the data source.", alias="clientSecret")
    decoded_parameters: Optional[List[Parameter]] = Field(default=None, alias="decodedParameters")
    id: Annotated[str, Field(strict=True)] = Field(description="Data source ID.")
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Name of the data source.")
    parameters: Optional[List[Parameter]] = None
    password: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Password for the data-source user, property is never returned back.")
    permissions: Optional[List[DeclarativeDataSourcePermission]] = None
    private_key: Optional[Annotated[str, Field(strict=True, max_length=15000)]] = Field(default=None, description="The private key to use to connect to the database providing the data for the data source.", alias="privateKey")
    private_key_passphrase: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The passphrase used to encrypt the private key.", alias="privateKeyPassphrase")
    var_schema: Annotated[str, Field(strict=True, max_length=255)] = Field(description="A scheme/database with the data.", alias="schema")
    token: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = Field(default=None, description="Token as an alternative to username and password.")
    type: StrictStr = Field(description="Type of database.")
    url: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="An connection string relevant to type of database.")
    username: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="User with permission connect the data source/database.")
    __properties: ClassVar[List[str]] = ["authenticationType", "cacheStrategy", "clientId", "clientSecret", "decodedParameters", "id", "name", "parameters", "password", "permissions", "privateKey", "privateKeyPassphrase", "schema", "token", "type", "url", "username"]

    @field_validator('authentication_type')
    def authentication_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USERNAME_PASSWORD', 'TOKEN', 'KEY_PAIR', 'CLIENT_SECRET', 'ACCESS_TOKEN']):
            raise ValueError("must be one of enum values ('USERNAME_PASSWORD', 'TOKEN', 'KEY_PAIR', 'CLIENT_SECRET', 'ACCESS_TOKEN')")
        return value

    @field_validator('cache_strategy')
    def cache_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALWAYS', 'NEVER']):
            raise ValueError("must be one of enum values ('ALWAYS', 'NEVER')")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['POSTGRESQL', 'REDSHIFT', 'VERTICA', 'SNOWFLAKE', 'ADS', 'BIGQUERY', 'MSSQL', 'PRESTO', 'DREMIO', 'DRILL', 'GREENPLUM', 'AZURESQL', 'SYNAPSESQL', 'DATABRICKS', 'GDSTORAGE', 'CLICKHOUSE', 'MYSQL', 'MARIADB', 'ORACLE', 'PINOT', 'SINGLESTORE', 'MOTHERDUCK', 'FLEXCONNECT', 'STARROCKS', 'ATHENA', 'MONGODB']):
            raise ValueError("must be one of enum values ('POSTGRESQL', 'REDSHIFT', 'VERTICA', 'SNOWFLAKE', 'ADS', 'BIGQUERY', 'MSSQL', 'PRESTO', 'DREMIO', 'DRILL', 'GREENPLUM', 'AZURESQL', 'SYNAPSESQL', 'DATABRICKS', 'GDSTORAGE', 'CLICKHOUSE', 'MYSQL', 'MARIADB', 'ORACLE', 'PINOT', 'SINGLESTORE', 'MOTHERDUCK', 'FLEXCONNECT', 'STARROCKS', 'ATHENA', 'MONGODB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeDataSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in decoded_parameters (list)
        _items = []
        if self.decoded_parameters:
            for _item_decoded_parameters in self.decoded_parameters:
                if _item_decoded_parameters:
                    _items.append(_item_decoded_parameters.to_dict())
            _dict['decodedParameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # set to None if authentication_type (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_type is None and "authentication_type" in self.model_fields_set:
            _dict['authenticationType'] = None

        # set to None if private_key (nullable) is None
        # and model_fields_set contains the field
        if self.private_key is None and "private_key" in self.model_fields_set:
            _dict['privateKey'] = None

        # set to None if private_key_passphrase (nullable) is None
        # and model_fields_set contains the field
        if self.private_key_passphrase is None and "private_key_passphrase" in self.model_fields_set:
            _dict['privateKeyPassphrase'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeDataSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authenticationType": obj.get("authenticationType"),
            "cacheStrategy": obj.get("cacheStrategy"),
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "decodedParameters": [Parameter.from_dict(_item) for _item in obj["decodedParameters"]] if obj.get("decodedParameters") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "parameters": [Parameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "password": obj.get("password"),
            "permissions": [DeclarativeDataSourcePermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "privateKey": obj.get("privateKey"),
            "privateKeyPassphrase": obj.get("privateKeyPassphrase"),
            "schema": obj.get("schema"),
            "token": obj.get("token"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "username": obj.get("username")
        })
        return _obj


