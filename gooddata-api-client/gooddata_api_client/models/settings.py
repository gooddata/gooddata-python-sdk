# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.pdf_table_style import PdfTableStyle
from typing import Optional, Set
from typing_extensions import Self

class Settings(BaseModel):
    """
    Additional settings.
    """ # noqa: E501
    export_info: Optional[StrictBool] = Field(default=False, description="If true, the export will contain the information about the export â€“ exported date, filters, etc. Works only with `visualizationObject`. (XLSX, PDF)", alias="exportInfo")
    merge_headers: Optional[StrictBool] = Field(default=None, description="Merge equal headers in neighbouring cells. (XLSX)", alias="mergeHeaders")
    page_orientation: Optional[StrictStr] = Field(default='PORTRAIT', description="Set page orientation. (PDF)", alias="pageOrientation")
    page_size: Optional[StrictStr] = Field(default='A4', description="Set page size. (PDF)", alias="pageSize")
    pdf_page_size: Optional[StrictStr] = Field(default=None, description="Page size and orientation. (PDF)", alias="pdfPageSize")
    pdf_table_style: Optional[List[PdfTableStyle]] = Field(default=None, description="Custom CSS styles for the table. (PDF, HTML)", alias="pdfTableStyle")
    pdf_top_left_content: Optional[StrictStr] = Field(default=None, description="Top left header content. (PDF)", alias="pdfTopLeftContent")
    pdf_top_right_content: Optional[StrictStr] = Field(default=None, description="Top right header content. (PDF)", alias="pdfTopRightContent")
    show_filters: Optional[StrictBool] = Field(default=None, description="Print applied filters on top of the document. (PDF/HTML when visualizationObject is given)", alias="showFilters")
    __properties: ClassVar[List[str]] = ["exportInfo", "mergeHeaders", "pageOrientation", "pageSize", "pdfPageSize", "pdfTableStyle", "pdfTopLeftContent", "pdfTopRightContent", "showFilters"]

    @field_validator('page_orientation')
    def page_orientation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PORTRAIT', 'LANDSCAPE']):
            raise ValueError("must be one of enum values ('PORTRAIT', 'LANDSCAPE')")
        return value

    @field_validator('page_size')
    def page_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['A3', 'A4', 'LETTER']):
            raise ValueError("must be one of enum values ('A3', 'A4', 'LETTER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pdf_table_style (list)
        _items = []
        if self.pdf_table_style:
            for _item_pdf_table_style in self.pdf_table_style:
                if _item_pdf_table_style:
                    _items.append(_item_pdf_table_style.to_dict())
            _dict['pdfTableStyle'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exportInfo": obj.get("exportInfo") if obj.get("exportInfo") is not None else False,
            "mergeHeaders": obj.get("mergeHeaders"),
            "pageOrientation": obj.get("pageOrientation") if obj.get("pageOrientation") is not None else 'PORTRAIT',
            "pageSize": obj.get("pageSize") if obj.get("pageSize") is not None else 'A4',
            "pdfPageSize": obj.get("pdfPageSize"),
            "pdfTableStyle": [PdfTableStyle.from_dict(_item) for _item in obj["pdfTableStyle"]] if obj.get("pdfTableStyle") is not None else None,
            "pdfTopLeftContent": obj.get("pdfTopLeftContent"),
            "pdfTopRightContent": obj.get("pdfTopRightContent"),
            "showFilters": obj.get("showFilters")
        })
        return _obj


