# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.created_visualizations import CreatedVisualizations
from gooddata_api_client.models.found_objects import FoundObjects
from gooddata_api_client.models.route_result import RouteResult
from typing import Optional, Set
from typing_extensions import Self

class ChatResult(BaseModel):
    """
    ChatResult
    """ # noqa: E501
    chat_history_interaction_id: Optional[StrictStr] = Field(default=None, description="Chat History interaction ID. Unique ID for each interaction.", alias="chatHistoryInteractionId")
    created_visualizations: Optional[CreatedVisualizations] = Field(default=None, alias="createdVisualizations")
    error_response: Optional[StrictStr] = Field(default=None, description="Error response in anything fails.", alias="errorResponse")
    found_objects: Optional[FoundObjects] = Field(default=None, alias="foundObjects")
    routing: Optional[RouteResult] = None
    text_response: Optional[StrictStr] = Field(default=None, description="Text response for general questions.", alias="textResponse")
    thread_id_suffix: Optional[StrictStr] = Field(default=None, description="Chat History thread suffix appended to ID generated by backend. Enables more chat windows.", alias="threadIdSuffix")
    __properties: ClassVar[List[str]] = ["chatHistoryInteractionId", "createdVisualizations", "errorResponse", "foundObjects", "routing", "textResponse", "threadIdSuffix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_visualizations
        if self.created_visualizations:
            _dict['createdVisualizations'] = self.created_visualizations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of found_objects
        if self.found_objects:
            _dict['foundObjects'] = self.found_objects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routing
        if self.routing:
            _dict['routing'] = self.routing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chatHistoryInteractionId": obj.get("chatHistoryInteractionId"),
            "createdVisualizations": CreatedVisualizations.from_dict(obj["createdVisualizations"]) if obj.get("createdVisualizations") is not None else None,
            "errorResponse": obj.get("errorResponse"),
            "foundObjects": FoundObjects.from_dict(obj["foundObjects"]) if obj.get("foundObjects") is not None else None,
            "routing": RouteResult.from_dict(obj["routing"]) if obj.get("routing") is not None else None,
            "textResponse": obj.get("textResponse"),
            "threadIdSuffix": obj.get("threadIdSuffix")
        })
        return _obj


