# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.pdm_ldm_request import PdmLdmRequest
from typing import Optional, Set
from typing_extensions import Self

class GenerateLdmRequest(BaseModel):
    """
    A request containing all information needed for generation of logical model.
    """ # noqa: E501
    aggregated_fact_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as aggregated facts. The prefix is then followed by the value of `separator` parameter. Given the aggregated fact prefix is `aggr` and separator is `__`, the columns with name like `aggr__sum__product__sold` will be considered as aggregated sold fact in the product table with SUM aggregate function.", alias="aggregatedFactPrefix")
    date_granularities: Optional[StrictStr] = Field(default=None, description="Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).", alias="dateGranularities")
    denorm_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.", alias="denormPrefix")
    fact_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.", alias="factPrefix")
    generate_long_ids: Optional[StrictBool] = Field(default=False, description="A flag dictating how the attribute, fact and label ids are generated. By default their ids are derived only from the column name, unless there would be a conflict (e.g. category coming from two different tables). In that case a long id format of `<table>.<column>` is used. If the flag is set to true, then all ids will be generated in the long form.", alias="generateLongIds")
    grain_multivalue_reference_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as grain multivalue references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `grmr` and separator is `__`, the columns with name like `grmr__customer__customer_id` will be considered as grain multivalue references to customer_id in customer table.", alias="grainMultivalueReferencePrefix")
    grain_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `gr` and separator is `__`, the columns with name like `gr__name` will be considered as grains.", alias="grainPrefix")
    grain_reference_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. For composite references, the reference is multivalue if at least one column is multivalue. Given the reference prefix is `grr` and separator is `__`, the columns with name like `grr__customer__customer_id` will be considered as grain references to customer_id in customer table.", alias="grainReferencePrefix")
    multivalue_reference_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as multivalue references. The prefix is then followed by the value of `separator` parameter. For composite references, the reference is multivalue if at least one column is multivalue. Given the reference prefix is `mr` and separator is `__`, the columns with name like `mr__customer__customer_id` will be considered as multivalue references to customer_id in customer table.", alias="multivalueReferencePrefix")
    pdm: Optional[PdmLdmRequest] = None
    primary_label_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.", alias="primaryLabelPrefix")
    reference_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer__customer_id` will be considered as references to customer_id in customer table.", alias="referencePrefix")
    secondary_label_prefix: Optional[StrictStr] = Field(default=None, description="Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `ls` and separator is `__`, the columns with name like `ls__country_id__country_name` will be considered as secondary labels.", alias="secondaryLabelPrefix")
    separator: Optional[StrictStr] = Field(default='__', description="A separator between prefixes and the names. Default is \"__\".")
    table_prefix: Optional[StrictStr] = Field(default=None, description="Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.", alias="tablePrefix")
    view_prefix: Optional[StrictStr] = Field(default=None, description="Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.", alias="viewPrefix")
    wdf_prefix: Optional[StrictStr] = Field(default='wdf', description="Column serving as workspace data filter. No labels are auto generated for such columns.", alias="wdfPrefix")
    workspace_id: Optional[StrictStr] = Field(default=None, description="Optional workspace id.", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["aggregatedFactPrefix", "dateGranularities", "denormPrefix", "factPrefix", "generateLongIds", "grainMultivalueReferencePrefix", "grainPrefix", "grainReferencePrefix", "multivalueReferencePrefix", "pdm", "primaryLabelPrefix", "referencePrefix", "secondaryLabelPrefix", "separator", "tablePrefix", "viewPrefix", "wdfPrefix", "workspaceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateLdmRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pdm
        if self.pdm:
            _dict['pdm'] = self.pdm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateLdmRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregatedFactPrefix": obj.get("aggregatedFactPrefix"),
            "dateGranularities": obj.get("dateGranularities"),
            "denormPrefix": obj.get("denormPrefix"),
            "factPrefix": obj.get("factPrefix"),
            "generateLongIds": obj.get("generateLongIds") if obj.get("generateLongIds") is not None else False,
            "grainMultivalueReferencePrefix": obj.get("grainMultivalueReferencePrefix"),
            "grainPrefix": obj.get("grainPrefix"),
            "grainReferencePrefix": obj.get("grainReferencePrefix"),
            "multivalueReferencePrefix": obj.get("multivalueReferencePrefix"),
            "pdm": PdmLdmRequest.from_dict(obj["pdm"]) if obj.get("pdm") is not None else None,
            "primaryLabelPrefix": obj.get("primaryLabelPrefix"),
            "referencePrefix": obj.get("referencePrefix"),
            "secondaryLabelPrefix": obj.get("secondaryLabelPrefix"),
            "separator": obj.get("separator") if obj.get("separator") is not None else '__',
            "tablePrefix": obj.get("tablePrefix"),
            "viewPrefix": obj.get("viewPrefix"),
            "wdfPrefix": obj.get("wdfPrefix") if obj.get("wdfPrefix") is not None else 'wdf',
            "workspaceId": obj.get("workspaceId")
        })
        return _obj


