# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.notes import Notes
from gooddata_api_client.models.skeleton import Skeleton
from typing import Optional, Set
from typing_extensions import Self

class File(BaseModel):
    """
    File
    """ # noqa: E501
    any: Optional[List[Dict[str, Any]]] = None
    can_resegment: Optional[StrictStr] = Field(default=None, alias="canResegment")
    id: Optional[StrictStr] = None
    notes: Optional[Notes] = None
    original: Optional[StrictStr] = None
    other_attributes: Optional[Dict[str, StrictStr]] = Field(default=None, alias="otherAttributes")
    skeleton: Optional[Skeleton] = None
    space: Optional[StrictStr] = None
    src_dir: Optional[StrictStr] = Field(default=None, alias="srcDir")
    translate: Optional[StrictStr] = None
    trg_dir: Optional[StrictStr] = Field(default=None, alias="trgDir")
    unit_or_group: Optional[List[Dict[str, Any]]] = Field(default=None, alias="unitOrGroup")
    __properties: ClassVar[List[str]] = ["any", "canResegment", "id", "notes", "original", "otherAttributes", "skeleton", "space", "srcDir", "translate", "trgDir", "unitOrGroup"]

    @field_validator('can_resegment')
    def can_resegment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['YES', 'NO']):
            raise ValueError("must be one of enum values ('YES', 'NO')")
        return value

    @field_validator('src_dir')
    def src_dir_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LTR', 'RTL', 'AUTO']):
            raise ValueError("must be one of enum values ('LTR', 'RTL', 'AUTO')")
        return value

    @field_validator('translate')
    def translate_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['YES', 'NO']):
            raise ValueError("must be one of enum values ('YES', 'NO')")
        return value

    @field_validator('trg_dir')
    def trg_dir_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LTR', 'RTL', 'AUTO']):
            raise ValueError("must be one of enum values ('LTR', 'RTL', 'AUTO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of notes
        if self.notes:
            _dict['notes'] = self.notes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skeleton
        if self.skeleton:
            _dict['skeleton'] = self.skeleton.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "any": obj.get("any"),
            "canResegment": obj.get("canResegment"),
            "id": obj.get("id"),
            "notes": Notes.from_dict(obj["notes"]) if obj.get("notes") is not None else None,
            "original": obj.get("original"),
            "otherAttributes": obj.get("otherAttributes"),
            "skeleton": Skeleton.from_dict(obj["skeleton"]) if obj.get("skeleton") is not None else None,
            "space": obj.get("space"),
            "srcDir": obj.get("srcDir"),
            "translate": obj.get("translate"),
            "trgDir": obj.get("trgDir"),
            "unitOrGroup": obj.get("unitOrGroup")
        })
        return _obj


