# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.automation_alert import AutomationAlert
from gooddata_api_client.models.automation_dashboard_tabular_export import AutomationDashboardTabularExport
from gooddata_api_client.models.automation_external_recipient import AutomationExternalRecipient
from gooddata_api_client.models.automation_image_export import AutomationImageExport
from gooddata_api_client.models.automation_metadata import AutomationMetadata
from gooddata_api_client.models.automation_raw_export import AutomationRawExport
from gooddata_api_client.models.automation_schedule import AutomationSchedule
from gooddata_api_client.models.automation_slides_export import AutomationSlidesExport
from gooddata_api_client.models.automation_tabular_export import AutomationTabularExport
from gooddata_api_client.models.automation_visual_export import AutomationVisualExport
from gooddata_api_client.models.declarative_analytical_dashboard_identifier import DeclarativeAnalyticalDashboardIdentifier
from gooddata_api_client.models.declarative_export_definition_identifier import DeclarativeExportDefinitionIdentifier
from gooddata_api_client.models.declarative_notification_channel_identifier import DeclarativeNotificationChannelIdentifier
from gooddata_api_client.models.declarative_user_identifier import DeclarativeUserIdentifier
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeAutomation(BaseModel):
    """
    DeclarativeAutomation
    """ # noqa: E501
    alert: Optional[AutomationAlert] = None
    analytical_dashboard: Optional[DeclarativeAnalyticalDashboardIdentifier] = Field(default=None, alias="analyticalDashboard")
    created_at: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Time of the entity creation.", alias="createdAt")
    created_by: Optional[DeclarativeUserIdentifier] = Field(default=None, alias="createdBy")
    dashboard_tabular_exports: Optional[List[AutomationDashboardTabularExport]] = Field(default=None, alias="dashboardTabularExports")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    details: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=10000)]]] = Field(default=None, description="TODO")
    evaluation_mode: Optional[StrictStr] = Field(default='PER_RECIPIENT', description="Specify automation evaluation mode.", alias="evaluationMode")
    export_definitions: Optional[List[DeclarativeExportDefinitionIdentifier]] = Field(default=None, alias="exportDefinitions")
    external_recipients: Optional[List[AutomationExternalRecipient]] = Field(default=None, description="External recipients of the automation action results.", alias="externalRecipients")
    id: Annotated[str, Field(strict=True)]
    image_exports: Optional[List[AutomationImageExport]] = Field(default=None, alias="imageExports")
    metadata: Optional[AutomationMetadata] = None
    modified_at: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="Time of the last entity modification.", alias="modifiedAt")
    modified_by: Optional[DeclarativeUserIdentifier] = Field(default=None, alias="modifiedBy")
    notification_channel: Optional[DeclarativeNotificationChannelIdentifier] = Field(default=None, alias="notificationChannel")
    raw_exports: Optional[List[AutomationRawExport]] = Field(default=None, alias="rawExports")
    recipients: Optional[List[DeclarativeUserIdentifier]] = None
    schedule: Optional[AutomationSchedule] = None
    slides_exports: Optional[List[AutomationSlidesExport]] = Field(default=None, alias="slidesExports")
    state: Optional[StrictStr] = Field(default='ACTIVE', description="Current state of the automation.")
    tabular_exports: Optional[List[AutomationTabularExport]] = Field(default=None, alias="tabularExports")
    tags: Optional[List[StrictStr]] = None
    title: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    visual_exports: Optional[List[AutomationVisualExport]] = Field(default=None, alias="visualExports")
    __properties: ClassVar[List[str]] = ["alert", "analyticalDashboard", "createdAt", "createdBy", "dashboardTabularExports", "description", "details", "evaluationMode", "exportDefinitions", "externalRecipients", "id", "imageExports", "metadata", "modifiedAt", "modifiedBy", "notificationChannel", "rawExports", "recipients", "schedule", "slidesExports", "state", "tabularExports", "tags", "title", "visualExports"]

    @field_validator('created_at')
    def created_at_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}/")
        return value

    @field_validator('evaluation_mode')
    def evaluation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHARED', 'PER_RECIPIENT']):
            raise ValueError("must be one of enum values ('SHARED', 'PER_RECIPIENT')")
        return value

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    @field_validator('modified_at')
    def modified_at_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}/")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'PAUSED']):
            raise ValueError("must be one of enum values ('ACTIVE', 'PAUSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeAutomation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alert
        if self.alert:
            _dict['alert'] = self.alert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of analytical_dashboard
        if self.analytical_dashboard:
            _dict['analyticalDashboard'] = self.analytical_dashboard.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dashboard_tabular_exports (list)
        _items = []
        if self.dashboard_tabular_exports:
            for _item_dashboard_tabular_exports in self.dashboard_tabular_exports:
                if _item_dashboard_tabular_exports:
                    _items.append(_item_dashboard_tabular_exports.to_dict())
            _dict['dashboardTabularExports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in export_definitions (list)
        _items = []
        if self.export_definitions:
            for _item_export_definitions in self.export_definitions:
                if _item_export_definitions:
                    _items.append(_item_export_definitions.to_dict())
            _dict['exportDefinitions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in external_recipients (list)
        _items = []
        if self.external_recipients:
            for _item_external_recipients in self.external_recipients:
                if _item_external_recipients:
                    _items.append(_item_external_recipients.to_dict())
            _dict['externalRecipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in image_exports (list)
        _items = []
        if self.image_exports:
            for _item_image_exports in self.image_exports:
                if _item_image_exports:
                    _items.append(_item_image_exports.to_dict())
            _dict['imageExports'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_by
        if self.modified_by:
            _dict['modifiedBy'] = self.modified_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_channel
        if self.notification_channel:
            _dict['notificationChannel'] = self.notification_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in raw_exports (list)
        _items = []
        if self.raw_exports:
            for _item_raw_exports in self.raw_exports:
                if _item_raw_exports:
                    _items.append(_item_raw_exports.to_dict())
            _dict['rawExports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recipients (list)
        _items = []
        if self.recipients:
            for _item_recipients in self.recipients:
                if _item_recipients:
                    _items.append(_item_recipients.to_dict())
            _dict['recipients'] = _items
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in slides_exports (list)
        _items = []
        if self.slides_exports:
            for _item_slides_exports in self.slides_exports:
                if _item_slides_exports:
                    _items.append(_item_slides_exports.to_dict())
            _dict['slidesExports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tabular_exports (list)
        _items = []
        if self.tabular_exports:
            for _item_tabular_exports in self.tabular_exports:
                if _item_tabular_exports:
                    _items.append(_item_tabular_exports.to_dict())
            _dict['tabularExports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in visual_exports (list)
        _items = []
        if self.visual_exports:
            for _item_visual_exports in self.visual_exports:
                if _item_visual_exports:
                    _items.append(_item_visual_exports.to_dict())
            _dict['visualExports'] = _items
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['createdAt'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if modified_at (nullable) is None
        # and model_fields_set contains the field
        if self.modified_at is None and "modified_at" in self.model_fields_set:
            _dict['modifiedAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeAutomation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alert": AutomationAlert.from_dict(obj["alert"]) if obj.get("alert") is not None else None,
            "analyticalDashboard": DeclarativeAnalyticalDashboardIdentifier.from_dict(obj["analyticalDashboard"]) if obj.get("analyticalDashboard") is not None else None,
            "createdAt": obj.get("createdAt"),
            "createdBy": DeclarativeUserIdentifier.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "dashboardTabularExports": [AutomationDashboardTabularExport.from_dict(_item) for _item in obj["dashboardTabularExports"]] if obj.get("dashboardTabularExports") is not None else None,
            "description": obj.get("description"),
            "details": obj.get("details"),
            "evaluationMode": obj.get("evaluationMode") if obj.get("evaluationMode") is not None else 'PER_RECIPIENT',
            "exportDefinitions": [DeclarativeExportDefinitionIdentifier.from_dict(_item) for _item in obj["exportDefinitions"]] if obj.get("exportDefinitions") is not None else None,
            "externalRecipients": [AutomationExternalRecipient.from_dict(_item) for _item in obj["externalRecipients"]] if obj.get("externalRecipients") is not None else None,
            "id": obj.get("id"),
            "imageExports": [AutomationImageExport.from_dict(_item) for _item in obj["imageExports"]] if obj.get("imageExports") is not None else None,
            "metadata": AutomationMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "modifiedAt": obj.get("modifiedAt"),
            "modifiedBy": DeclarativeUserIdentifier.from_dict(obj["modifiedBy"]) if obj.get("modifiedBy") is not None else None,
            "notificationChannel": DeclarativeNotificationChannelIdentifier.from_dict(obj["notificationChannel"]) if obj.get("notificationChannel") is not None else None,
            "rawExports": [AutomationRawExport.from_dict(_item) for _item in obj["rawExports"]] if obj.get("rawExports") is not None else None,
            "recipients": [DeclarativeUserIdentifier.from_dict(_item) for _item in obj["recipients"]] if obj.get("recipients") is not None else None,
            "schedule": AutomationSchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "slidesExports": [AutomationSlidesExport.from_dict(_item) for _item in obj["slidesExports"]] if obj.get("slidesExports") is not None else None,
            "state": obj.get("state") if obj.get("state") is not None else 'ACTIVE',
            "tabularExports": [AutomationTabularExport.from_dict(_item) for _item in obj["tabularExports"]] if obj.get("tabularExports") is not None else None,
            "tags": obj.get("tags"),
            "title": obj.get("title"),
            "visualExports": [AutomationVisualExport.from_dict(_item) for _item in obj["visualExports"]] if obj.get("visualExports") is not None else None
        })
        return _obj


