# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.json_api_export_template_in_attributes_dashboard_slides_template import JsonApiExportTemplateInAttributesDashboardSlidesTemplate
from gooddata_api_client.models.json_api_export_template_in_attributes_widget_slides_template import JsonApiExportTemplateInAttributesWidgetSlidesTemplate
from typing import Optional, Set
from typing_extensions import Self

class JsonApiExportTemplatePatchAttributes(BaseModel):
    """
    JsonApiExportTemplatePatchAttributes
    """ # noqa: E501
    dashboard_slides_template: Optional[JsonApiExportTemplateInAttributesDashboardSlidesTemplate] = Field(default=None, alias="dashboardSlidesTemplate")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="User-facing name of the Slides template.")
    widget_slides_template: Optional[JsonApiExportTemplateInAttributesWidgetSlidesTemplate] = Field(default=None, alias="widgetSlidesTemplate")
    __properties: ClassVar[List[str]] = ["dashboardSlidesTemplate", "name", "widgetSlidesTemplate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiExportTemplatePatchAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dashboard_slides_template
        if self.dashboard_slides_template:
            _dict['dashboardSlidesTemplate'] = self.dashboard_slides_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of widget_slides_template
        if self.widget_slides_template:
            _dict['widgetSlidesTemplate'] = self.widget_slides_template.to_dict()
        # set to None if dashboard_slides_template (nullable) is None
        # and model_fields_set contains the field
        if self.dashboard_slides_template is None and "dashboard_slides_template" in self.model_fields_set:
            _dict['dashboardSlidesTemplate'] = None

        # set to None if widget_slides_template (nullable) is None
        # and model_fields_set contains the field
        if self.widget_slides_template is None and "widget_slides_template" in self.model_fields_set:
            _dict['widgetSlidesTemplate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiExportTemplatePatchAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dashboardSlidesTemplate": JsonApiExportTemplateInAttributesDashboardSlidesTemplate.from_dict(obj["dashboardSlidesTemplate"]) if obj.get("dashboardSlidesTemplate") is not None else None,
            "name": obj.get("name"),
            "widgetSlidesTemplate": JsonApiExportTemplateInAttributesWidgetSlidesTemplate.from_dict(obj["widgetSlidesTemplate"]) if obj.get("widgetSlidesTemplate") is not None else None
        })
        return _obj


