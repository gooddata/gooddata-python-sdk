# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.declarative_setting import DeclarativeSetting
from gooddata_api_client.models.declarative_user_group_identifier import DeclarativeUserGroupIdentifier
from gooddata_api_client.models.declarative_user_permission import DeclarativeUserPermission
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeUser(BaseModel):
    """
    A user and its properties
    """ # noqa: E501
    auth_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="User identification in the authentication manager.", alias="authId")
    email: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="User email address")
    firstname: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="User first name")
    id: Annotated[str, Field(strict=True)] = Field(description="User identifier.")
    lastname: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="User last name")
    permissions: Optional[List[DeclarativeUserPermission]] = None
    settings: Optional[List[DeclarativeSetting]] = Field(default=None, description="A list of user settings.")
    user_groups: Optional[List[DeclarativeUserGroupIdentifier]] = Field(default=None, alias="userGroups")
    __properties: ClassVar[List[str]] = ["authId", "email", "firstname", "id", "lastname", "permissions", "settings", "userGroups"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in settings (list)
        _items = []
        if self.settings:
            for _item_settings in self.settings:
                if _item_settings:
                    _items.append(_item_settings.to_dict())
            _dict['settings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_groups (list)
        _items = []
        if self.user_groups:
            for _item_user_groups in self.user_groups:
                if _item_user_groups:
                    _items.append(_item_user_groups.to_dict())
            _dict['userGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authId": obj.get("authId"),
            "email": obj.get("email"),
            "firstname": obj.get("firstname"),
            "id": obj.get("id"),
            "lastname": obj.get("lastname"),
            "permissions": [DeclarativeUserPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "settings": [DeclarativeSetting.from_dict(_item) for _item in obj["settings"]] if obj.get("settings") is not None else None,
            "userGroups": [DeclarativeUserGroupIdentifier.from_dict(_item) for _item in obj["userGroups"]] if obj.get("userGroups") is not None else None
        })
        return _obj


