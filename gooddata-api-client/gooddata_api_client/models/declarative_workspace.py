# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.declarative_automation import DeclarativeAutomation
from gooddata_api_client.models.declarative_custom_application_setting import DeclarativeCustomApplicationSetting
from gooddata_api_client.models.declarative_filter_view import DeclarativeFilterView
from gooddata_api_client.models.declarative_setting import DeclarativeSetting
from gooddata_api_client.models.declarative_single_workspace_permission import DeclarativeSingleWorkspacePermission
from gooddata_api_client.models.declarative_user_data_filter import DeclarativeUserDataFilter
from gooddata_api_client.models.declarative_workspace_hierarchy_permission import DeclarativeWorkspaceHierarchyPermission
from gooddata_api_client.models.declarative_workspace_model import DeclarativeWorkspaceModel
from gooddata_api_client.models.workspace_data_source import WorkspaceDataSource
from gooddata_api_client.models.workspace_identifier import WorkspaceIdentifier
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeWorkspace(BaseModel):
    """
    A declarative form of a particular workspace.
    """ # noqa: E501
    automations: Optional[List[DeclarativeAutomation]] = None
    cache_extra_limit: Optional[StrictInt] = Field(default=None, description="Extra cache limit allocated to specific workspace. In case there is extra cache budget setup for organization, it can be split between multiple workspaces.", alias="cacheExtraLimit")
    custom_application_settings: Optional[List[DeclarativeCustomApplicationSetting]] = Field(default=None, description="A list of workspace custom settings.", alias="customApplicationSettings")
    data_source: Optional[WorkspaceDataSource] = Field(default=None, alias="dataSource")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Description of the workspace")
    early_access: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Early access defined on level Workspace", alias="earlyAccess")
    early_access_values: Optional[List[Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="Early access defined on level Workspace", alias="earlyAccessValues")
    filter_views: Optional[List[DeclarativeFilterView]] = Field(default=None, alias="filterViews")
    hierarchy_permissions: Optional[List[DeclarativeWorkspaceHierarchyPermission]] = Field(default=None, alias="hierarchyPermissions")
    id: Annotated[str, Field(strict=True)] = Field(description="Identifier of a workspace")
    model: Optional[DeclarativeWorkspaceModel] = None
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Name of a workspace to view.")
    parent: Optional[WorkspaceIdentifier] = None
    permissions: Optional[List[DeclarativeSingleWorkspacePermission]] = None
    prefix: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Custom prefix of entity identifiers in workspace")
    settings: Optional[List[DeclarativeSetting]] = Field(default=None, description="A list of workspace settings.")
    user_data_filters: Optional[List[DeclarativeUserDataFilter]] = Field(default=None, description="A list of workspace user data filters.", alias="userDataFilters")
    __properties: ClassVar[List[str]] = ["automations", "cacheExtraLimit", "customApplicationSettings", "dataSource", "description", "earlyAccess", "earlyAccessValues", "filterViews", "hierarchyPermissions", "id", "model", "name", "parent", "permissions", "prefix", "settings", "userDataFilters"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    @field_validator('prefix')
    def prefix_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeWorkspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in automations (list)
        _items = []
        if self.automations:
            for _item_automations in self.automations:
                if _item_automations:
                    _items.append(_item_automations.to_dict())
            _dict['automations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_application_settings (list)
        _items = []
        if self.custom_application_settings:
            for _item_custom_application_settings in self.custom_application_settings:
                if _item_custom_application_settings:
                    _items.append(_item_custom_application_settings.to_dict())
            _dict['customApplicationSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of data_source
        if self.data_source:
            _dict['dataSource'] = self.data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filter_views (list)
        _items = []
        if self.filter_views:
            for _item_filter_views in self.filter_views:
                if _item_filter_views:
                    _items.append(_item_filter_views.to_dict())
            _dict['filterViews'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hierarchy_permissions (list)
        _items = []
        if self.hierarchy_permissions:
            for _item_hierarchy_permissions in self.hierarchy_permissions:
                if _item_hierarchy_permissions:
                    _items.append(_item_hierarchy_permissions.to_dict())
            _dict['hierarchyPermissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of model
        if self.model:
            _dict['model'] = self.model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in settings (list)
        _items = []
        if self.settings:
            for _item_settings in self.settings:
                if _item_settings:
                    _items.append(_item_settings.to_dict())
            _dict['settings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_data_filters (list)
        _items = []
        if self.user_data_filters:
            for _item_user_data_filters in self.user_data_filters:
                if _item_user_data_filters:
                    _items.append(_item_user_data_filters.to_dict())
            _dict['userDataFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeWorkspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automations": [DeclarativeAutomation.from_dict(_item) for _item in obj["automations"]] if obj.get("automations") is not None else None,
            "cacheExtraLimit": obj.get("cacheExtraLimit"),
            "customApplicationSettings": [DeclarativeCustomApplicationSetting.from_dict(_item) for _item in obj["customApplicationSettings"]] if obj.get("customApplicationSettings") is not None else None,
            "dataSource": WorkspaceDataSource.from_dict(obj["dataSource"]) if obj.get("dataSource") is not None else None,
            "description": obj.get("description"),
            "earlyAccess": obj.get("earlyAccess"),
            "earlyAccessValues": obj.get("earlyAccessValues"),
            "filterViews": [DeclarativeFilterView.from_dict(_item) for _item in obj["filterViews"]] if obj.get("filterViews") is not None else None,
            "hierarchyPermissions": [DeclarativeWorkspaceHierarchyPermission.from_dict(_item) for _item in obj["hierarchyPermissions"]] if obj.get("hierarchyPermissions") is not None else None,
            "id": obj.get("id"),
            "model": DeclarativeWorkspaceModel.from_dict(obj["model"]) if obj.get("model") is not None else None,
            "name": obj.get("name"),
            "parent": WorkspaceIdentifier.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "permissions": [DeclarativeSingleWorkspacePermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "prefix": obj.get("prefix"),
            "settings": [DeclarativeSetting.from_dict(_item) for _item in obj["settings"]] if obj.get("settings") is not None else None,
            "userDataFilters": [DeclarativeUserDataFilter.from_dict(_item) for _item in obj["userDataFilters"]] if obj.get("userDataFilters") is not None else None
        })
        return _obj


