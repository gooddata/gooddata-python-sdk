# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.json_api_automation_in_relationships_analytical_dashboard import JsonApiAutomationInRelationshipsAnalyticalDashboard
from gooddata_api_client.models.json_api_automation_in_relationships_export_definitions import JsonApiAutomationInRelationshipsExportDefinitions
from gooddata_api_client.models.json_api_automation_in_relationships_notification_channel import JsonApiAutomationInRelationshipsNotificationChannel
from gooddata_api_client.models.json_api_automation_in_relationships_recipients import JsonApiAutomationInRelationshipsRecipients
from typing import Optional, Set
from typing_extensions import Self

class JsonApiAutomationInRelationships(BaseModel):
    """
    JsonApiAutomationInRelationships
    """ # noqa: E501
    analytical_dashboard: Optional[JsonApiAutomationInRelationshipsAnalyticalDashboard] = Field(default=None, alias="analyticalDashboard")
    export_definitions: Optional[JsonApiAutomationInRelationshipsExportDefinitions] = Field(default=None, alias="exportDefinitions")
    notification_channel: Optional[JsonApiAutomationInRelationshipsNotificationChannel] = Field(default=None, alias="notificationChannel")
    recipients: Optional[JsonApiAutomationInRelationshipsRecipients] = None
    __properties: ClassVar[List[str]] = ["analyticalDashboard", "exportDefinitions", "notificationChannel", "recipients"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiAutomationInRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analytical_dashboard
        if self.analytical_dashboard:
            _dict['analyticalDashboard'] = self.analytical_dashboard.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export_definitions
        if self.export_definitions:
            _dict['exportDefinitions'] = self.export_definitions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_channel
        if self.notification_channel:
            _dict['notificationChannel'] = self.notification_channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recipients
        if self.recipients:
            _dict['recipients'] = self.recipients.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiAutomationInRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticalDashboard": JsonApiAutomationInRelationshipsAnalyticalDashboard.from_dict(obj["analyticalDashboard"]) if obj.get("analyticalDashboard") is not None else None,
            "exportDefinitions": JsonApiAutomationInRelationshipsExportDefinitions.from_dict(obj["exportDefinitions"]) if obj.get("exportDefinitions") is not None else None,
            "notificationChannel": JsonApiAutomationInRelationshipsNotificationChannel.from_dict(obj["notificationChannel"]) if obj.get("notificationChannel") is not None else None,
            "recipients": JsonApiAutomationInRelationshipsRecipients.from_dict(obj["recipients"]) if obj.get("recipients") is not None else None
        })
        return _obj


