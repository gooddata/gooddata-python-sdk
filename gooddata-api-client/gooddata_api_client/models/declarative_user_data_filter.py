# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.declarative_user_group_identifier import DeclarativeUserGroupIdentifier
from gooddata_api_client.models.declarative_user_identifier import DeclarativeUserIdentifier
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeUserDataFilter(BaseModel):
    """
    User Data Filters serving the filtering of what data users can see in workspaces.
    """ # noqa: E501
    description: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = Field(default=None, description="User Data Filters setting description.")
    id: Annotated[str, Field(strict=True)] = Field(description="User Data Filters ID. This ID is further used to refer to this instance.")
    maql: Annotated[str, Field(strict=True, max_length=10000)] = Field(description="Expression in MAQL specifying the User Data Filter")
    tags: Optional[List[StrictStr]] = Field(default=None, description="A list of tags.")
    title: Annotated[str, Field(strict=True, max_length=255)] = Field(description="User Data Filters setting title.")
    user: Optional[DeclarativeUserIdentifier] = None
    user_group: Optional[DeclarativeUserGroupIdentifier] = Field(default=None, alias="userGroup")
    __properties: ClassVar[List[str]] = ["description", "id", "maql", "tags", "title", "user", "userGroup"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeUserDataFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_group
        if self.user_group:
            _dict['userGroup'] = self.user_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeUserDataFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "maql": obj.get("maql"),
            "tags": obj.get("tags"),
            "title": obj.get("title"),
            "user": DeclarativeUserIdentifier.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "userGroup": DeclarativeUserGroupIdentifier.from_dict(obj["userGroup"]) if obj.get("userGroup") is not None else None
        })
        return _obj


