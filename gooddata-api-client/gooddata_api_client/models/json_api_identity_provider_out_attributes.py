# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class JsonApiIdentityProviderOutAttributes(BaseModel):
    """
    JsonApiIdentityProviderOutAttributes
    """ # noqa: E501
    custom_claim_mapping: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map of custom claim overrides. To be used when your Idp does not provide default claims (sub, email, name, given_name, family_name). Define the key pair for the claim you wish to override, where the key is the default name of the attribute and the value is your custom name for the given attribute.", alias="customClaimMapping")
    identifiers: Optional[List[StrictStr]] = Field(default=None, description="List of identifiers for this IdP, where an identifier is a domain name. Users with email addresses belonging to these domains will be authenticated by this IdP.")
    idp_type: Optional[StrictStr] = Field(default=None, description="Type of IdP for management purposes. MANAGED_IDP represents a GoodData managed IdP used in single OIDC setup, which is protected from altering/deletion. FIM_IDP represents a GoodData managed IdP used in federated identity management setup, which is protected from altering/deletion. DEX_IDP represents internal Dex IdP which is protected from altering/deletion. CUSTOM_IDP represents customer's own IdP, protected from deletion if currently used by org for authentication, deletable otherwise.", alias="idpType")
    oauth_client_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The OAuth client id of your OIDC provider. This field is mandatory for OIDC IdP.", alias="oauthClientId")
    oauth_custom_auth_attributes: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map of additional authentication attributes that should be added to the OAuth2 authentication requests, where the key is the name of the attribute and the value is the value of the attribute.", alias="oauthCustomAuthAttributes")
    oauth_custom_scopes: Optional[List[Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="List of additional OAuth scopes which may be required by other providers (e.g. Snowflake)", alias="oauthCustomScopes")
    oauth_issuer_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.", alias="oauthIssuerId")
    oauth_issuer_location: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The location of your OIDC provider. This field is mandatory for OIDC IdP.", alias="oauthIssuerLocation")
    oauth_subject_id_claim: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.", alias="oauthSubjectIdClaim")
    __properties: ClassVar[List[str]] = ["customClaimMapping", "identifiers", "idpType", "oauthClientId", "oauthCustomAuthAttributes", "oauthCustomScopes", "oauthIssuerId", "oauthIssuerLocation", "oauthSubjectIdClaim"]

    @field_validator('idp_type')
    def idp_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MANAGED_IDP', 'FIM_IDP', 'DEX_IDP', 'CUSTOM_IDP']):
            raise ValueError("must be one of enum values ('MANAGED_IDP', 'FIM_IDP', 'DEX_IDP', 'CUSTOM_IDP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiIdentityProviderOutAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if oauth_custom_scopes (nullable) is None
        # and model_fields_set contains the field
        if self.oauth_custom_scopes is None and "oauth_custom_scopes" in self.model_fields_set:
            _dict['oauthCustomScopes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiIdentityProviderOutAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customClaimMapping": obj.get("customClaimMapping"),
            "identifiers": obj.get("identifiers"),
            "idpType": obj.get("idpType"),
            "oauthClientId": obj.get("oauthClientId"),
            "oauthCustomAuthAttributes": obj.get("oauthCustomAuthAttributes"),
            "oauthCustomScopes": obj.get("oauthCustomScopes"),
            "oauthIssuerId": obj.get("oauthIssuerId"),
            "oauthIssuerLocation": obj.get("oauthIssuerLocation"),
            "oauthSubjectIdClaim": obj.get("oauthSubjectIdClaim")
        })
        return _obj


