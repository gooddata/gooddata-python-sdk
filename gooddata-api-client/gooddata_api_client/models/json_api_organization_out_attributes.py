# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.json_api_organization_out_attributes_cache_settings import JsonApiOrganizationOutAttributesCacheSettings
from typing import Optional, Set
from typing_extensions import Self

class JsonApiOrganizationOutAttributes(BaseModel):
    """
    JsonApiOrganizationOutAttributes
    """ # noqa: E501
    allowed_origins: Optional[List[StrictStr]] = Field(default=None, alias="allowedOrigins")
    cache_settings: Optional[JsonApiOrganizationOutAttributesCacheSettings] = Field(default=None, alias="cacheSettings")
    early_access: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The early access feature identifier. It is used to enable experimental features. Deprecated in favor of earlyAccessValues.", alias="earlyAccess")
    early_access_values: Optional[List[Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="The early access feature identifiers. They are used to enable experimental features.", alias="earlyAccessValues")
    hostname: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    oauth_client_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="oauthClientId")
    oauth_custom_auth_attributes: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map of additional authentication attributes that should be added to the OAuth2 authentication requests, where the key is the name of the attribute and the value is the value of the attribute.", alias="oauthCustomAuthAttributes")
    oauth_custom_scopes: Optional[List[Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="List of additional OAuth scopes which may be required by other providers (e.g. Snowflake)", alias="oauthCustomScopes")
    oauth_issuer_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.", alias="oauthIssuerId")
    oauth_issuer_location: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="oauthIssuerLocation")
    oauth_subject_id_claim: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.", alias="oauthSubjectIdClaim")
    __properties: ClassVar[List[str]] = ["allowedOrigins", "cacheSettings", "earlyAccess", "earlyAccessValues", "hostname", "name", "oauthClientId", "oauthCustomAuthAttributes", "oauthCustomScopes", "oauthIssuerId", "oauthIssuerLocation", "oauthSubjectIdClaim"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiOrganizationOutAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cache_settings
        if self.cache_settings:
            _dict['cacheSettings'] = self.cache_settings.to_dict()
        # set to None if early_access (nullable) is None
        # and model_fields_set contains the field
        if self.early_access is None and "early_access" in self.model_fields_set:
            _dict['earlyAccess'] = None

        # set to None if early_access_values (nullable) is None
        # and model_fields_set contains the field
        if self.early_access_values is None and "early_access_values" in self.model_fields_set:
            _dict['earlyAccessValues'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if oauth_custom_scopes (nullable) is None
        # and model_fields_set contains the field
        if self.oauth_custom_scopes is None and "oauth_custom_scopes" in self.model_fields_set:
            _dict['oauthCustomScopes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiOrganizationOutAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedOrigins": obj.get("allowedOrigins"),
            "cacheSettings": JsonApiOrganizationOutAttributesCacheSettings.from_dict(obj["cacheSettings"]) if obj.get("cacheSettings") is not None else None,
            "earlyAccess": obj.get("earlyAccess"),
            "earlyAccessValues": obj.get("earlyAccessValues"),
            "hostname": obj.get("hostname"),
            "name": obj.get("name"),
            "oauthClientId": obj.get("oauthClientId"),
            "oauthCustomAuthAttributes": obj.get("oauthCustomAuthAttributes"),
            "oauthCustomScopes": obj.get("oauthCustomScopes"),
            "oauthIssuerId": obj.get("oauthIssuerId"),
            "oauthIssuerLocation": obj.get("oauthIssuerLocation"),
            "oauthSubjectIdClaim": obj.get("oauthSubjectIdClaim")
        })
        return _obj


