# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class SearchRelationshipObject(BaseModel):
    """
    SearchRelationshipObject
    """ # noqa: E501
    source_object_id: StrictStr = Field(description="Source object ID.", alias="sourceObjectId")
    source_object_title: StrictStr = Field(description="Source object title.", alias="sourceObjectTitle")
    source_object_type: StrictStr = Field(description="Source object type, e.g. dashboard.", alias="sourceObjectType")
    source_workspace_id: StrictStr = Field(description="Source workspace ID. If relationship is dashboard->visualization, this is the workspace where the dashboard is located.", alias="sourceWorkspaceId")
    target_object_id: StrictStr = Field(description="Target object ID.", alias="targetObjectId")
    target_object_title: StrictStr = Field(description="Target object title.", alias="targetObjectTitle")
    target_object_type: StrictStr = Field(description="Target object type, e.g. visualization.", alias="targetObjectType")
    target_workspace_id: StrictStr = Field(description="Target workspace ID. If relationship is dashboard->visualization, this is the workspace where the visualization is located.", alias="targetWorkspaceId")
    __properties: ClassVar[List[str]] = ["sourceObjectId", "sourceObjectTitle", "sourceObjectType", "sourceWorkspaceId", "targetObjectId", "targetObjectTitle", "targetObjectType", "targetWorkspaceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRelationshipObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRelationshipObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sourceObjectId": obj.get("sourceObjectId"),
            "sourceObjectTitle": obj.get("sourceObjectTitle"),
            "sourceObjectType": obj.get("sourceObjectType"),
            "sourceWorkspaceId": obj.get("sourceWorkspaceId"),
            "targetObjectId": obj.get("targetObjectId"),
            "targetObjectTitle": obj.get("targetObjectTitle"),
            "targetObjectType": obj.get("targetObjectType"),
            "targetWorkspaceId": obj.get("targetWorkspaceId")
        })
        return _obj


