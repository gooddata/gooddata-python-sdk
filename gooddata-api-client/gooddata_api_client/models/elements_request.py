# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from gooddata_api_client.models.elements_request_depends_on_inner import ElementsRequestDependsOnInner
from gooddata_api_client.models.filter_by import FilterBy
from gooddata_api_client.models.validate_by_item import ValidateByItem
from typing import Optional, Set
from typing_extensions import Self

class ElementsRequest(BaseModel):
    """
    ElementsRequest
    """ # noqa: E501
    cache_id: Optional[StrictStr] = Field(default=None, description="If specified, the element data will be taken from the result with the same cacheId if it is available.", alias="cacheId")
    complement_filter: Optional[StrictBool] = Field(default=False, description="Inverse filters: * ```false``` - return items matching ```patternFilter``` and ```exactFilter``` * ```true``` - return items not matching ```patternFilter``` and ```exactFilter```", alias="complementFilter")
    data_sampling_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=100.0, description="Specifies percentage of source table data scanned during the computation. This field is deprecated and is no longer used during the elements computation.", alias="dataSamplingPercentage")
    depends_on: Optional[List[ElementsRequestDependsOnInner]] = Field(default=None, description="Return only items that are not filtered-out by the parent filters.", alias="dependsOn")
    exact_filter: Optional[List[Optional[StrictStr]]] = Field(default=None, description="Return only items, whose ```label``` title exactly matches one of ```filter```.", alias="exactFilter")
    exclude_primary_label: Optional[StrictBool] = Field(default=False, description="Excludes items from the result that differ only by primary label * ```false``` - return items with distinct primary label * ```true``` - return items with distinct requested label", alias="excludePrimaryLabel")
    filter_by: Optional[FilterBy] = Field(default=None, alias="filterBy")
    label: Annotated[str, Field(strict=True)] = Field(description="Requested label.")
    pattern_filter: Optional[StrictStr] = Field(default=None, description="Return only items, whose ```label``` title case insensitively contains ```filter``` as substring.", alias="patternFilter")
    sort_order: Optional[StrictStr] = Field(default=None, description="Sort order of returned items. Items are sorted by ```label``` title. If no sort order is specified then attribute's ```sortDirection``` is used, which is ASC by default", alias="sortOrder")
    validate_by: Optional[List[Optional[ValidateByItem]]] = Field(default=None, description="Return only items that are computable on metric.", alias="validateBy")
    __properties: ClassVar[List[str]] = ["cacheId", "complementFilter", "dataSamplingPercentage", "dependsOn", "exactFilter", "excludePrimaryLabel", "filterBy", "label", "patternFilter", "sortOrder", "validateBy"]

    @field_validator('label')
    def label_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    @field_validator('sort_order')
    def sort_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASC', 'DESC']):
            raise ValueError("must be one of enum values ('ASC', 'DESC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElementsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in depends_on (list)
        _items = []
        if self.depends_on:
            for _item_depends_on in self.depends_on:
                if _item_depends_on:
                    _items.append(_item_depends_on.to_dict())
            _dict['dependsOn'] = _items
        # override the default output from pydantic by calling `to_dict()` of filter_by
        if self.filter_by:
            _dict['filterBy'] = self.filter_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in validate_by (list)
        _items = []
        if self.validate_by:
            for _item_validate_by in self.validate_by:
                if _item_validate_by:
                    _items.append(_item_validate_by.to_dict())
            _dict['validateBy'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElementsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacheId": obj.get("cacheId"),
            "complementFilter": obj.get("complementFilter") if obj.get("complementFilter") is not None else False,
            "dataSamplingPercentage": obj.get("dataSamplingPercentage") if obj.get("dataSamplingPercentage") is not None else 100.0,
            "dependsOn": [ElementsRequestDependsOnInner.from_dict(_item) for _item in obj["dependsOn"]] if obj.get("dependsOn") is not None else None,
            "exactFilter": obj.get("exactFilter"),
            "excludePrimaryLabel": obj.get("excludePrimaryLabel") if obj.get("excludePrimaryLabel") is not None else False,
            "filterBy": FilterBy.from_dict(obj["filterBy"]) if obj.get("filterBy") is not None else None,
            "label": obj.get("label"),
            "patternFilter": obj.get("patternFilter"),
            "sortOrder": obj.get("sortOrder"),
            "validateBy": [ValidateByItem.from_dict(_item) for _item in obj["validateBy"]] if obj.get("validateBy") is not None else None
        })
        return _obj


