# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.created_visualization_filters_inner import CreatedVisualizationFiltersInner
from gooddata_api_client.models.dim_attribute import DimAttribute
from gooddata_api_client.models.metric import Metric
from gooddata_api_client.models.suggestion import Suggestion
from typing import Optional, Set
from typing_extensions import Self

class CreatedVisualization(BaseModel):
    """
    List of created visualization objects
    """ # noqa: E501
    dimensionality: List[DimAttribute] = Field(description="List of attributes representing the dimensionality of the new visualization")
    filters: List[CreatedVisualizationFiltersInner] = Field(description="List of filters to be applied to the new visualization")
    id: StrictStr = Field(description="Proposed ID of the new visualization")
    metrics: List[Metric] = Field(description="List of metrics to be used in the new visualization")
    saved_visualization_id: Optional[StrictStr] = Field(default=None, description="Saved visualization ID.", alias="savedVisualizationId")
    suggestions: List[Suggestion] = Field(description="Suggestions for next steps")
    title: StrictStr = Field(description="Proposed title of the new visualization")
    visualization_type: StrictStr = Field(description="Visualization type requested in question", alias="visualizationType")
    __properties: ClassVar[List[str]] = ["dimensionality", "filters", "id", "metrics", "savedVisualizationId", "suggestions", "title", "visualizationType"]

    @field_validator('visualization_type')
    def visualization_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['TABLE', 'HEADLINE', 'BAR', 'LINE', 'PIE', 'COLUMN']):
            raise ValueError("must be one of enum values ('TABLE', 'HEADLINE', 'BAR', 'LINE', 'PIE', 'COLUMN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatedVisualization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensionality (list)
        _items = []
        if self.dimensionality:
            for _item_dimensionality in self.dimensionality:
                if _item_dimensionality:
                    _items.append(_item_dimensionality.to_dict())
            _dict['dimensionality'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in suggestions (list)
        _items = []
        if self.suggestions:
            for _item_suggestions in self.suggestions:
                if _item_suggestions:
                    _items.append(_item_suggestions.to_dict())
            _dict['suggestions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatedVisualization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensionality": [DimAttribute.from_dict(_item) for _item in obj["dimensionality"]] if obj.get("dimensionality") is not None else None,
            "filters": [CreatedVisualizationFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "id": obj.get("id"),
            "metrics": [Metric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "savedVisualizationId": obj.get("savedVisualizationId"),
            "suggestions": [Suggestion.from_dict(_item) for _item in obj["suggestions"]] if obj.get("suggestions") is not None else None,
            "title": obj.get("title"),
            "visualizationType": obj.get("visualizationType")
        })
        return _obj


