# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.json_api_data_source_in_attributes_parameters_inner import JsonApiDataSourceInAttributesParametersInner
from typing import Optional, Set
from typing_extensions import Self

class JsonApiDataSourcePatchAttributes(BaseModel):
    """
    JsonApiDataSourcePatchAttributes
    """ # noqa: E501
    cache_strategy: Optional[StrictStr] = Field(default=None, description="Determines how the results coming from a particular datasource should be cached.", alias="cacheStrategy")
    client_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The client id to use to connect to the database providing the data for the data source (for example a Databricks Service Account).", alias="clientId")
    client_secret: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The client secret to use to connect to the database providing the data for the data source (for example a Databricks Service Account).", alias="clientSecret")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="User-facing name of the data source.")
    parameters: Optional[List[JsonApiDataSourceInAttributesParametersInner]] = Field(default=None, description="Additional parameters to be used when connecting to the database providing the data for the data source.")
    password: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The password to use to connect to the database providing the data for the data source.")
    private_key: Optional[Annotated[str, Field(strict=True, max_length=15000)]] = Field(default=None, description="The private key to use to connect to the database providing the data for the data source.", alias="privateKey")
    private_key_passphrase: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The passphrase used to encrypt the private key.", alias="privateKeyPassphrase")
    var_schema: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The schema to use as the root of the data for the data source.", alias="schema")
    token: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = Field(default=None, description="The token to use to connect to the database providing the data for the data source (for example a BigQuery Service Account).")
    type: Optional[StrictStr] = Field(default=None, description="Type of the database providing the data for the data source.")
    url: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The URL of the database providing the data for the data source.")
    username: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The username to use to connect to the database providing the data for the data source.")
    __properties: ClassVar[List[str]] = ["cacheStrategy", "clientId", "clientSecret", "name", "parameters", "password", "privateKey", "privateKeyPassphrase", "schema", "token", "type", "url", "username"]

    @field_validator('cache_strategy')
    def cache_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALWAYS', 'NEVER']):
            raise ValueError("must be one of enum values ('ALWAYS', 'NEVER')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POSTGRESQL', 'REDSHIFT', 'VERTICA', 'SNOWFLAKE', 'ADS', 'BIGQUERY', 'MSSQL', 'PRESTO', 'DREMIO', 'DRILL', 'GREENPLUM', 'AZURESQL', 'SYNAPSESQL', 'DATABRICKS', 'GDSTORAGE', 'CLICKHOUSE', 'MYSQL', 'MARIADB', 'ORACLE', 'PINOT', 'SINGLESTORE', 'MOTHERDUCK', 'FLEXCONNECT', 'STARROCKS', 'ATHENA', 'MONGODB']):
            raise ValueError("must be one of enum values ('POSTGRESQL', 'REDSHIFT', 'VERTICA', 'SNOWFLAKE', 'ADS', 'BIGQUERY', 'MSSQL', 'PRESTO', 'DREMIO', 'DRILL', 'GREENPLUM', 'AZURESQL', 'SYNAPSESQL', 'DATABRICKS', 'GDSTORAGE', 'CLICKHOUSE', 'MYSQL', 'MARIADB', 'ORACLE', 'PINOT', 'SINGLESTORE', 'MOTHERDUCK', 'FLEXCONNECT', 'STARROCKS', 'ATHENA', 'MONGODB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiDataSourcePatchAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # set to None if cache_strategy (nullable) is None
        # and model_fields_set contains the field
        if self.cache_strategy is None and "cache_strategy" in self.model_fields_set:
            _dict['cacheStrategy'] = None

        # set to None if client_id (nullable) is None
        # and model_fields_set contains the field
        if self.client_id is None and "client_id" in self.model_fields_set:
            _dict['clientId'] = None

        # set to None if client_secret (nullable) is None
        # and model_fields_set contains the field
        if self.client_secret is None and "client_secret" in self.model_fields_set:
            _dict['clientSecret'] = None

        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if private_key (nullable) is None
        # and model_fields_set contains the field
        if self.private_key is None and "private_key" in self.model_fields_set:
            _dict['privateKey'] = None

        # set to None if private_key_passphrase (nullable) is None
        # and model_fields_set contains the field
        if self.private_key_passphrase is None and "private_key_passphrase" in self.model_fields_set:
            _dict['privateKeyPassphrase'] = None

        # set to None if token (nullable) is None
        # and model_fields_set contains the field
        if self.token is None and "token" in self.model_fields_set:
            _dict['token'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiDataSourcePatchAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacheStrategy": obj.get("cacheStrategy"),
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "name": obj.get("name"),
            "parameters": [JsonApiDataSourceInAttributesParametersInner.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "password": obj.get("password"),
            "privateKey": obj.get("privateKey"),
            "privateKeyPassphrase": obj.get("privateKeyPassphrase"),
            "schema": obj.get("schema"),
            "token": obj.get("token"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "username": obj.get("username")
        })
        return _obj


