# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.declarative_color_palette import DeclarativeColorPalette
from gooddata_api_client.models.declarative_csp_directive import DeclarativeCspDirective
from gooddata_api_client.models.declarative_identity_provider_identifier import DeclarativeIdentityProviderIdentifier
from gooddata_api_client.models.declarative_organization_permission import DeclarativeOrganizationPermission
from gooddata_api_client.models.declarative_setting import DeclarativeSetting
from gooddata_api_client.models.declarative_theme import DeclarativeTheme
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeOrganizationInfo(BaseModel):
    """
    Information available about an organization.
    """ # noqa: E501
    allowed_origins: Optional[List[StrictStr]] = Field(default=None, alias="allowedOrigins")
    color_palettes: Optional[List[DeclarativeColorPalette]] = Field(default=None, description="A list of color palettes.", alias="colorPalettes")
    csp_directives: Optional[List[DeclarativeCspDirective]] = Field(default=None, description="A list of CSP directives.", alias="cspDirectives")
    early_access: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Early access defined on level Organization", alias="earlyAccess")
    early_access_values: Optional[List[Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="Early access defined on level Organization", alias="earlyAccessValues")
    hostname: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Formal hostname used in deployment.")
    id: Annotated[str, Field(strict=True)] = Field(description="Identifier of the organization.")
    identity_provider: Optional[DeclarativeIdentityProviderIdentifier] = Field(default=None, alias="identityProvider")
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Formal name of the organization.")
    oauth_client_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Identifier of the authentication provider", alias="oauthClientId")
    oauth_client_secret: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Communication secret of the authentication provider (never returned back).", alias="oauthClientSecret")
    oauth_custom_auth_attributes: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=10000)]]] = Field(default=None, description="Map of additional authentication attributes that should be added to the OAuth2 authentication requests, where the key is the name of the attribute and the value is the value of the attribute.", alias="oauthCustomAuthAttributes")
    oauth_custom_scopes: Optional[List[Annotated[str, Field(strict=True, max_length=255)]]] = Field(default=None, description="List of additional OAuth scopes which may be required by other providers (e.g. Snowflake)", alias="oauthCustomScopes")
    oauth_issuer_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.", alias="oauthIssuerId")
    oauth_issuer_location: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="URI of the authentication provider.", alias="oauthIssuerLocation")
    oauth_subject_id_claim: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Any string identifying the claim in ID token, that should be used for user identification. The default value is 'sub'.", alias="oauthSubjectIdClaim")
    permissions: List[DeclarativeOrganizationPermission]
    settings: Optional[List[DeclarativeSetting]] = Field(default=None, description="A list of organization settings.")
    themes: Optional[List[DeclarativeTheme]] = Field(default=None, description="A list of themes.")
    __properties: ClassVar[List[str]] = ["allowedOrigins", "colorPalettes", "cspDirectives", "earlyAccess", "earlyAccessValues", "hostname", "id", "identityProvider", "name", "oauthClientId", "oauthClientSecret", "oauthCustomAuthAttributes", "oauthCustomScopes", "oauthIssuerId", "oauthIssuerLocation", "oauthSubjectIdClaim", "permissions", "settings", "themes"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeOrganizationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in color_palettes (list)
        _items = []
        if self.color_palettes:
            for _item_color_palettes in self.color_palettes:
                if _item_color_palettes:
                    _items.append(_item_color_palettes.to_dict())
            _dict['colorPalettes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in csp_directives (list)
        _items = []
        if self.csp_directives:
            for _item_csp_directives in self.csp_directives:
                if _item_csp_directives:
                    _items.append(_item_csp_directives.to_dict())
            _dict['cspDirectives'] = _items
        # override the default output from pydantic by calling `to_dict()` of identity_provider
        if self.identity_provider:
            _dict['identityProvider'] = self.identity_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in settings (list)
        _items = []
        if self.settings:
            for _item_settings in self.settings:
                if _item_settings:
                    _items.append(_item_settings.to_dict())
            _dict['settings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in themes (list)
        _items = []
        if self.themes:
            for _item_themes in self.themes:
                if _item_themes:
                    _items.append(_item_themes.to_dict())
            _dict['themes'] = _items
        # set to None if oauth_custom_scopes (nullable) is None
        # and model_fields_set contains the field
        if self.oauth_custom_scopes is None and "oauth_custom_scopes" in self.model_fields_set:
            _dict['oauthCustomScopes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeOrganizationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedOrigins": obj.get("allowedOrigins"),
            "colorPalettes": [DeclarativeColorPalette.from_dict(_item) for _item in obj["colorPalettes"]] if obj.get("colorPalettes") is not None else None,
            "cspDirectives": [DeclarativeCspDirective.from_dict(_item) for _item in obj["cspDirectives"]] if obj.get("cspDirectives") is not None else None,
            "earlyAccess": obj.get("earlyAccess"),
            "earlyAccessValues": obj.get("earlyAccessValues"),
            "hostname": obj.get("hostname"),
            "id": obj.get("id"),
            "identityProvider": DeclarativeIdentityProviderIdentifier.from_dict(obj["identityProvider"]) if obj.get("identityProvider") is not None else None,
            "name": obj.get("name"),
            "oauthClientId": obj.get("oauthClientId"),
            "oauthClientSecret": obj.get("oauthClientSecret"),
            "oauthCustomAuthAttributes": obj.get("oauthCustomAuthAttributes"),
            "oauthCustomScopes": obj.get("oauthCustomScopes"),
            "oauthIssuerId": obj.get("oauthIssuerId"),
            "oauthIssuerLocation": obj.get("oauthIssuerLocation"),
            "oauthSubjectIdClaim": obj.get("oauthSubjectIdClaim"),
            "permissions": [DeclarativeOrganizationPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "settings": [DeclarativeSetting.from_dict(_item) for _item in obj["settings"]] if obj.get("settings") is not None else None,
            "themes": [DeclarativeTheme.from_dict(_item) for _item in obj["themes"]] if obj.get("themes") is not None else None
        })
        return _obj


