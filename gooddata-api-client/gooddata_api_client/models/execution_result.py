# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from gooddata_api_client.models.dimension_header import DimensionHeader
from gooddata_api_client.models.execution_result_grand_total import ExecutionResultGrandTotal
from gooddata_api_client.models.execution_result_metadata import ExecutionResultMetadata
from gooddata_api_client.models.execution_result_paging import ExecutionResultPaging
from typing import Optional, Set
from typing_extensions import Self

class ExecutionResult(BaseModel):
    """
    Contains the result of an AFM execution.
    """ # noqa: E501
    data: List[Dict[str, Any]] = Field(description="A multi-dimensional array of computed results. The most common one being a 2-dimensional array. The arrays can be composed of Double or null values.")
    dimension_headers: List[DimensionHeader] = Field(description="An array containing dimension headers. The size of the array corresponds to the number of dimensions. Their order corresponds to the dimension order in the execution result spec.", alias="dimensionHeaders")
    grand_totals: List[ExecutionResultGrandTotal] = Field(alias="grandTotals")
    metadata: ExecutionResultMetadata
    paging: ExecutionResultPaging
    __properties: ClassVar[List[str]] = ["data", "dimensionHeaders", "grandTotals", "metadata", "paging"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecutionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_headers (list)
        _items = []
        if self.dimension_headers:
            for _item_dimension_headers in self.dimension_headers:
                if _item_dimension_headers:
                    _items.append(_item_dimension_headers.to_dict())
            _dict['dimensionHeaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grand_totals (list)
        _items = []
        if self.grand_totals:
            for _item_grand_totals in self.grand_totals:
                if _item_grand_totals:
                    _items.append(_item_grand_totals.to_dict())
            _dict['grandTotals'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of paging
        if self.paging:
            _dict['paging'] = self.paging.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecutionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "data": obj.get("data"),
            "dimensionHeaders": [DimensionHeader.from_dict(_item) for _item in obj["dimensionHeaders"]] if obj.get("dimensionHeaders") is not None else None,
            "grandTotals": [ExecutionResultGrandTotal.from_dict(_item) for _item in obj["grandTotals"]] if obj.get("grandTotals") is not None else None,
            "metadata": ExecutionResultMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "paging": ExecutionResultPaging.from_dict(obj["paging"]) if obj.get("paging") is not None else None
        })
        return _obj


