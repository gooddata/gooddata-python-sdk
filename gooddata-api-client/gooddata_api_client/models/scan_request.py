# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScanRequest(BaseModel):
    """
    A request containing all information critical to model scanning.
    """ # noqa: E501
    scan_tables: StrictBool = Field(description="A flag indicating whether the tables should be scanned.", alias="scanTables")
    scan_views: StrictBool = Field(description="A flag indicating whether the views should be scanned.", alias="scanViews")
    schemata: Optional[List[StrictStr]] = Field(default=None, description="What schemata will be scanned.")
    separator: StrictStr = Field(description="A separator between prefixes and the names.")
    table_prefix: Optional[StrictStr] = Field(default=None, description="Tables starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.", alias="tablePrefix")
    view_prefix: Optional[StrictStr] = Field(default=None, description="Views starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.", alias="viewPrefix")
    __properties: ClassVar[List[str]] = ["scanTables", "scanViews", "schemata", "separator", "tablePrefix", "viewPrefix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScanRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScanRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scanTables": obj.get("scanTables"),
            "scanViews": obj.get("scanViews"),
            "schemata": obj.get("schemata"),
            "separator": obj.get("separator"),
            "tablePrefix": obj.get("tablePrefix"),
            "viewPrefix": obj.get("viewPrefix")
        })
        return _obj


