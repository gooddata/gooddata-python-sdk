# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.declarative_analytical_dashboard import DeclarativeAnalyticalDashboard
from gooddata_api_client.models.declarative_analytical_dashboard_extension import DeclarativeAnalyticalDashboardExtension
from gooddata_api_client.models.declarative_attribute_hierarchy import DeclarativeAttributeHierarchy
from gooddata_api_client.models.declarative_dashboard_plugin import DeclarativeDashboardPlugin
from gooddata_api_client.models.declarative_export_definition import DeclarativeExportDefinition
from gooddata_api_client.models.declarative_filter_context import DeclarativeFilterContext
from gooddata_api_client.models.declarative_metric import DeclarativeMetric
from gooddata_api_client.models.declarative_visualization_object import DeclarativeVisualizationObject
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeAnalyticsLayer(BaseModel):
    """
    DeclarativeAnalyticsLayer
    """ # noqa: E501
    analytical_dashboard_extensions: Optional[List[DeclarativeAnalyticalDashboardExtension]] = Field(default=None, description="A list of dashboard permissions assigned to a related dashboard.", alias="analyticalDashboardExtensions")
    analytical_dashboards: Optional[List[DeclarativeAnalyticalDashboard]] = Field(default=None, description="A list of analytical dashboards available in the model.", alias="analyticalDashboards")
    attribute_hierarchies: Optional[List[DeclarativeAttributeHierarchy]] = Field(default=None, description="A list of attribute hierarchies.", alias="attributeHierarchies")
    dashboard_plugins: Optional[List[DeclarativeDashboardPlugin]] = Field(default=None, description="A list of dashboard plugins available in the model.", alias="dashboardPlugins")
    export_definitions: Optional[List[DeclarativeExportDefinition]] = Field(default=None, description="A list of export definitions.", alias="exportDefinitions")
    filter_contexts: Optional[List[DeclarativeFilterContext]] = Field(default=None, description="A list of filter contexts available in the model.", alias="filterContexts")
    metrics: Optional[List[DeclarativeMetric]] = Field(default=None, description="A list of metrics available in the model.")
    visualization_objects: Optional[List[DeclarativeVisualizationObject]] = Field(default=None, description="A list of visualization objects available in the model.", alias="visualizationObjects")
    __properties: ClassVar[List[str]] = ["analyticalDashboardExtensions", "analyticalDashboards", "attributeHierarchies", "dashboardPlugins", "exportDefinitions", "filterContexts", "metrics", "visualizationObjects"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeAnalyticsLayer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in analytical_dashboard_extensions (list)
        _items = []
        if self.analytical_dashboard_extensions:
            for _item_analytical_dashboard_extensions in self.analytical_dashboard_extensions:
                if _item_analytical_dashboard_extensions:
                    _items.append(_item_analytical_dashboard_extensions.to_dict())
            _dict['analyticalDashboardExtensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in analytical_dashboards (list)
        _items = []
        if self.analytical_dashboards:
            for _item_analytical_dashboards in self.analytical_dashboards:
                if _item_analytical_dashboards:
                    _items.append(_item_analytical_dashboards.to_dict())
            _dict['analyticalDashboards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attribute_hierarchies (list)
        _items = []
        if self.attribute_hierarchies:
            for _item_attribute_hierarchies in self.attribute_hierarchies:
                if _item_attribute_hierarchies:
                    _items.append(_item_attribute_hierarchies.to_dict())
            _dict['attributeHierarchies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dashboard_plugins (list)
        _items = []
        if self.dashboard_plugins:
            for _item_dashboard_plugins in self.dashboard_plugins:
                if _item_dashboard_plugins:
                    _items.append(_item_dashboard_plugins.to_dict())
            _dict['dashboardPlugins'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in export_definitions (list)
        _items = []
        if self.export_definitions:
            for _item_export_definitions in self.export_definitions:
                if _item_export_definitions:
                    _items.append(_item_export_definitions.to_dict())
            _dict['exportDefinitions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter_contexts (list)
        _items = []
        if self.filter_contexts:
            for _item_filter_contexts in self.filter_contexts:
                if _item_filter_contexts:
                    _items.append(_item_filter_contexts.to_dict())
            _dict['filterContexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in visualization_objects (list)
        _items = []
        if self.visualization_objects:
            for _item_visualization_objects in self.visualization_objects:
                if _item_visualization_objects:
                    _items.append(_item_visualization_objects.to_dict())
            _dict['visualizationObjects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeAnalyticsLayer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticalDashboardExtensions": [DeclarativeAnalyticalDashboardExtension.from_dict(_item) for _item in obj["analyticalDashboardExtensions"]] if obj.get("analyticalDashboardExtensions") is not None else None,
            "analyticalDashboards": [DeclarativeAnalyticalDashboard.from_dict(_item) for _item in obj["analyticalDashboards"]] if obj.get("analyticalDashboards") is not None else None,
            "attributeHierarchies": [DeclarativeAttributeHierarchy.from_dict(_item) for _item in obj["attributeHierarchies"]] if obj.get("attributeHierarchies") is not None else None,
            "dashboardPlugins": [DeclarativeDashboardPlugin.from_dict(_item) for _item in obj["dashboardPlugins"]] if obj.get("dashboardPlugins") is not None else None,
            "exportDefinitions": [DeclarativeExportDefinition.from_dict(_item) for _item in obj["exportDefinitions"]] if obj.get("exportDefinitions") is not None else None,
            "filterContexts": [DeclarativeFilterContext.from_dict(_item) for _item in obj["filterContexts"]] if obj.get("filterContexts") is not None else None,
            "metrics": [DeclarativeMetric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "visualizationObjects": [DeclarativeVisualizationObject.from_dict(_item) for _item in obj["visualizationObjects"]] if obj.get("visualizationObjects") is not None else None
        })
        return _obj


