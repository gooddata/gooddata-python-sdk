# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.afm import AFM
from gooddata_api_client.models.execution_settings import ExecutionSettings
from gooddata_api_client.models.raw_custom_override import RawCustomOverride
from typing import Optional, Set
from typing_extensions import Self

class RawExportRequest(BaseModel):
    """
    Export request object describing the export properties and overrides for raw exports.
    """ # noqa: E501
    custom_override: Optional[RawCustomOverride] = Field(default=None, alias="customOverride")
    execution: AFM
    execution_settings: Optional[ExecutionSettings] = Field(default=None, alias="executionSettings")
    file_name: StrictStr = Field(description="Filename of downloaded file without extension.", alias="fileName")
    format: StrictStr = Field(description="Requested resulting file type.")
    __properties: ClassVar[List[str]] = ["customOverride", "execution", "executionSettings", "fileName", "format"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ARROW_FILE', 'ARROW_STREAM', 'CSV']):
            raise ValueError("must be one of enum values ('ARROW_FILE', 'ARROW_STREAM', 'CSV')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawExportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_override
        if self.custom_override:
            _dict['customOverride'] = self.custom_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution
        if self.execution:
            _dict['execution'] = self.execution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_settings
        if self.execution_settings:
            _dict['executionSettings'] = self.execution_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawExportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customOverride": RawCustomOverride.from_dict(obj["customOverride"]) if obj.get("customOverride") is not None else None,
            "execution": AFM.from_dict(obj["execution"]) if obj.get("execution") is not None else None,
            "executionSettings": ExecutionSettings.from_dict(obj["executionSettings"]) if obj.get("executionSettings") is not None else None,
            "fileName": obj.get("fileName"),
            "format": obj.get("format")
        })
        return _obj


