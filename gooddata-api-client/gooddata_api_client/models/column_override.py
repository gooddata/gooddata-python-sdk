# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ColumnOverride(BaseModel):
    """
    Table column override.
    """ # noqa: E501
    label_target_column: Optional[StrictStr] = Field(default=None, description="Specifies the attribute's column to which this label is associated.", alias="labelTargetColumn")
    label_type: Optional[StrictStr] = Field(default=None, description="Label type for the target attribute.", alias="labelType")
    ldm_type_override: Optional[StrictStr] = Field(default=None, description="Logical Data Model type for the column.", alias="ldmTypeOverride")
    name: StrictStr = Field(description="Column name.")
    __properties: ClassVar[List[str]] = ["labelTargetColumn", "labelType", "ldmTypeOverride", "name"]

    @field_validator('label_type')
    def label_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEXT', 'HYPERLINK', 'GEO', 'GEO_LONGITUDE', 'GEO_LATITUDE', 'IMAGE']):
            raise ValueError("must be one of enum values ('TEXT', 'HYPERLINK', 'GEO', 'GEO_LONGITUDE', 'GEO_LATITUDE', 'IMAGE')")
        return value

    @field_validator('ldm_type_override')
    def ldm_type_override_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FACT', 'LABEL']):
            raise ValueError("must be one of enum values ('FACT', 'LABEL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColumnOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColumnOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "labelTargetColumn": obj.get("labelTargetColumn"),
            "labelType": obj.get("labelType"),
            "ldmTypeOverride": obj.get("ldmTypeOverride"),
            "name": obj.get("name")
        })
        return _obj


