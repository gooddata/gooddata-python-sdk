# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.data_source_parameter import DataSourceParameter
from typing import Optional, Set
from typing_extensions import Self

class TestRequest(BaseModel):
    """
    A request containing all information for testing existing data source.
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Id for client based authentication for data sources which supports it.", alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, description="Secret for client based authentication for data sources which supports it.", alias="clientSecret")
    parameters: Optional[List[DataSourceParameter]] = None
    password: Optional[StrictStr] = Field(default=None, description="Database user password.")
    private_key: Optional[StrictStr] = Field(default=None, description="Private key for data sources which supports key-pair authentication.", alias="privateKey")
    private_key_passphrase: Optional[StrictStr] = Field(default=None, description="Passphrase for a encrypted version of a private key.", alias="privateKeyPassphrase")
    var_schema: Optional[StrictStr] = Field(default=None, description="Database schema.", alias="schema")
    token: Optional[StrictStr] = Field(default=None, description="Secret for token based authentication for data sources which supports it.")
    url: Optional[StrictStr] = Field(default=None, description="URL to database in JDBC format, where test should connect to.")
    username: Optional[StrictStr] = Field(default=None, description="Database user name.")
    __properties: ClassVar[List[str]] = ["clientId", "clientSecret", "parameters", "password", "privateKey", "privateKeyPassphrase", "schema", "token", "url", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "parameters": [DataSourceParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "password": obj.get("password"),
            "privateKey": obj.get("privateKey"),
            "privateKeyPassphrase": obj.get("privateKeyPassphrase"),
            "schema": obj.get("schema"),
            "token": obj.get("token"),
            "url": obj.get("url"),
            "username": obj.get("username")
        })
        return _obj


