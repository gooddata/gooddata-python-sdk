# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.attribute_elements import AttributeElements
from gooddata_api_client.models.attribute_filter_by_date import AttributeFilterByDate
from gooddata_api_client.models.attribute_filter_parent import AttributeFilterParent
from gooddata_api_client.models.identifier_ref import IdentifierRef
from typing import Optional, Set
from typing_extensions import Self

class DashboardAttributeFilterAttributeFilter(BaseModel):
    """
    DashboardAttributeFilterAttributeFilter
    """ # noqa: E501
    attribute_elements: AttributeElements = Field(alias="attributeElements")
    display_form: IdentifierRef = Field(alias="displayForm")
    filter_elements_by: Optional[List[AttributeFilterParent]] = Field(default=None, alias="filterElementsBy")
    filter_elements_by_date: Optional[List[AttributeFilterByDate]] = Field(default=None, alias="filterElementsByDate")
    local_identifier: Optional[StrictStr] = Field(default=None, alias="localIdentifier")
    negative_selection: StrictBool = Field(alias="negativeSelection")
    selection_mode: Optional[StrictStr] = Field(default=None, alias="selectionMode")
    title: Optional[StrictStr] = None
    validate_elements_by: Optional[List[IdentifierRef]] = Field(default=None, alias="validateElementsBy")
    __properties: ClassVar[List[str]] = ["attributeElements", "displayForm", "filterElementsBy", "filterElementsByDate", "localIdentifier", "negativeSelection", "selectionMode", "title", "validateElementsBy"]

    @field_validator('selection_mode')
    def selection_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['single', 'multi']):
            raise ValueError("must be one of enum values ('single', 'multi')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DashboardAttributeFilterAttributeFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attribute_elements
        if self.attribute_elements:
            _dict['attributeElements'] = self.attribute_elements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_form
        if self.display_form:
            _dict['displayForm'] = self.display_form.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filter_elements_by (list)
        _items = []
        if self.filter_elements_by:
            for _item_filter_elements_by in self.filter_elements_by:
                if _item_filter_elements_by:
                    _items.append(_item_filter_elements_by.to_dict())
            _dict['filterElementsBy'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filter_elements_by_date (list)
        _items = []
        if self.filter_elements_by_date:
            for _item_filter_elements_by_date in self.filter_elements_by_date:
                if _item_filter_elements_by_date:
                    _items.append(_item_filter_elements_by_date.to_dict())
            _dict['filterElementsByDate'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in validate_elements_by (list)
        _items = []
        if self.validate_elements_by:
            for _item_validate_elements_by in self.validate_elements_by:
                if _item_validate_elements_by:
                    _items.append(_item_validate_elements_by.to_dict())
            _dict['validateElementsBy'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DashboardAttributeFilterAttributeFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeElements": AttributeElements.from_dict(obj["attributeElements"]) if obj.get("attributeElements") is not None else None,
            "displayForm": IdentifierRef.from_dict(obj["displayForm"]) if obj.get("displayForm") is not None else None,
            "filterElementsBy": [AttributeFilterParent.from_dict(_item) for _item in obj["filterElementsBy"]] if obj.get("filterElementsBy") is not None else None,
            "filterElementsByDate": [AttributeFilterByDate.from_dict(_item) for _item in obj["filterElementsByDate"]] if obj.get("filterElementsByDate") is not None else None,
            "localIdentifier": obj.get("localIdentifier"),
            "negativeSelection": obj.get("negativeSelection"),
            "selectionMode": obj.get("selectionMode"),
            "title": obj.get("title"),
            "validateElementsBy": [IdentifierRef.from_dict(_item) for _item in obj["validateElementsBy"]] if obj.get("validateElementsBy") is not None else None
        })
        return _obj


