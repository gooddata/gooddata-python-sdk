# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from gooddata_api_client.models.created_visualization import CreatedVisualization
from gooddata_api_client.models.suggestion import Suggestion
from typing import Optional, Set
from typing_extensions import Self

class CreatedVisualizations(BaseModel):
    """
    Visualization definitions created by AI.
    """ # noqa: E501
    objects: List[CreatedVisualization] = Field(description="List of created visualization objects")
    reasoning: StrictStr = Field(description="Reasoning from LLM. Description of how and why the answer was generated.")
    suggestions: List[Suggestion] = Field(description="List of suggestions for next steps. Filled when no visualization was created, suggests alternatives.")
    __properties: ClassVar[List[str]] = ["objects", "reasoning", "suggestions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreatedVisualizations from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in suggestions (list)
        _items = []
        if self.suggestions:
            for _item_suggestions in self.suggestions:
                if _item_suggestions:
                    _items.append(_item_suggestions.to_dict())
            _dict['suggestions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreatedVisualizations from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "objects": [CreatedVisualization.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "reasoning": obj.get("reasoning"),
            "suggestions": [Suggestion.from_dict(_item) for _item in obj["suggestions"]] if obj.get("suggestions") is not None else None
        })
        return _obj


