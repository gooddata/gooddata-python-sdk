# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.declarative_data_source import DeclarativeDataSource
from gooddata_api_client.models.declarative_export_template import DeclarativeExportTemplate
from gooddata_api_client.models.declarative_identity_provider import DeclarativeIdentityProvider
from gooddata_api_client.models.declarative_jwk import DeclarativeJwk
from gooddata_api_client.models.declarative_notification_channel import DeclarativeNotificationChannel
from gooddata_api_client.models.declarative_organization_info import DeclarativeOrganizationInfo
from gooddata_api_client.models.declarative_user import DeclarativeUser
from gooddata_api_client.models.declarative_user_group import DeclarativeUserGroup
from gooddata_api_client.models.declarative_workspace import DeclarativeWorkspace
from gooddata_api_client.models.declarative_workspace_data_filter import DeclarativeWorkspaceDataFilter
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeOrganization(BaseModel):
    """
    Complete definition of an organization in a declarative form.
    """ # noqa: E501
    data_sources: Optional[List[DeclarativeDataSource]] = Field(default=None, alias="dataSources")
    export_templates: Optional[List[DeclarativeExportTemplate]] = Field(default=None, alias="exportTemplates")
    identity_providers: Optional[List[DeclarativeIdentityProvider]] = Field(default=None, alias="identityProviders")
    jwks: Optional[List[DeclarativeJwk]] = None
    notification_channels: Optional[List[DeclarativeNotificationChannel]] = Field(default=None, alias="notificationChannels")
    organization: DeclarativeOrganizationInfo
    user_groups: Optional[List[DeclarativeUserGroup]] = Field(default=None, alias="userGroups")
    users: Optional[List[DeclarativeUser]] = None
    workspace_data_filters: Optional[List[DeclarativeWorkspaceDataFilter]] = Field(default=None, alias="workspaceDataFilters")
    workspaces: Optional[List[DeclarativeWorkspace]] = None
    __properties: ClassVar[List[str]] = ["dataSources", "exportTemplates", "identityProviders", "jwks", "notificationChannels", "organization", "userGroups", "users", "workspaceDataFilters", "workspaces"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeOrganization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_sources (list)
        _items = []
        if self.data_sources:
            for _item_data_sources in self.data_sources:
                if _item_data_sources:
                    _items.append(_item_data_sources.to_dict())
            _dict['dataSources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in export_templates (list)
        _items = []
        if self.export_templates:
            for _item_export_templates in self.export_templates:
                if _item_export_templates:
                    _items.append(_item_export_templates.to_dict())
            _dict['exportTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in identity_providers (list)
        _items = []
        if self.identity_providers:
            for _item_identity_providers in self.identity_providers:
                if _item_identity_providers:
                    _items.append(_item_identity_providers.to_dict())
            _dict['identityProviders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jwks (list)
        _items = []
        if self.jwks:
            for _item_jwks in self.jwks:
                if _item_jwks:
                    _items.append(_item_jwks.to_dict())
            _dict['jwks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in notification_channels (list)
        _items = []
        if self.notification_channels:
            for _item_notification_channels in self.notification_channels:
                if _item_notification_channels:
                    _items.append(_item_notification_channels.to_dict())
            _dict['notificationChannels'] = _items
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_groups (list)
        _items = []
        if self.user_groups:
            for _item_user_groups in self.user_groups:
                if _item_user_groups:
                    _items.append(_item_user_groups.to_dict())
            _dict['userGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workspace_data_filters (list)
        _items = []
        if self.workspace_data_filters:
            for _item_workspace_data_filters in self.workspace_data_filters:
                if _item_workspace_data_filters:
                    _items.append(_item_workspace_data_filters.to_dict())
            _dict['workspaceDataFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workspaces (list)
        _items = []
        if self.workspaces:
            for _item_workspaces in self.workspaces:
                if _item_workspaces:
                    _items.append(_item_workspaces.to_dict())
            _dict['workspaces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeOrganization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataSources": [DeclarativeDataSource.from_dict(_item) for _item in obj["dataSources"]] if obj.get("dataSources") is not None else None,
            "exportTemplates": [DeclarativeExportTemplate.from_dict(_item) for _item in obj["exportTemplates"]] if obj.get("exportTemplates") is not None else None,
            "identityProviders": [DeclarativeIdentityProvider.from_dict(_item) for _item in obj["identityProviders"]] if obj.get("identityProviders") is not None else None,
            "jwks": [DeclarativeJwk.from_dict(_item) for _item in obj["jwks"]] if obj.get("jwks") is not None else None,
            "notificationChannels": [DeclarativeNotificationChannel.from_dict(_item) for _item in obj["notificationChannels"]] if obj.get("notificationChannels") is not None else None,
            "organization": DeclarativeOrganizationInfo.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "userGroups": [DeclarativeUserGroup.from_dict(_item) for _item in obj["userGroups"]] if obj.get("userGroups") is not None else None,
            "users": [DeclarativeUser.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None,
            "workspaceDataFilters": [DeclarativeWorkspaceDataFilter.from_dict(_item) for _item in obj["workspaceDataFilters"]] if obj.get("workspaceDataFilters") is not None else None,
            "workspaces": [DeclarativeWorkspace.from_dict(_item) for _item in obj["workspaces"]] if obj.get("workspaces") is not None else None
        })
        return _obj


