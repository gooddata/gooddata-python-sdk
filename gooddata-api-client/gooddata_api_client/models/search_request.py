# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SearchRequest(BaseModel):
    """
    SearchRequest
    """ # noqa: E501
    deep_search: Optional[StrictBool] = Field(default=False, description="Turn on deep search. If true, content of complex objects will be searched as well, e.g. metrics in visualizations.", alias="deepSearch")
    include_hidden: Optional[StrictBool] = Field(default=False, description="If true, includes hidden objects in search results. If false (default), excludes objects where isHidden=true.", alias="includeHidden")
    limit: Optional[StrictInt] = Field(default=10, description="Maximum number of results to return. There is a hard limit and the actual number of returned results may be lower than what is requested.")
    object_types: Optional[List[StrictStr]] = Field(default=None, description="List of object types to search for.", alias="objectTypes")
    question: Annotated[str, Field(strict=True, max_length=1000)] = Field(description="Keyword/sentence is input for search.")
    relevant_score_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.3, description="Score, above which we return found objects. Below this score objects are not relevant.", alias="relevantScoreThreshold")
    title_to_descriptor_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.7, description="Temporary for experiments. Ratio of title score to descriptor score.", alias="titleToDescriptorRatio")
    __properties: ClassVar[List[str]] = ["deepSearch", "includeHidden", "limit", "objectTypes", "question", "relevantScoreThreshold", "titleToDescriptorRatio"]

    @field_validator('object_types')
    def object_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['attribute', 'metric', 'fact', 'label', 'date', 'dataset', 'visualization', 'dashboard']):
                raise ValueError("each list item must be one of ('attribute', 'metric', 'fact', 'label', 'date', 'dataset', 'visualization', 'dashboard')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deepSearch": obj.get("deepSearch") if obj.get("deepSearch") is not None else False,
            "includeHidden": obj.get("includeHidden") if obj.get("includeHidden") is not None else False,
            "limit": obj.get("limit") if obj.get("limit") is not None else 10,
            "objectTypes": obj.get("objectTypes"),
            "question": obj.get("question"),
            "relevantScoreThreshold": obj.get("relevantScoreThreshold") if obj.get("relevantScoreThreshold") is not None else 0.3,
            "titleToDescriptorRatio": obj.get("titleToDescriptorRatio") if obj.get("titleToDescriptorRatio") is not None else 0.7
        })
        return _obj


