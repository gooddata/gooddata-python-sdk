# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.json_api_analytical_dashboard_out_relationships_created_by import JsonApiAnalyticalDashboardOutRelationshipsCreatedBy
from gooddata_api_client.models.json_api_analytical_dashboard_out_relationships_datasets import JsonApiAnalyticalDashboardOutRelationshipsDatasets
from gooddata_api_client.models.json_api_analytical_dashboard_out_relationships_labels import JsonApiAnalyticalDashboardOutRelationshipsLabels
from gooddata_api_client.models.json_api_analytical_dashboard_out_relationships_metrics import JsonApiAnalyticalDashboardOutRelationshipsMetrics
from gooddata_api_client.models.json_api_attribute_hierarchy_out_relationships_attributes import JsonApiAttributeHierarchyOutRelationshipsAttributes
from gooddata_api_client.models.json_api_dataset_out_relationships_facts import JsonApiDatasetOutRelationshipsFacts
from typing import Optional, Set
from typing_extensions import Self

class JsonApiMetricOutRelationships(BaseModel):
    """
    JsonApiMetricOutRelationships
    """ # noqa: E501
    attributes: Optional[JsonApiAttributeHierarchyOutRelationshipsAttributes] = None
    created_by: Optional[JsonApiAnalyticalDashboardOutRelationshipsCreatedBy] = Field(default=None, alias="createdBy")
    datasets: Optional[JsonApiAnalyticalDashboardOutRelationshipsDatasets] = None
    facts: Optional[JsonApiDatasetOutRelationshipsFacts] = None
    labels: Optional[JsonApiAnalyticalDashboardOutRelationshipsLabels] = None
    metrics: Optional[JsonApiAnalyticalDashboardOutRelationshipsMetrics] = None
    modified_by: Optional[JsonApiAnalyticalDashboardOutRelationshipsCreatedBy] = Field(default=None, alias="modifiedBy")
    __properties: ClassVar[List[str]] = ["attributes", "createdBy", "datasets", "facts", "labels", "metrics", "modifiedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiMetricOutRelationships from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of datasets
        if self.datasets:
            _dict['datasets'] = self.datasets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facts
        if self.facts:
            _dict['facts'] = self.facts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of labels
        if self.labels:
            _dict['labels'] = self.labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modified_by
        if self.modified_by:
            _dict['modifiedBy'] = self.modified_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiMetricOutRelationships from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": JsonApiAttributeHierarchyOutRelationshipsAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "createdBy": JsonApiAnalyticalDashboardOutRelationshipsCreatedBy.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "datasets": JsonApiAnalyticalDashboardOutRelationshipsDatasets.from_dict(obj["datasets"]) if obj.get("datasets") is not None else None,
            "facts": JsonApiDatasetOutRelationshipsFacts.from_dict(obj["facts"]) if obj.get("facts") is not None else None,
            "labels": JsonApiAnalyticalDashboardOutRelationshipsLabels.from_dict(obj["labels"]) if obj.get("labels") is not None else None,
            "metrics": JsonApiAnalyticalDashboardOutRelationshipsMetrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "modifiedBy": JsonApiAnalyticalDashboardOutRelationshipsCreatedBy.from_dict(obj["modifiedBy"]) if obj.get("modifiedBy") is not None else None
        })
        return _obj


