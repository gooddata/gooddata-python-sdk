# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.declarative_source_fact_reference import DeclarativeSourceFactReference
from typing import Optional, Set
from typing_extensions import Self

class DeclarativeAggregatedFact(BaseModel):
    """
    A dataset fact.
    """ # noqa: E501
    description: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = Field(default=None, description="Fact description.")
    id: Annotated[str, Field(strict=True)] = Field(description="Fact ID.")
    source_column: Annotated[str, Field(strict=True, max_length=255)] = Field(description="A name of the source column in the table.", alias="sourceColumn")
    source_column_data_type: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="A type of the source column", alias="sourceColumnDataType")
    source_fact_reference: DeclarativeSourceFactReference = Field(alias="sourceFactReference")
    tags: Optional[List[StrictStr]] = Field(default=None, description="A list of tags.")
    __properties: ClassVar[List[str]] = ["description", "id", "sourceColumn", "sourceColumnDataType", "sourceFactReference", "tags"]

    @field_validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!\.)[.A-Za-z0-9_-]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\.)[.A-Za-z0-9_-]{1,255}$/")
        return value

    @field_validator('source_column_data_type')
    def source_column_data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INT', 'STRING', 'DATE', 'NUMERIC', 'TIMESTAMP', 'TIMESTAMP_TZ', 'BOOLEAN']):
            raise ValueError("must be one of enum values ('INT', 'STRING', 'DATE', 'NUMERIC', 'TIMESTAMP', 'TIMESTAMP_TZ', 'BOOLEAN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeclarativeAggregatedFact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_fact_reference
        if self.source_fact_reference:
            _dict['sourceFactReference'] = self.source_fact_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeclarativeAggregatedFact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "sourceColumn": obj.get("sourceColumn"),
            "sourceColumnDataType": obj.get("sourceColumnDataType"),
            "sourceFactReference": DeclarativeSourceFactReference.from_dict(obj["sourceFactReference"]) if obj.get("sourceFactReference") is not None else None,
            "tags": obj.get("tags")
        })
        return _obj


