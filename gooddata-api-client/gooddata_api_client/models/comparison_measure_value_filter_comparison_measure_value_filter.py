# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from gooddata_api_client.models.afm_identifier import AfmIdentifier
from typing import Optional, Set
from typing_extensions import Self

class ComparisonMeasureValueFilterComparisonMeasureValueFilter(BaseModel):
    """
    ComparisonMeasureValueFilterComparisonMeasureValueFilter
    """ # noqa: E501
    apply_on_result: Optional[StrictBool] = Field(default=None, alias="applyOnResult")
    dimensionality: Optional[List[AfmIdentifier]] = Field(default=None, description="References to the attributes to be used when filtering.")
    local_identifier: Optional[StrictStr] = Field(default=None, alias="localIdentifier")
    measure: AfmIdentifier
    operator: StrictStr
    treat_null_values_as: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A value that will be substituted for null values in the metric for the comparisons.", alias="treatNullValuesAs")
    value: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["applyOnResult", "dimensionality", "localIdentifier", "measure", "operator", "treatNullValuesAs", "value"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['GREATER_THAN', 'GREATER_THAN_OR_EQUAL_TO', 'LESS_THAN', 'LESS_THAN_OR_EQUAL_TO', 'EQUAL_TO', 'NOT_EQUAL_TO']):
            raise ValueError("must be one of enum values ('GREATER_THAN', 'GREATER_THAN_OR_EQUAL_TO', 'LESS_THAN', 'LESS_THAN_OR_EQUAL_TO', 'EQUAL_TO', 'NOT_EQUAL_TO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComparisonMeasureValueFilterComparisonMeasureValueFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensionality (list)
        _items = []
        if self.dimensionality:
            for _item_dimensionality in self.dimensionality:
                if _item_dimensionality:
                    _items.append(_item_dimensionality.to_dict())
            _dict['dimensionality'] = _items
        # override the default output from pydantic by calling `to_dict()` of measure
        if self.measure:
            _dict['measure'] = self.measure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComparisonMeasureValueFilterComparisonMeasureValueFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applyOnResult": obj.get("applyOnResult"),
            "dimensionality": [AfmIdentifier.from_dict(_item) for _item in obj["dimensionality"]] if obj.get("dimensionality") is not None else None,
            "localIdentifier": obj.get("localIdentifier"),
            "measure": AfmIdentifier.from_dict(obj["measure"]) if obj.get("measure") is not None else None,
            "operator": obj.get("operator"),
            "treatNullValuesAs": obj.get("treatNullValuesAs"),
            "value": obj.get("value")
        })
        return _obj


