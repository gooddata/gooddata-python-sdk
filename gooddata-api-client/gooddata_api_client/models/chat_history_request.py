# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.saved_visualization import SavedVisualization
from typing import Optional, Set
from typing_extensions import Self

class ChatHistoryRequest(BaseModel):
    """
    ChatHistoryRequest
    """ # noqa: E501
    chat_history_interaction_id: Optional[StrictStr] = Field(default=None, description="Return chat history records only after this interaction ID. If empty, complete chat history is returned.", alias="chatHistoryInteractionId")
    reset: Optional[StrictBool] = Field(default=None, description="User feedback.")
    response_state: Optional[StrictStr] = Field(default=None, description="Response state indicating the outcome of the AI interaction.", alias="responseState")
    saved_visualization: Optional[SavedVisualization] = Field(default=None, alias="savedVisualization")
    thread_id_suffix: Optional[StrictStr] = Field(default=None, description="Chat History thread suffix appended to ID generated by backend. Enables more chat windows.", alias="threadIdSuffix")
    user_feedback: Optional[StrictStr] = Field(default=None, description="User feedback.", alias="userFeedback")
    __properties: ClassVar[List[str]] = ["chatHistoryInteractionId", "reset", "responseState", "savedVisualization", "threadIdSuffix", "userFeedback"]

    @field_validator('response_state')
    def response_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUCCESSFUL', 'UNEXPECTED_ERROR', 'NOT_FOUND_ATTRIBUTES', 'TOO_MANY_DATA_POINTS', 'NO_DATA', 'NO_RESULTS', 'OUT_OF_TOPIC']):
            raise ValueError("must be one of enum values ('SUCCESSFUL', 'UNEXPECTED_ERROR', 'NOT_FOUND_ATTRIBUTES', 'TOO_MANY_DATA_POINTS', 'NO_DATA', 'NO_RESULTS', 'OUT_OF_TOPIC')")
        return value

    @field_validator('user_feedback')
    def user_feedback_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POSITIVE', 'NEGATIVE', 'NONE']):
            raise ValueError("must be one of enum values ('POSITIVE', 'NEGATIVE', 'NONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatHistoryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of saved_visualization
        if self.saved_visualization:
            _dict['savedVisualization'] = self.saved_visualization.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatHistoryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chatHistoryInteractionId": obj.get("chatHistoryInteractionId"),
            "reset": obj.get("reset"),
            "responseState": obj.get("responseState"),
            "savedVisualization": SavedVisualization.from_dict(obj["savedVisualization"]) if obj.get("savedVisualization") is not None else None,
            "threadIdSuffix": obj.get("threadIdSuffix"),
            "userFeedback": obj.get("userFeedback")
        })
        return _obj


