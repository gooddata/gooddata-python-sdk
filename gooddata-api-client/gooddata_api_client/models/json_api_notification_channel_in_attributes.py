# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from gooddata_api_client.models.json_api_notification_channel_in_attributes_destination import JsonApiNotificationChannelInAttributesDestination
from typing import Optional, Set
from typing_extensions import Self

class JsonApiNotificationChannelInAttributes(BaseModel):
    """
    JsonApiNotificationChannelInAttributes
    """ # noqa: E501
    allowed_recipients: Optional[StrictStr] = Field(default=None, description="Allowed recipients of notifications from this channel. CREATOR - only the creator INTERNAL - all users within the organization EXTERNAL - all recipients including those outside the organization ", alias="allowedRecipients")
    custom_dashboard_url: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Custom dashboard url that is going to be used in the notification. If not specified it is going to be deduced based on the context. Allowed placeholders are: {workspaceId} {dashboardId} {automationId} {asOfDate} ", alias="customDashboardUrl")
    dashboard_link_visibility: Optional[StrictStr] = Field(default=None, description="Dashboard link visibility in notifications. HIDDEN - the link will not be included INTERNAL_ONLY - only internal users will see the link ALL - all users will see the link ", alias="dashboardLinkVisibility")
    description: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = None
    destination: Optional[JsonApiNotificationChannelInAttributesDestination] = None
    in_platform_notification: Optional[StrictStr] = Field(default=None, description="In-platform notifications configuration. No effect if the destination type is IN_PLATFORM. DISABLED - in-platform notifications are not sent ENABLED - in-platform notifications are sent in addition to the regular notifications ", alias="inPlatformNotification")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    notification_source: Optional[Annotated[str, Field(strict=True, max_length=10000)]] = Field(default=None, description="Human-readable description of the source of the notification. If specified, this propertywill be included in the notifications to this channel.Allowed placeholders are: {{workspaceId}} {{workspaceName}} {{workspaceDescription}} {{dashboardId}} {{dashboardName}} {{dashboardDescription}} ", alias="notificationSource")
    __properties: ClassVar[List[str]] = ["allowedRecipients", "customDashboardUrl", "dashboardLinkVisibility", "description", "destination", "inPlatformNotification", "name", "notificationSource"]

    @field_validator('allowed_recipients')
    def allowed_recipients_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATOR', 'INTERNAL', 'EXTERNAL']):
            raise ValueError("must be one of enum values ('CREATOR', 'INTERNAL', 'EXTERNAL')")
        return value

    @field_validator('dashboard_link_visibility')
    def dashboard_link_visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HIDDEN', 'INTERNAL_ONLY', 'ALL']):
            raise ValueError("must be one of enum values ('HIDDEN', 'INTERNAL_ONLY', 'ALL')")
        return value

    @field_validator('in_platform_notification')
    def in_platform_notification_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISABLED', 'ENABLED']):
            raise ValueError("must be one of enum values ('DISABLED', 'ENABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonApiNotificationChannelInAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonApiNotificationChannelInAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedRecipients": obj.get("allowedRecipients"),
            "customDashboardUrl": obj.get("customDashboardUrl"),
            "dashboardLinkVisibility": obj.get("dashboardLinkVisibility"),
            "description": obj.get("description"),
            "destination": JsonApiNotificationChannelInAttributesDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "inPlatformNotification": obj.get("inPlatformNotification"),
            "name": obj.get("name"),
            "notificationSource": obj.get("notificationSource")
        })
        return _obj


