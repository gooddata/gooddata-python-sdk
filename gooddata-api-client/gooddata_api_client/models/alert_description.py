# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from gooddata_api_client.models.alert_evaluation_row import AlertEvaluationRow
from typing import Optional, Set
from typing_extensions import Self

class AlertDescription(BaseModel):
    """
    AlertDescription
    """ # noqa: E501
    attribute: Optional[StrictStr] = None
    condition: StrictStr
    current_values: Optional[List[AlertEvaluationRow]] = Field(default=None, alias="currentValues")
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    formatted_threshold: Optional[StrictStr] = Field(default=None, alias="formattedThreshold")
    lower_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lowerThreshold")
    metric: StrictStr
    remaining_alert_evaluation_count: Optional[StrictInt] = Field(default=None, alias="remainingAlertEvaluationCount")
    status: Optional[StrictStr] = None
    threshold: Optional[Union[StrictFloat, StrictInt]] = None
    total_value_count: Optional[StrictInt] = Field(default=None, alias="totalValueCount")
    trace_id: Optional[StrictStr] = Field(default=None, alias="traceId")
    triggered_at: Optional[datetime] = Field(default=None, alias="triggeredAt")
    triggered_count: Optional[StrictInt] = Field(default=None, alias="triggeredCount")
    upper_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="upperThreshold")
    __properties: ClassVar[List[str]] = ["attribute", "condition", "currentValues", "errorMessage", "formattedThreshold", "lowerThreshold", "metric", "remainingAlertEvaluationCount", "status", "threshold", "totalValueCount", "traceId", "triggeredAt", "triggeredCount", "upperThreshold"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUCCESS', 'ERROR', 'INTERNAL_ERROR', 'TIMEOUT']):
            raise ValueError("must be one of enum values ('SUCCESS', 'ERROR', 'INTERNAL_ERROR', 'TIMEOUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in current_values (list)
        _items = []
        if self.current_values:
            for _item_current_values in self.current_values:
                if _item_current_values:
                    _items.append(_item_current_values.to_dict())
            _dict['currentValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attribute": obj.get("attribute"),
            "condition": obj.get("condition"),
            "currentValues": [AlertEvaluationRow.from_dict(_item) for _item in obj["currentValues"]] if obj.get("currentValues") is not None else None,
            "errorMessage": obj.get("errorMessage"),
            "formattedThreshold": obj.get("formattedThreshold"),
            "lowerThreshold": obj.get("lowerThreshold"),
            "metric": obj.get("metric"),
            "remainingAlertEvaluationCount": obj.get("remainingAlertEvaluationCount"),
            "status": obj.get("status"),
            "threshold": obj.get("threshold"),
            "totalValueCount": obj.get("totalValueCount"),
            "traceId": obj.get("traceId"),
            "triggeredAt": obj.get("triggeredAt"),
            "triggeredCount": obj.get("triggeredCount"),
            "upperThreshold": obj.get("upperThreshold")
        })
        return _obj


