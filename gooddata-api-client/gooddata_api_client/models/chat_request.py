# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from gooddata_api_client.models.user_context import UserContext
from typing import Optional, Set
from typing_extensions import Self

class ChatRequest(BaseModel):
    """
    ChatRequest
    """ # noqa: E501
    limit_create: Optional[StrictInt] = Field(default=3, description="Maximum number of created results.", alias="limitCreate")
    limit_create_context: Optional[StrictInt] = Field(default=10, description="Maximum number of relevant objects included into context for LLM (for each object type).", alias="limitCreateContext")
    limit_search: Optional[StrictInt] = Field(default=5, description="Maximum number of search results.", alias="limitSearch")
    question: Annotated[str, Field(strict=True, max_length=2000)] = Field(description="User question")
    relevant_score_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.45, description="Score, above which we return found objects. Below this score objects are not relevant.", alias="relevantScoreThreshold")
    search_score_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.9, description="Score, above which we return found object(s) and don't call LLM to create new objects.", alias="searchScoreThreshold")
    thread_id_suffix: Optional[StrictStr] = Field(default=None, description="Chat History thread suffix appended to ID generated by backend. Enables more chat windows.", alias="threadIdSuffix")
    title_to_descriptor_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.7, description="Temporary for experiments. Ratio of title score to descriptor score.", alias="titleToDescriptorRatio")
    user_context: Optional[UserContext] = Field(default=None, alias="userContext")
    __properties: ClassVar[List[str]] = ["limitCreate", "limitCreateContext", "limitSearch", "question", "relevantScoreThreshold", "searchScoreThreshold", "threadIdSuffix", "titleToDescriptorRatio", "userContext"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_context
        if self.user_context:
            _dict['userContext'] = self.user_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "limitCreate": obj.get("limitCreate") if obj.get("limitCreate") is not None else 3,
            "limitCreateContext": obj.get("limitCreateContext") if obj.get("limitCreateContext") is not None else 10,
            "limitSearch": obj.get("limitSearch") if obj.get("limitSearch") is not None else 5,
            "question": obj.get("question"),
            "relevantScoreThreshold": obj.get("relevantScoreThreshold") if obj.get("relevantScoreThreshold") is not None else 0.45,
            "searchScoreThreshold": obj.get("searchScoreThreshold") if obj.get("searchScoreThreshold") is not None else 0.9,
            "threadIdSuffix": obj.get("threadIdSuffix"),
            "titleToDescriptorRatio": obj.get("titleToDescriptorRatio") if obj.get("titleToDescriptorRatio") is not None else 0.7,
            "userContext": UserContext.from_dict(obj["userContext"]) if obj.get("userContext") is not None else None
        })
        return _obj


