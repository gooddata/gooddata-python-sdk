# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gooddata_api_client.models.custom_override import CustomOverride
from gooddata_api_client.models.settings import Settings
from typing import Optional, Set
from typing_extensions import Self

class TabularExportRequest(BaseModel):
    """
    Export request object describing the export properties and overrides for tabular exports.
    """ # noqa: E501
    custom_override: Optional[CustomOverride] = Field(default=None, alias="customOverride")
    execution_result: Optional[StrictStr] = Field(default=None, description="Execution result identifier.", alias="executionResult")
    file_name: StrictStr = Field(description="Filename of downloaded file without extension.", alias="fileName")
    format: StrictStr = Field(description="Expected file format.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Free-form JSON object")
    related_dashboard_id: Optional[StrictStr] = Field(default=None, description="Analytical dashboard identifier. Optional identifier, which informs the system that the export is related to a specific dashboard.", alias="relatedDashboardId")
    settings: Optional[Settings] = None
    visualization_object: Optional[StrictStr] = Field(default=None, description="Visualization object identifier. Alternative to executionResult property.", alias="visualizationObject")
    visualization_object_custom_filters: Optional[List[Dict[str, Any]]] = Field(default=None, description="Optional custom filters (as array of IFilter objects defined in UI SDK) to be applied when visualizationObject is given. Those filters override the original filters defined in the visualization.", alias="visualizationObjectCustomFilters")
    __properties: ClassVar[List[str]] = ["customOverride", "executionResult", "fileName", "format", "metadata", "relatedDashboardId", "settings", "visualizationObject", "visualizationObjectCustomFilters"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CSV', 'XLSX', 'HTML', 'PDF']):
            raise ValueError("must be one of enum values ('CSV', 'XLSX', 'HTML', 'PDF')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TabularExportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_override
        if self.custom_override:
            _dict['customOverride'] = self.custom_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TabularExportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customOverride": CustomOverride.from_dict(obj["customOverride"]) if obj.get("customOverride") is not None else None,
            "executionResult": obj.get("executionResult"),
            "fileName": obj.get("fileName"),
            "format": obj.get("format"),
            "metadata": obj.get("metadata"),
            "relatedDashboardId": obj.get("relatedDashboardId"),
            "settings": Settings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "visualizationObject": obj.get("visualizationObject"),
            "visualizationObjectCustomFilters": obj.get("visualizationObjectCustomFilters")
        })
        return _obj


