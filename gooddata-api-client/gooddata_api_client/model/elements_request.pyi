# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class ElementsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "label",
        }
        
        class properties:
            
            
            class label(
                schemas.StrSchema
            ):
                pass
            complementFilter = schemas.BoolSchema
            dataSamplingPercentage = schemas.Float32Schema
            
            
            class exactFilter(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exactFilter':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            excludePrimaryLabel = schemas.BoolSchema
        
            @staticmethod
            def filterBy() -> typing.Type['FilterBy']:
                return FilterBy
            patternFilter = schemas.StrSchema
            
            
            class sortOrder(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ASC(cls):
                    return cls("ASC")
                
                @schemas.classproperty
                def DESC(cls):
                    return cls("DESC")
            __annotations__ = {
                "label": label,
                "complementFilter": complementFilter,
                "dataSamplingPercentage": dataSamplingPercentage,
                "exactFilter": exactFilter,
                "excludePrimaryLabel": excludePrimaryLabel,
                "filterBy": filterBy,
                "patternFilter": patternFilter,
                "sortOrder": sortOrder,
            }
    
    label: MetaOapg.properties.label
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complementFilter"]) -> MetaOapg.properties.complementFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSamplingPercentage"]) -> MetaOapg.properties.dataSamplingPercentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exactFilter"]) -> MetaOapg.properties.exactFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludePrimaryLabel"]) -> MetaOapg.properties.excludePrimaryLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterBy"]) -> 'FilterBy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["patternFilter"]) -> MetaOapg.properties.patternFilter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "complementFilter", "dataSamplingPercentage", "exactFilter", "excludePrimaryLabel", "filterBy", "patternFilter", "sortOrder", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complementFilter"]) -> typing.Union[MetaOapg.properties.complementFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSamplingPercentage"]) -> typing.Union[MetaOapg.properties.dataSamplingPercentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exactFilter"]) -> typing.Union[MetaOapg.properties.exactFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludePrimaryLabel"]) -> typing.Union[MetaOapg.properties.excludePrimaryLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterBy"]) -> typing.Union['FilterBy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["patternFilter"]) -> typing.Union[MetaOapg.properties.patternFilter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> typing.Union[MetaOapg.properties.sortOrder, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "complementFilter", "dataSamplingPercentage", "exactFilter", "excludePrimaryLabel", "filterBy", "patternFilter", "sortOrder", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        label: typing.Union[MetaOapg.properties.label, str, ],
        complementFilter: typing.Union[MetaOapg.properties.complementFilter, bool, schemas.Unset] = schemas.unset,
        dataSamplingPercentage: typing.Union[MetaOapg.properties.dataSamplingPercentage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        exactFilter: typing.Union[MetaOapg.properties.exactFilter, list, tuple, schemas.Unset] = schemas.unset,
        excludePrimaryLabel: typing.Union[MetaOapg.properties.excludePrimaryLabel, bool, schemas.Unset] = schemas.unset,
        filterBy: typing.Union['FilterBy', schemas.Unset] = schemas.unset,
        patternFilter: typing.Union[MetaOapg.properties.patternFilter, str, schemas.Unset] = schemas.unset,
        sortOrder: typing.Union[MetaOapg.properties.sortOrder, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ElementsRequest':
        return super().__new__(
            cls,
            *_args,
            label=label,
            complementFilter=complementFilter,
            dataSamplingPercentage=dataSamplingPercentage,
            exactFilter=exactFilter,
            excludePrimaryLabel=excludePrimaryLabel,
            filterBy=filterBy,
            patternFilter=patternFilter,
            sortOrder=sortOrder,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.filter_by import FilterBy
