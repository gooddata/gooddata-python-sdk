# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class ScanRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A request containing all information critical to model scanning.
    """


    class MetaOapg:
        required = {
            "scanViews",
            "scanTables",
            "separator",
        }
        
        class properties:
            scanTables = schemas.BoolSchema
            scanViews = schemas.BoolSchema
            separator = schemas.StrSchema
            
            
            class schemata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'schemata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            tablePrefix = schemas.StrSchema
            viewPrefix = schemas.StrSchema
            __annotations__ = {
                "scanTables": scanTables,
                "scanViews": scanViews,
                "separator": separator,
                "schemata": schemata,
                "tablePrefix": tablePrefix,
                "viewPrefix": viewPrefix,
            }
    
    scanViews: MetaOapg.properties.scanViews
    scanTables: MetaOapg.properties.scanTables
    separator: MetaOapg.properties.separator
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanTables"]) -> MetaOapg.properties.scanTables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanViews"]) -> MetaOapg.properties.scanViews: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["separator"]) -> MetaOapg.properties.separator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schemata"]) -> MetaOapg.properties.schemata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tablePrefix"]) -> MetaOapg.properties.tablePrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewPrefix"]) -> MetaOapg.properties.viewPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["scanTables", "scanViews", "separator", "schemata", "tablePrefix", "viewPrefix", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanTables"]) -> MetaOapg.properties.scanTables: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanViews"]) -> MetaOapg.properties.scanViews: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["separator"]) -> MetaOapg.properties.separator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schemata"]) -> typing.Union[MetaOapg.properties.schemata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tablePrefix"]) -> typing.Union[MetaOapg.properties.tablePrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewPrefix"]) -> typing.Union[MetaOapg.properties.viewPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["scanTables", "scanViews", "separator", "schemata", "tablePrefix", "viewPrefix", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        scanViews: typing.Union[MetaOapg.properties.scanViews, bool, ],
        scanTables: typing.Union[MetaOapg.properties.scanTables, bool, ],
        separator: typing.Union[MetaOapg.properties.separator, str, ],
        schemata: typing.Union[MetaOapg.properties.schemata, list, tuple, schemas.Unset] = schemas.unset,
        tablePrefix: typing.Union[MetaOapg.properties.tablePrefix, str, schemas.Unset] = schemas.unset,
        viewPrefix: typing.Union[MetaOapg.properties.viewPrefix, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ScanRequest':
        return super().__new__(
            cls,
            *_args,
            scanViews=scanViews,
            scanTables=scanTables,
            separator=separator,
            schemata=schemata,
            tablePrefix=tablePrefix,
            viewPrefix=viewPrefix,
            _configuration=_configuration,
            **kwargs,
        )
