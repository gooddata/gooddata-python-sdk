# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class DeclarativeOrganizationInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information available about an organization.
    """


    class MetaOapg:
        required = {
            "hostname",
            "permissions",
            "name",
            "id",
        }
        
        class properties:
            
            
            class hostname(
                schemas.StrSchema
            ):
                pass
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class permissions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeOrganizationPermission']:
                        return DeclarativeOrganizationPermission
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeOrganizationPermission'], typing.List['DeclarativeOrganizationPermission']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeOrganizationPermission':
                    return super().__getitem__(i)
            
            
            class colorPalettes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeColorPalette']:
                        return DeclarativeColorPalette
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeColorPalette'], typing.List['DeclarativeColorPalette']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'colorPalettes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeColorPalette':
                    return super().__getitem__(i)
            
            
            class cspDirectives(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeCspDirective']:
                        return DeclarativeCspDirective
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeCspDirective'], typing.List['DeclarativeCspDirective']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cspDirectives':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeCspDirective':
                    return super().__getitem__(i)
            
            
            class earlyAccess(
                schemas.StrSchema
            ):
                pass
            
            
            class oauthClientId(
                schemas.StrSchema
            ):
                pass
            
            
            class oauthClientSecret(
                schemas.StrSchema
            ):
                pass
            
            
            class oauthIssuerId(
                schemas.StrSchema
            ):
                pass
            
            
            class oauthIssuerLocation(
                schemas.StrSchema
            ):
                pass
            
            
            class settings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeSetting']:
                        return DeclarativeSetting
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeSetting'], typing.List['DeclarativeSetting']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'settings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeSetting':
                    return super().__getitem__(i)
            
            
            class themes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeTheme']:
                        return DeclarativeTheme
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeTheme'], typing.List['DeclarativeTheme']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'themes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeTheme':
                    return super().__getitem__(i)
            __annotations__ = {
                "hostname": hostname,
                "id": id,
                "name": name,
                "permissions": permissions,
                "colorPalettes": colorPalettes,
                "cspDirectives": cspDirectives,
                "earlyAccess": earlyAccess,
                "oauthClientId": oauthClientId,
                "oauthClientSecret": oauthClientSecret,
                "oauthIssuerId": oauthIssuerId,
                "oauthIssuerLocation": oauthIssuerLocation,
                "settings": settings,
                "themes": themes,
            }
    
    hostname: MetaOapg.properties.hostname
    permissions: MetaOapg.properties.permissions
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colorPalettes"]) -> MetaOapg.properties.colorPalettes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cspDirectives"]) -> MetaOapg.properties.cspDirectives: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earlyAccess"]) -> MetaOapg.properties.earlyAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauthClientId"]) -> MetaOapg.properties.oauthClientId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauthClientSecret"]) -> MetaOapg.properties.oauthClientSecret: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauthIssuerId"]) -> MetaOapg.properties.oauthIssuerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oauthIssuerLocation"]) -> MetaOapg.properties.oauthIssuerLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["themes"]) -> MetaOapg.properties.themes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["hostname", "id", "name", "permissions", "colorPalettes", "cspDirectives", "earlyAccess", "oauthClientId", "oauthClientSecret", "oauthIssuerId", "oauthIssuerLocation", "settings", "themes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colorPalettes"]) -> typing.Union[MetaOapg.properties.colorPalettes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cspDirectives"]) -> typing.Union[MetaOapg.properties.cspDirectives, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earlyAccess"]) -> typing.Union[MetaOapg.properties.earlyAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauthClientId"]) -> typing.Union[MetaOapg.properties.oauthClientId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauthClientSecret"]) -> typing.Union[MetaOapg.properties.oauthClientSecret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauthIssuerId"]) -> typing.Union[MetaOapg.properties.oauthIssuerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oauthIssuerLocation"]) -> typing.Union[MetaOapg.properties.oauthIssuerLocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union[MetaOapg.properties.settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["themes"]) -> typing.Union[MetaOapg.properties.themes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["hostname", "id", "name", "permissions", "colorPalettes", "cspDirectives", "earlyAccess", "oauthClientId", "oauthClientSecret", "oauthIssuerId", "oauthIssuerLocation", "settings", "themes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        hostname: typing.Union[MetaOapg.properties.hostname, str, ],
        permissions: typing.Union[MetaOapg.properties.permissions, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        colorPalettes: typing.Union[MetaOapg.properties.colorPalettes, list, tuple, schemas.Unset] = schemas.unset,
        cspDirectives: typing.Union[MetaOapg.properties.cspDirectives, list, tuple, schemas.Unset] = schemas.unset,
        earlyAccess: typing.Union[MetaOapg.properties.earlyAccess, str, schemas.Unset] = schemas.unset,
        oauthClientId: typing.Union[MetaOapg.properties.oauthClientId, str, schemas.Unset] = schemas.unset,
        oauthClientSecret: typing.Union[MetaOapg.properties.oauthClientSecret, str, schemas.Unset] = schemas.unset,
        oauthIssuerId: typing.Union[MetaOapg.properties.oauthIssuerId, str, schemas.Unset] = schemas.unset,
        oauthIssuerLocation: typing.Union[MetaOapg.properties.oauthIssuerLocation, str, schemas.Unset] = schemas.unset,
        settings: typing.Union[MetaOapg.properties.settings, list, tuple, schemas.Unset] = schemas.unset,
        themes: typing.Union[MetaOapg.properties.themes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeclarativeOrganizationInfo':
        return super().__new__(
            cls,
            *_args,
            hostname=hostname,
            permissions=permissions,
            name=name,
            id=id,
            colorPalettes=colorPalettes,
            cspDirectives=cspDirectives,
            earlyAccess=earlyAccess,
            oauthClientId=oauthClientId,
            oauthClientSecret=oauthClientSecret,
            oauthIssuerId=oauthIssuerId,
            oauthIssuerLocation=oauthIssuerLocation,
            settings=settings,
            themes=themes,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.declarative_color_palette import DeclarativeColorPalette
from gooddata_api_client.model.declarative_csp_directive import DeclarativeCspDirective
from gooddata_api_client.model.declarative_organization_permission import DeclarativeOrganizationPermission
from gooddata_api_client.model.declarative_setting import DeclarativeSetting
from gooddata_api_client.model.declarative_theme import DeclarativeTheme
