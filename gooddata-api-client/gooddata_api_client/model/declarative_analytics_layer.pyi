# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class DeclarativeAnalyticsLayer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class analyticalDashboardExtensions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeAnalyticalDashboardExtension']:
                        return DeclarativeAnalyticalDashboardExtension
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeAnalyticalDashboardExtension'], typing.List['DeclarativeAnalyticalDashboardExtension']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'analyticalDashboardExtensions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeAnalyticalDashboardExtension':
                    return super().__getitem__(i)
            
            
            class analyticalDashboards(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeAnalyticalDashboard']:
                        return DeclarativeAnalyticalDashboard
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeAnalyticalDashboard'], typing.List['DeclarativeAnalyticalDashboard']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'analyticalDashboards':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeAnalyticalDashboard':
                    return super().__getitem__(i)
            
            
            class dashboardPlugins(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeDashboardPlugin']:
                        return DeclarativeDashboardPlugin
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeDashboardPlugin'], typing.List['DeclarativeDashboardPlugin']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dashboardPlugins':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeDashboardPlugin':
                    return super().__getitem__(i)
            
            
            class filterContexts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeFilterContext']:
                        return DeclarativeFilterContext
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeFilterContext'], typing.List['DeclarativeFilterContext']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filterContexts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeFilterContext':
                    return super().__getitem__(i)
            
            
            class metrics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeMetric']:
                        return DeclarativeMetric
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeMetric'], typing.List['DeclarativeMetric']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metrics':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeMetric':
                    return super().__getitem__(i)
            
            
            class visualizationObjects(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeVisualizationObject']:
                        return DeclarativeVisualizationObject
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeVisualizationObject'], typing.List['DeclarativeVisualizationObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'visualizationObjects':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeVisualizationObject':
                    return super().__getitem__(i)
            __annotations__ = {
                "analyticalDashboardExtensions": analyticalDashboardExtensions,
                "analyticalDashboards": analyticalDashboards,
                "dashboardPlugins": dashboardPlugins,
                "filterContexts": filterContexts,
                "metrics": metrics,
                "visualizationObjects": visualizationObjects,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyticalDashboardExtensions"]) -> MetaOapg.properties.analyticalDashboardExtensions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyticalDashboards"]) -> MetaOapg.properties.analyticalDashboards: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dashboardPlugins"]) -> MetaOapg.properties.dashboardPlugins: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterContexts"]) -> MetaOapg.properties.filterContexts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metrics"]) -> MetaOapg.properties.metrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visualizationObjects"]) -> MetaOapg.properties.visualizationObjects: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["analyticalDashboardExtensions", "analyticalDashboards", "dashboardPlugins", "filterContexts", "metrics", "visualizationObjects", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyticalDashboardExtensions"]) -> typing.Union[MetaOapg.properties.analyticalDashboardExtensions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyticalDashboards"]) -> typing.Union[MetaOapg.properties.analyticalDashboards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dashboardPlugins"]) -> typing.Union[MetaOapg.properties.dashboardPlugins, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterContexts"]) -> typing.Union[MetaOapg.properties.filterContexts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metrics"]) -> typing.Union[MetaOapg.properties.metrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visualizationObjects"]) -> typing.Union[MetaOapg.properties.visualizationObjects, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["analyticalDashboardExtensions", "analyticalDashboards", "dashboardPlugins", "filterContexts", "metrics", "visualizationObjects", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        analyticalDashboardExtensions: typing.Union[MetaOapg.properties.analyticalDashboardExtensions, list, tuple, schemas.Unset] = schemas.unset,
        analyticalDashboards: typing.Union[MetaOapg.properties.analyticalDashboards, list, tuple, schemas.Unset] = schemas.unset,
        dashboardPlugins: typing.Union[MetaOapg.properties.dashboardPlugins, list, tuple, schemas.Unset] = schemas.unset,
        filterContexts: typing.Union[MetaOapg.properties.filterContexts, list, tuple, schemas.Unset] = schemas.unset,
        metrics: typing.Union[MetaOapg.properties.metrics, list, tuple, schemas.Unset] = schemas.unset,
        visualizationObjects: typing.Union[MetaOapg.properties.visualizationObjects, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeclarativeAnalyticsLayer':
        return super().__new__(
            cls,
            *_args,
            analyticalDashboardExtensions=analyticalDashboardExtensions,
            analyticalDashboards=analyticalDashboards,
            dashboardPlugins=dashboardPlugins,
            filterContexts=filterContexts,
            metrics=metrics,
            visualizationObjects=visualizationObjects,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.declarative_analytical_dashboard import DeclarativeAnalyticalDashboard
from gooddata_api_client.model.declarative_analytical_dashboard_extension import DeclarativeAnalyticalDashboardExtension
from gooddata_api_client.model.declarative_dashboard_plugin import DeclarativeDashboardPlugin
from gooddata_api_client.model.declarative_filter_context import DeclarativeFilterContext
from gooddata_api_client.model.declarative_metric import DeclarativeMetric
from gooddata_api_client.model.declarative_visualization_object import DeclarativeVisualizationObject
