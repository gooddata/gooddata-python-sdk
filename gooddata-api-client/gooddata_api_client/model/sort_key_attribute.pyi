# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class SortKeyAttribute(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Sorting rule for sorting by attribute value in current dimension.
    """


    class MetaOapg:
        required = {
            "attribute",
        }
        
        class properties:
            
            
            class attribute(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "attributeIdentifier",
                    }
                    
                    class properties:
                        attributeIdentifier = schemas.StrSchema
                        
                        
                        class direction(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def ASC(cls):
                                return cls("ASC")
                            
                            @schemas.classproperty
                            def DESC(cls):
                                return cls("DESC")
                        
                        
                        class sortType(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def DEFAULT(cls):
                                return cls("DEFAULT")
                            
                            @schemas.classproperty
                            def LABEL(cls):
                                return cls("LABEL")
                            
                            @schemas.classproperty
                            def ATTRIBUTE(cls):
                                return cls("ATTRIBUTE")
                            
                            @schemas.classproperty
                            def AREA(cls):
                                return cls("AREA")
                        __annotations__ = {
                            "attributeIdentifier": attributeIdentifier,
                            "direction": direction,
                            "sortType": sortType,
                        }
                
                attributeIdentifier: MetaOapg.properties.attributeIdentifier
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["attributeIdentifier"]) -> MetaOapg.properties.attributeIdentifier: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["direction"]) -> MetaOapg.properties.direction: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sortType"]) -> MetaOapg.properties.sortType: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributeIdentifier", "direction", "sortType", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["attributeIdentifier"]) -> MetaOapg.properties.attributeIdentifier: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["direction"]) -> typing.Union[MetaOapg.properties.direction, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sortType"]) -> typing.Union[MetaOapg.properties.sortType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributeIdentifier", "direction", "sortType", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    attributeIdentifier: typing.Union[MetaOapg.properties.attributeIdentifier, str, ],
                    direction: typing.Union[MetaOapg.properties.direction, str, schemas.Unset] = schemas.unset,
                    sortType: typing.Union[MetaOapg.properties.sortType, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'attribute':
                    return super().__new__(
                        cls,
                        *_args,
                        attributeIdentifier=attributeIdentifier,
                        direction=direction,
                        sortType=sortType,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "attribute": attribute,
            }
    
    attribute: MetaOapg.properties.attribute
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attribute", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute"]) -> MetaOapg.properties.attribute: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attribute", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attribute: typing.Union[MetaOapg.properties.attribute, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SortKeyAttribute':
        return super().__new__(
            cls,
            *_args,
            attribute=attribute,
            _configuration=_configuration,
            **kwargs,
        )
