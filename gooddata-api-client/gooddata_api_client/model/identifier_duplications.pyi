# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class IdentifierDuplications(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contains information about conflicting IDs in workspace hierarchy
    """


    class MetaOapg:
        required = {
            "origins",
            "id",
            "type",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class origins(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origins':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ANALYTICAL_DASHBOARD(cls):
                    return cls("analyticalDashboard")
                
                @schemas.classproperty
                def ATTRIBUTE(cls):
                    return cls("attribute")
                
                @schemas.classproperty
                def DASHBOARD_PLUGIN(cls):
                    return cls("dashboardPlugin")
                
                @schemas.classproperty
                def DATASET(cls):
                    return cls("dataset")
                
                @schemas.classproperty
                def FACT(cls):
                    return cls("fact")
                
                @schemas.classproperty
                def LABEL(cls):
                    return cls("label")
                
                @schemas.classproperty
                def METRIC(cls):
                    return cls("metric")
                
                @schemas.classproperty
                def PROMPT(cls):
                    return cls("prompt")
                
                @schemas.classproperty
                def VISUALIZATION_OBJECT(cls):
                    return cls("visualizationObject")
                
                @schemas.classproperty
                def FILTER_CONTEXT(cls):
                    return cls("filterContext")
                
                @schemas.classproperty
                def WORKSPACE_DATA_FILTER(cls):
                    return cls("workspaceDataFilter")
                
                @schemas.classproperty
                def WORKSPACE_DATA_FILTER_SETTINGS(cls):
                    return cls("workspaceDataFilterSettings")
            __annotations__ = {
                "id": id,
                "origins": origins,
                "type": type,
            }
    
    origins: MetaOapg.properties.origins
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origins"]) -> MetaOapg.properties.origins: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "origins", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origins"]) -> MetaOapg.properties.origins: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "origins", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        origins: typing.Union[MetaOapg.properties.origins, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'IdentifierDuplications':
        return super().__new__(
            cls,
            *_args,
            origins=origins,
            id=id,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
