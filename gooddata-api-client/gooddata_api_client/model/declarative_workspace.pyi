# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class DeclarativeWorkspace(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A declarative form of a particular workspace.
    """


    class MetaOapg:
        required = {
            "name",
            "id",
        }
        
        class properties:
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class customApplicationSettings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeCustomApplicationSetting']:
                        return DeclarativeCustomApplicationSetting
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeCustomApplicationSetting'], typing.List['DeclarativeCustomApplicationSetting']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customApplicationSettings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeCustomApplicationSetting':
                    return super().__getitem__(i)
            
            
            class description(
                schemas.StrSchema
            ):
                pass
            
            
            class earlyAccess(
                schemas.StrSchema
            ):
                pass
            
            
            class hierarchyPermissions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeWorkspaceHierarchyPermission']:
                        return DeclarativeWorkspaceHierarchyPermission
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeWorkspaceHierarchyPermission'], typing.List['DeclarativeWorkspaceHierarchyPermission']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hierarchyPermissions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeWorkspaceHierarchyPermission':
                    return super().__getitem__(i)
        
            @staticmethod
            def model() -> typing.Type['DeclarativeWorkspaceModel']:
                return DeclarativeWorkspaceModel
        
            @staticmethod
            def parent() -> typing.Type['WorkspaceIdentifier']:
                return WorkspaceIdentifier
            
            
            class permissions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeSingleWorkspacePermission']:
                        return DeclarativeSingleWorkspacePermission
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeSingleWorkspacePermission'], typing.List['DeclarativeSingleWorkspacePermission']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeSingleWorkspacePermission':
                    return super().__getitem__(i)
            
            
            class prefix(
                schemas.StrSchema
            ):
                pass
            
            
            class settings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeSetting']:
                        return DeclarativeSetting
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeSetting'], typing.List['DeclarativeSetting']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'settings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeSetting':
                    return super().__getitem__(i)
            
            
            class userDataFilters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeUserDataFilter']:
                        return DeclarativeUserDataFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeUserDataFilter'], typing.List['DeclarativeUserDataFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'userDataFilters':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeUserDataFilter':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "customApplicationSettings": customApplicationSettings,
                "description": description,
                "earlyAccess": earlyAccess,
                "hierarchyPermissions": hierarchyPermissions,
                "model": model,
                "parent": parent,
                "permissions": permissions,
                "prefix": prefix,
                "settings": settings,
                "userDataFilters": userDataFilters,
            }
    
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customApplicationSettings"]) -> MetaOapg.properties.customApplicationSettings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earlyAccess"]) -> MetaOapg.properties.earlyAccess: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hierarchyPermissions"]) -> MetaOapg.properties.hierarchyPermissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> 'DeclarativeWorkspaceModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> 'WorkspaceIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> MetaOapg.properties.settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userDataFilters"]) -> MetaOapg.properties.userDataFilters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "customApplicationSettings", "description", "earlyAccess", "hierarchyPermissions", "model", "parent", "permissions", "prefix", "settings", "userDataFilters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customApplicationSettings"]) -> typing.Union[MetaOapg.properties.customApplicationSettings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earlyAccess"]) -> typing.Union[MetaOapg.properties.earlyAccess, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hierarchyPermissions"]) -> typing.Union[MetaOapg.properties.hierarchyPermissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union['DeclarativeWorkspaceModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> typing.Union['WorkspaceIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> typing.Union[MetaOapg.properties.settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userDataFilters"]) -> typing.Union[MetaOapg.properties.userDataFilters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "customApplicationSettings", "description", "earlyAccess", "hierarchyPermissions", "model", "parent", "permissions", "prefix", "settings", "userDataFilters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        customApplicationSettings: typing.Union[MetaOapg.properties.customApplicationSettings, list, tuple, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        earlyAccess: typing.Union[MetaOapg.properties.earlyAccess, str, schemas.Unset] = schemas.unset,
        hierarchyPermissions: typing.Union[MetaOapg.properties.hierarchyPermissions, list, tuple, schemas.Unset] = schemas.unset,
        model: typing.Union['DeclarativeWorkspaceModel', schemas.Unset] = schemas.unset,
        parent: typing.Union['WorkspaceIdentifier', schemas.Unset] = schemas.unset,
        permissions: typing.Union[MetaOapg.properties.permissions, list, tuple, schemas.Unset] = schemas.unset,
        prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
        settings: typing.Union[MetaOapg.properties.settings, list, tuple, schemas.Unset] = schemas.unset,
        userDataFilters: typing.Union[MetaOapg.properties.userDataFilters, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeclarativeWorkspace':
        return super().__new__(
            cls,
            *_args,
            name=name,
            id=id,
            customApplicationSettings=customApplicationSettings,
            description=description,
            earlyAccess=earlyAccess,
            hierarchyPermissions=hierarchyPermissions,
            model=model,
            parent=parent,
            permissions=permissions,
            prefix=prefix,
            settings=settings,
            userDataFilters=userDataFilters,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.declarative_custom_application_setting import DeclarativeCustomApplicationSetting
from gooddata_api_client.model.declarative_setting import DeclarativeSetting
from gooddata_api_client.model.declarative_single_workspace_permission import DeclarativeSingleWorkspacePermission
from gooddata_api_client.model.declarative_user_data_filter import DeclarativeUserDataFilter
from gooddata_api_client.model.declarative_workspace_hierarchy_permission import DeclarativeWorkspaceHierarchyPermission
from gooddata_api_client.model.declarative_workspace_model import DeclarativeWorkspaceModel
from gooddata_api_client.model.workspace_identifier import WorkspaceIdentifier
