# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class RangeMeasureValueFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Filter the result by comparing specified metric to given range of values.
    """


    class MetaOapg:
        required = {
            "rangeMeasureValueFilter",
        }
        
        class properties:
            
            
            class rangeMeasureValueFilter(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "measure",
                        "from",
                        "to",
                        "operator",
                    }
                    
                    class properties:
                        applyOnResult = schemas.BoolSchema
                        _from = schemas.NumberSchema
                    
                        @staticmethod
                        def measure() -> typing.Type['AfmIdentifier']:
                            return AfmIdentifier
                        
                        
                        class operator(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def BETWEEN(cls):
                                return cls("BETWEEN")
                            
                            @schemas.classproperty
                            def NOT_BETWEEN(cls):
                                return cls("NOT_BETWEEN")
                        to = schemas.NumberSchema
                        treatNullValuesAs = schemas.NumberSchema
                        __annotations__ = {
                            "applyOnResult": applyOnResult,
                            "from": _from,
                            "measure": measure,
                            "operator": operator,
                            "to": to,
                            "treatNullValuesAs": treatNullValuesAs,
                        }
                
                measure: 'AfmIdentifier'
                to: MetaOapg.properties.to
                operator: MetaOapg.properties.operator
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["applyOnResult"]) -> MetaOapg.properties.applyOnResult: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["measure"]) -> 'AfmIdentifier': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["treatNullValuesAs"]) -> MetaOapg.properties.treatNullValuesAs: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["applyOnResult", "from", "measure", "operator", "to", "treatNullValuesAs", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["applyOnResult"]) -> typing.Union[MetaOapg.properties.applyOnResult, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["measure"]) -> 'AfmIdentifier': ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["treatNullValuesAs"]) -> typing.Union[MetaOapg.properties.treatNullValuesAs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["applyOnResult", "from", "measure", "operator", "to", "treatNullValuesAs", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    measure: 'AfmIdentifier',
                    to: typing.Union[MetaOapg.properties.to, decimal.Decimal, int, float, ],
                    operator: typing.Union[MetaOapg.properties.operator, str, ],
                    applyOnResult: typing.Union[MetaOapg.properties.applyOnResult, bool, schemas.Unset] = schemas.unset,
                    treatNullValuesAs: typing.Union[MetaOapg.properties.treatNullValuesAs, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rangeMeasureValueFilter':
                    return super().__new__(
                        cls,
                        *_args,
                        measure=measure,
                        to=to,
                        operator=operator,
                        applyOnResult=applyOnResult,
                        treatNullValuesAs=treatNullValuesAs,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "rangeMeasureValueFilter": rangeMeasureValueFilter,
            }
    
    rangeMeasureValueFilter: MetaOapg.properties.rangeMeasureValueFilter
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rangeMeasureValueFilter"]) -> MetaOapg.properties.rangeMeasureValueFilter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rangeMeasureValueFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rangeMeasureValueFilter"]) -> MetaOapg.properties.rangeMeasureValueFilter: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rangeMeasureValueFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        rangeMeasureValueFilter: typing.Union[MetaOapg.properties.rangeMeasureValueFilter, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RangeMeasureValueFilter':
        return super().__new__(
            cls,
            *_args,
            rangeMeasureValueFilter=rangeMeasureValueFilter,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.afm_identifier import AfmIdentifier
