# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class AbsoluteDateFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A datetime filter specifying exact from and to values.
    """


    class MetaOapg:
        required = {
            "absoluteDateFilter",
        }
        
        class properties:
            
            
            class absoluteDateFilter(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "from",
                        "to",
                        "dataset",
                    }
                    
                    class properties:
                        applyOnResult = schemas.BoolSchema
                    
                        @staticmethod
                        def dataset() -> typing.Type['AfmObjectIdentifierDataset']:
                            return AfmObjectIdentifierDataset
                        
                        
                        class _from(
                            schemas.StrSchema
                        ):
                            pass
                        
                        
                        class to(
                            schemas.StrSchema
                        ):
                            pass
                        __annotations__ = {
                            "applyOnResult": applyOnResult,
                            "dataset": dataset,
                            "from": _from,
                            "to": to,
                        }
                
                to: MetaOapg.properties.to
                dataset: 'AfmObjectIdentifierDataset'
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["applyOnResult"]) -> MetaOapg.properties.applyOnResult: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["dataset"]) -> 'AfmObjectIdentifierDataset': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["applyOnResult", "dataset", "from", "to", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["applyOnResult"]) -> typing.Union[MetaOapg.properties.applyOnResult, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["dataset"]) -> 'AfmObjectIdentifierDataset': ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["applyOnResult", "dataset", "from", "to", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    to: typing.Union[MetaOapg.properties.to, str, ],
                    dataset: 'AfmObjectIdentifierDataset',
                    applyOnResult: typing.Union[MetaOapg.properties.applyOnResult, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'absoluteDateFilter':
                    return super().__new__(
                        cls,
                        *_args,
                        to=to,
                        dataset=dataset,
                        applyOnResult=applyOnResult,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "absoluteDateFilter": absoluteDateFilter,
            }
    
    absoluteDateFilter: MetaOapg.properties.absoluteDateFilter
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["absoluteDateFilter"]) -> MetaOapg.properties.absoluteDateFilter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["absoluteDateFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["absoluteDateFilter"]) -> MetaOapg.properties.absoluteDateFilter: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["absoluteDateFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        absoluteDateFilter: typing.Union[MetaOapg.properties.absoluteDateFilter, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AbsoluteDateFilter':
        return super().__new__(
            cls,
            *_args,
            absoluteDateFilter=absoluteDateFilter,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.afm_object_identifier_dataset import AfmObjectIdentifierDataset
