# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class AFM(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Top level executable entity. Combination of [A]ttributes, [F]ilters & [M]etrics.
    """


    class MetaOapg:
        required = {
            "measures",
            "attributes",
            "filters",
        }
        
        class properties:
            
            
            class attributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AttributeItem']:
                        return AttributeItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AttributeItem'], typing.List['AttributeItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AttributeItem':
                    return super().__getitem__(i)
            
            
            class filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['FilterDefinition']:
                        return FilterDefinition
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['FilterDefinition'], typing.List['FilterDefinition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filters':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'FilterDefinition':
                    return super().__getitem__(i)
            
            
            class measures(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MeasureItem']:
                        return MeasureItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MeasureItem'], typing.List['MeasureItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'measures':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MeasureItem':
                    return super().__getitem__(i)
            
            
            class auxMeasures(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MeasureItem']:
                        return MeasureItem
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MeasureItem'], typing.List['MeasureItem']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auxMeasures':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MeasureItem':
                    return super().__getitem__(i)
            __annotations__ = {
                "attributes": attributes,
                "filters": filters,
                "measures": measures,
                "auxMeasures": auxMeasures,
            }
    
    measures: MetaOapg.properties.measures
    attributes: MetaOapg.properties.attributes
    filters: MetaOapg.properties.filters
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measures"]) -> MetaOapg.properties.measures: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auxMeasures"]) -> MetaOapg.properties.auxMeasures: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", "filters", "measures", "auxMeasures", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measures"]) -> MetaOapg.properties.measures: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auxMeasures"]) -> typing.Union[MetaOapg.properties.auxMeasures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", "filters", "measures", "auxMeasures", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        measures: typing.Union[MetaOapg.properties.measures, list, tuple, ],
        attributes: typing.Union[MetaOapg.properties.attributes, list, tuple, ],
        filters: typing.Union[MetaOapg.properties.filters, list, tuple, ],
        auxMeasures: typing.Union[MetaOapg.properties.auxMeasures, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AFM':
        return super().__new__(
            cls,
            *_args,
            measures=measures,
            attributes=attributes,
            filters=filters,
            auxMeasures=auxMeasures,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.attribute_item import AttributeItem
from gooddata_api_client.model.filter_definition import FilterDefinition
from gooddata_api_client.model.measure_item import MeasureItem
