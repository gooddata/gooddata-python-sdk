# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class NegativeAttributeFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Filter able to limit element values by label and related selected negated elements.
    """


    class MetaOapg:
        required = {
            "negativeAttributeFilter",
        }
        
        class properties:
            
            
            class negativeAttributeFilter(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "notIn",
                        "label",
                    }
                    
                    class properties:
                        applyOnResult = schemas.BoolSchema
                    
                        @staticmethod
                        def label() -> typing.Type['AfmIdentifier']:
                            return AfmIdentifier
                    
                        @staticmethod
                        def notIn() -> typing.Type['AttributeFilterElements']:
                            return AttributeFilterElements
                        __annotations__ = {
                            "applyOnResult": applyOnResult,
                            "label": label,
                            "notIn": notIn,
                        }
                
                notIn: 'AttributeFilterElements'
                label: 'AfmIdentifier'
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["applyOnResult"]) -> MetaOapg.properties.applyOnResult: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["label"]) -> 'AfmIdentifier': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["notIn"]) -> 'AttributeFilterElements': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["applyOnResult", "label", "notIn", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["applyOnResult"]) -> typing.Union[MetaOapg.properties.applyOnResult, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> 'AfmIdentifier': ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["notIn"]) -> 'AttributeFilterElements': ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["applyOnResult", "label", "notIn", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    notIn: 'AttributeFilterElements',
                    label: 'AfmIdentifier',
                    applyOnResult: typing.Union[MetaOapg.properties.applyOnResult, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'negativeAttributeFilter':
                    return super().__new__(
                        cls,
                        *_args,
                        notIn=notIn,
                        label=label,
                        applyOnResult=applyOnResult,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "negativeAttributeFilter": negativeAttributeFilter,
            }
    
    negativeAttributeFilter: MetaOapg.properties.negativeAttributeFilter
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["negativeAttributeFilter"]) -> MetaOapg.properties.negativeAttributeFilter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["negativeAttributeFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["negativeAttributeFilter"]) -> MetaOapg.properties.negativeAttributeFilter: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["negativeAttributeFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        negativeAttributeFilter: typing.Union[MetaOapg.properties.negativeAttributeFilter, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NegativeAttributeFilter':
        return super().__new__(
            cls,
            *_args,
            negativeAttributeFilter=negativeAttributeFilter,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.afm_identifier import AfmIdentifier
from gooddata_api_client.model.attribute_filter_elements import AttributeFilterElements
