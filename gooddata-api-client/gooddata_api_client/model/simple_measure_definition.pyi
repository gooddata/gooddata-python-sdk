# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class SimpleMeasureDefinition(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "measure",
        }
        
        class properties:
            
            
            class measure(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "item",
                    }
                    
                    class properties:
                        
                        
                        class aggregation(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def SUM(cls):
                                return cls("SUM")
                            
                            @schemas.classproperty
                            def COUNT(cls):
                                return cls("COUNT")
                            
                            @schemas.classproperty
                            def AVG(cls):
                                return cls("AVG")
                            
                            @schemas.classproperty
                            def MIN(cls):
                                return cls("MIN")
                            
                            @schemas.classproperty
                            def MAX(cls):
                                return cls("MAX")
                            
                            @schemas.classproperty
                            def MEDIAN(cls):
                                return cls("MEDIAN")
                            
                            @schemas.classproperty
                            def RUNSUM(cls):
                                return cls("RUNSUM")
                            
                            @schemas.classproperty
                            def APPROXIMATE_COUNT(cls):
                                return cls("APPROXIMATE_COUNT")
                        computeRatio = schemas.BoolSchema
                        
                        
                        class filters(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                @staticmethod
                                def items() -> typing.Type['FilterDefinitionForSimpleMeasure']:
                                    return FilterDefinitionForSimpleMeasure
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple['FilterDefinitionForSimpleMeasure'], typing.List['FilterDefinitionForSimpleMeasure']],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'filters':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> 'FilterDefinitionForSimpleMeasure':
                                return super().__getitem__(i)
                    
                        @staticmethod
                        def item() -> typing.Type['AfmObjectIdentifierCore']:
                            return AfmObjectIdentifierCore
                        __annotations__ = {
                            "aggregation": aggregation,
                            "computeRatio": computeRatio,
                            "filters": filters,
                            "item": item,
                        }
                
                item: 'AfmObjectIdentifierCore'
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["aggregation"]) -> MetaOapg.properties.aggregation: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["computeRatio"]) -> MetaOapg.properties.computeRatio: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["item"]) -> 'AfmObjectIdentifierCore': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["aggregation", "computeRatio", "filters", "item", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["aggregation"]) -> typing.Union[MetaOapg.properties.aggregation, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["computeRatio"]) -> typing.Union[MetaOapg.properties.computeRatio, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> typing.Union[MetaOapg.properties.filters, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["item"]) -> 'AfmObjectIdentifierCore': ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["aggregation", "computeRatio", "filters", "item", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    item: 'AfmObjectIdentifierCore',
                    aggregation: typing.Union[MetaOapg.properties.aggregation, str, schemas.Unset] = schemas.unset,
                    computeRatio: typing.Union[MetaOapg.properties.computeRatio, bool, schemas.Unset] = schemas.unset,
                    filters: typing.Union[MetaOapg.properties.filters, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'measure':
                    return super().__new__(
                        cls,
                        *_args,
                        item=item,
                        aggregation=aggregation,
                        computeRatio=computeRatio,
                        filters=filters,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "measure": measure,
            }
    
    measure: MetaOapg.properties.measure
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measure"]) -> MetaOapg.properties.measure: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["measure", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measure"]) -> MetaOapg.properties.measure: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["measure", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        measure: typing.Union[MetaOapg.properties.measure, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SimpleMeasureDefinition':
        return super().__new__(
            cls,
            *_args,
            measure=measure,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.afm_object_identifier_core import AfmObjectIdentifierCore
from gooddata_api_client.model.filter_definition_for_simple_measure import FilterDefinitionForSimpleMeasure
