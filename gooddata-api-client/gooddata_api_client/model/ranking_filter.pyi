# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class RankingFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Filter the result on top/bottom N values according to given metric(s).
    """


    class MetaOapg:
        required = {
            "rankingFilter",
        }
        
        class properties:
            
            
            class rankingFilter(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "measures",
                        "value",
                        "operator",
                    }
                    
                    class properties:
                        applyOnResult = schemas.BoolSchema
                        
                        
                        class measures(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                @staticmethod
                                def items() -> typing.Type['AfmIdentifier']:
                                    return AfmIdentifier
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple['AfmIdentifier'], typing.List['AfmIdentifier']],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'measures':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> 'AfmIdentifier':
                                return super().__getitem__(i)
                        
                        
                        class operator(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def TOP(cls):
                                return cls("TOP")
                            
                            @schemas.classproperty
                            def BOTTOM(cls):
                                return cls("BOTTOM")
                        value = schemas.Int32Schema
                        __annotations__ = {
                            "applyOnResult": applyOnResult,
                            "measures": measures,
                            "operator": operator,
                            "value": value,
                        }
                
                measures: MetaOapg.properties.measures
                value: MetaOapg.properties.value
                operator: MetaOapg.properties.operator
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["applyOnResult"]) -> MetaOapg.properties.applyOnResult: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["measures"]) -> MetaOapg.properties.measures: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["applyOnResult", "measures", "operator", "value", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["applyOnResult"]) -> typing.Union[MetaOapg.properties.applyOnResult, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["measures"]) -> MetaOapg.properties.measures: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["operator"]) -> MetaOapg.properties.operator: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["applyOnResult", "measures", "operator", "value", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    measures: typing.Union[MetaOapg.properties.measures, list, tuple, ],
                    value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, ],
                    operator: typing.Union[MetaOapg.properties.operator, str, ],
                    applyOnResult: typing.Union[MetaOapg.properties.applyOnResult, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'rankingFilter':
                    return super().__new__(
                        cls,
                        *_args,
                        measures=measures,
                        value=value,
                        operator=operator,
                        applyOnResult=applyOnResult,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "rankingFilter": rankingFilter,
            }
    
    rankingFilter: MetaOapg.properties.rankingFilter
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rankingFilter"]) -> MetaOapg.properties.rankingFilter: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rankingFilter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rankingFilter"]) -> MetaOapg.properties.rankingFilter: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rankingFilter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        rankingFilter: typing.Union[MetaOapg.properties.rankingFilter, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RankingFilter':
        return super().__new__(
            cls,
            *_args,
            rankingFilter=rankingFilter,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.afm_identifier import AfmIdentifier
