# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class ApiEntitlement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CONTRACT(cls):
                    return cls("Contract")
                
                @schemas.classproperty
                def CUSTOM_THEMING(cls):
                    return cls("CustomTheming")
                
                @schemas.classproperty
                def PDF_EXPORTS(cls):
                    return cls("PdfExports")
                
                @schemas.classproperty
                def MANAGED_OIDC(cls):
                    return cls("ManagedOIDC")
                
                @schemas.classproperty
                def UI_LOCALIZATION(cls):
                    return cls("UiLocalization")
                
                @schemas.classproperty
                def TIER(cls):
                    return cls("Tier")
                
                @schemas.classproperty
                def USER_COUNT(cls):
                    return cls("UserCount")
                
                @schemas.classproperty
                def UNLIMITED_USERS(cls):
                    return cls("UnlimitedUsers")
                
                @schemas.classproperty
                def UNLIMITED_WORKSPACES(cls):
                    return cls("UnlimitedWorkspaces")
                
                @schemas.classproperty
                def WHITE_LABELING(cls):
                    return cls("WhiteLabeling")
                
                @schemas.classproperty
                def WORKSPACE_COUNT(cls):
                    return cls("WorkspaceCount")
            expiry = schemas.DateSchema
            value = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "expiry": expiry,
                "value": value,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiry"]) -> MetaOapg.properties.expiry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "expiry", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiry"]) -> typing.Union[MetaOapg.properties.expiry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "expiry", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        expiry: typing.Union[MetaOapg.properties.expiry, str, date, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiEntitlement':
        return super().__new__(
            cls,
            *_args,
            name=name,
            expiry=expiry,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )
