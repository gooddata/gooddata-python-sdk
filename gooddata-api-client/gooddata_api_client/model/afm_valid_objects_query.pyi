# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class AfmValidObjectsQuery(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Entity holding AFM and list of object types whose validity should be computed.
    """


    class MetaOapg:
        required = {
            "types",
            "afm",
        }
        
        class properties:
        
            @staticmethod
            def afm() -> typing.Type['AFM']:
                return AFM
            
            
            class types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def FACTS(cls):
                            return cls("facts")
                        
                        @schemas.classproperty
                        def ATTRIBUTES(cls):
                            return cls("attributes")
                        
                        @schemas.classproperty
                        def MEASURES(cls):
                            return cls("measures")
                        
                        @schemas.classproperty
                        def UNRECOGNIZED(cls):
                            return cls("UNRECOGNIZED")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'types':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "afm": afm,
                "types": types,
            }
    
    types: MetaOapg.properties.types
    afm: 'AFM'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["afm"]) -> 'AFM': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["types"]) -> MetaOapg.properties.types: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["afm", "types", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["afm"]) -> 'AFM': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["types"]) -> MetaOapg.properties.types: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["afm", "types", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        types: typing.Union[MetaOapg.properties.types, list, tuple, ],
        afm: 'AFM',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AfmValidObjectsQuery':
        return super().__new__(
            cls,
            *_args,
            types=types,
            afm=afm,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.afm import AFM
