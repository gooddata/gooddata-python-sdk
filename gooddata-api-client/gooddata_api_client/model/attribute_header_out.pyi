# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class AttributeHeaderOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "attributeHeader",
        }
        
        class properties:
            
            
            class attributeHeader(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "primaryLabel",
                        "localIdentifier",
                        "attributeName",
                        "attribute",
                        "label",
                        "labelName",
                    }
                    
                    class properties:
                    
                        @staticmethod
                        def attribute() -> typing.Type['RestApiIdentifier']:
                            return RestApiIdentifier
                        attributeName = schemas.StrSchema
                    
                        @staticmethod
                        def format() -> typing.Type['AttributeFormat']:
                            return AttributeFormat
                        
                        
                        class granularity(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def MINUTE(cls):
                                return cls("MINUTE")
                            
                            @schemas.classproperty
                            def HOUR(cls):
                                return cls("HOUR")
                            
                            @schemas.classproperty
                            def DAY(cls):
                                return cls("DAY")
                            
                            @schemas.classproperty
                            def WEEK(cls):
                                return cls("WEEK")
                            
                            @schemas.classproperty
                            def MONTH(cls):
                                return cls("MONTH")
                            
                            @schemas.classproperty
                            def QUARTER(cls):
                                return cls("QUARTER")
                            
                            @schemas.classproperty
                            def YEAR(cls):
                                return cls("YEAR")
                            
                            @schemas.classproperty
                            def MINUTE_OF_HOUR(cls):
                                return cls("MINUTE_OF_HOUR")
                            
                            @schemas.classproperty
                            def HOUR_OF_DAY(cls):
                                return cls("HOUR_OF_DAY")
                            
                            @schemas.classproperty
                            def DAY_OF_WEEK(cls):
                                return cls("DAY_OF_WEEK")
                            
                            @schemas.classproperty
                            def DAY_OF_MONTH(cls):
                                return cls("DAY_OF_MONTH")
                            
                            @schemas.classproperty
                            def DAY_OF_YEAR(cls):
                                return cls("DAY_OF_YEAR")
                            
                            @schemas.classproperty
                            def WEEK_OF_YEAR(cls):
                                return cls("WEEK_OF_YEAR")
                            
                            @schemas.classproperty
                            def MONTH_OF_YEAR(cls):
                                return cls("MONTH_OF_YEAR")
                            
                            @schemas.classproperty
                            def QUARTER_OF_YEAR(cls):
                                return cls("QUARTER_OF_YEAR")
                    
                        @staticmethod
                        def label() -> typing.Type['RestApiIdentifier']:
                            return RestApiIdentifier
                        labelName = schemas.StrSchema
                        
                        
                        class localIdentifier(
                            schemas.StrSchema
                        ):
                            pass
                    
                        @staticmethod
                        def primaryLabel() -> typing.Type['RestApiIdentifier']:
                            return RestApiIdentifier
                        __annotations__ = {
                            "attribute": attribute,
                            "attributeName": attributeName,
                            "format": format,
                            "granularity": granularity,
                            "label": label,
                            "labelName": labelName,
                            "localIdentifier": localIdentifier,
                            "primaryLabel": primaryLabel,
                        }
                
                primaryLabel: 'RestApiIdentifier'
                localIdentifier: MetaOapg.properties.localIdentifier
                attributeName: MetaOapg.properties.attributeName
                attribute: 'RestApiIdentifier'
                label: 'RestApiIdentifier'
                labelName: MetaOapg.properties.labelName
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["attribute"]) -> 'RestApiIdentifier': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["attributeName"]) -> MetaOapg.properties.attributeName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["format"]) -> 'AttributeFormat': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["granularity"]) -> MetaOapg.properties.granularity: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["label"]) -> 'RestApiIdentifier': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["labelName"]) -> MetaOapg.properties.labelName: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["localIdentifier"]) -> MetaOapg.properties.localIdentifier: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["primaryLabel"]) -> 'RestApiIdentifier': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["attribute", "attributeName", "format", "granularity", "label", "labelName", "localIdentifier", "primaryLabel", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["attribute"]) -> 'RestApiIdentifier': ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["attributeName"]) -> MetaOapg.properties.attributeName: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union['AttributeFormat', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["granularity"]) -> typing.Union[MetaOapg.properties.granularity, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> 'RestApiIdentifier': ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["labelName"]) -> MetaOapg.properties.labelName: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["localIdentifier"]) -> MetaOapg.properties.localIdentifier: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["primaryLabel"]) -> 'RestApiIdentifier': ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attribute", "attributeName", "format", "granularity", "label", "labelName", "localIdentifier", "primaryLabel", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    primaryLabel: 'RestApiIdentifier',
                    localIdentifier: typing.Union[MetaOapg.properties.localIdentifier, str, ],
                    attributeName: typing.Union[MetaOapg.properties.attributeName, str, ],
                    attribute: 'RestApiIdentifier',
                    label: 'RestApiIdentifier',
                    labelName: typing.Union[MetaOapg.properties.labelName, str, ],
                    format: typing.Union['AttributeFormat', schemas.Unset] = schemas.unset,
                    granularity: typing.Union[MetaOapg.properties.granularity, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'attributeHeader':
                    return super().__new__(
                        cls,
                        *_args,
                        primaryLabel=primaryLabel,
                        localIdentifier=localIdentifier,
                        attributeName=attributeName,
                        attribute=attribute,
                        label=label,
                        labelName=labelName,
                        format=format,
                        granularity=granularity,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "attributeHeader": attributeHeader,
            }
    
    attributeHeader: MetaOapg.properties.attributeHeader
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributeHeader"]) -> MetaOapg.properties.attributeHeader: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributeHeader", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributeHeader"]) -> MetaOapg.properties.attributeHeader: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributeHeader", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attributeHeader: typing.Union[MetaOapg.properties.attributeHeader, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AttributeHeaderOut':
        return super().__new__(
            cls,
            *_args,
            attributeHeader=attributeHeader,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.attribute_format import AttributeFormat
from gooddata_api_client.model.rest_api_identifier import RestApiIdentifier
