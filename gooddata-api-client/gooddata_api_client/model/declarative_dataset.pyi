# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class DeclarativeDataset(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A dataset defined by its properties.
    """


    class MetaOapg:
        required = {
            "references",
            "grain",
            "id",
            "title",
        }
        
        class properties:
            
            
            class grain(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['GrainIdentifier']:
                        return GrainIdentifier
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['GrainIdentifier'], typing.List['GrainIdentifier']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'grain':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'GrainIdentifier':
                    return super().__getitem__(i)
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class references(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeReference']:
                        return DeclarativeReference
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeReference'], typing.List['DeclarativeReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'references':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeReference':
                    return super().__getitem__(i)
            
            
            class title(
                schemas.StrSchema
            ):
                pass
            
            
            class attributes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeAttribute']:
                        return DeclarativeAttribute
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeAttribute'], typing.List['DeclarativeAttribute']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeAttribute':
                    return super().__getitem__(i)
        
            @staticmethod
            def dataSourceTableId() -> typing.Type['DataSourceTableIdentifier']:
                return DataSourceTableIdentifier
            
            
            class description(
                schemas.StrSchema
            ):
                pass
            
            
            class facts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeFact']:
                        return DeclarativeFact
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeFact'], typing.List['DeclarativeFact']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'facts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeFact':
                    return super().__getitem__(i)
        
            @staticmethod
            def sql() -> typing.Type['DeclarativeDatasetSql']:
                return DeclarativeDatasetSql
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class workspaceDataFilterColumns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeclarativeWorkspaceDataFilterColumn']:
                        return DeclarativeWorkspaceDataFilterColumn
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeclarativeWorkspaceDataFilterColumn'], typing.List['DeclarativeWorkspaceDataFilterColumn']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workspaceDataFilterColumns':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeclarativeWorkspaceDataFilterColumn':
                    return super().__getitem__(i)
            __annotations__ = {
                "grain": grain,
                "id": id,
                "references": references,
                "title": title,
                "attributes": attributes,
                "dataSourceTableId": dataSourceTableId,
                "description": description,
                "facts": facts,
                "sql": sql,
                "tags": tags,
                "workspaceDataFilterColumns": workspaceDataFilterColumns,
            }
    
    references: MetaOapg.properties.references
    grain: MetaOapg.properties.grain
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grain"]) -> MetaOapg.properties.grain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["references"]) -> MetaOapg.properties.references: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSourceTableId"]) -> 'DataSourceTableIdentifier': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["facts"]) -> MetaOapg.properties.facts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sql"]) -> 'DeclarativeDatasetSql': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workspaceDataFilterColumns"]) -> MetaOapg.properties.workspaceDataFilterColumns: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["grain", "id", "references", "title", "attributes", "dataSourceTableId", "description", "facts", "sql", "tags", "workspaceDataFilterColumns", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grain"]) -> MetaOapg.properties.grain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["references"]) -> MetaOapg.properties.references: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSourceTableId"]) -> typing.Union['DataSourceTableIdentifier', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["facts"]) -> typing.Union[MetaOapg.properties.facts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sql"]) -> typing.Union['DeclarativeDatasetSql', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union[MetaOapg.properties.tags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workspaceDataFilterColumns"]) -> typing.Union[MetaOapg.properties.workspaceDataFilterColumns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grain", "id", "references", "title", "attributes", "dataSourceTableId", "description", "facts", "sql", "tags", "workspaceDataFilterColumns", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        references: typing.Union[MetaOapg.properties.references, list, tuple, ],
        grain: typing.Union[MetaOapg.properties.grain, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        attributes: typing.Union[MetaOapg.properties.attributes, list, tuple, schemas.Unset] = schemas.unset,
        dataSourceTableId: typing.Union['DataSourceTableIdentifier', schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        facts: typing.Union[MetaOapg.properties.facts, list, tuple, schemas.Unset] = schemas.unset,
        sql: typing.Union['DeclarativeDatasetSql', schemas.Unset] = schemas.unset,
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, schemas.Unset] = schemas.unset,
        workspaceDataFilterColumns: typing.Union[MetaOapg.properties.workspaceDataFilterColumns, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeclarativeDataset':
        return super().__new__(
            cls,
            *_args,
            references=references,
            grain=grain,
            id=id,
            title=title,
            attributes=attributes,
            dataSourceTableId=dataSourceTableId,
            description=description,
            facts=facts,
            sql=sql,
            tags=tags,
            workspaceDataFilterColumns=workspaceDataFilterColumns,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.data_source_table_identifier import DataSourceTableIdentifier
from gooddata_api_client.model.declarative_attribute import DeclarativeAttribute
from gooddata_api_client.model.declarative_dataset_sql import DeclarativeDatasetSql
from gooddata_api_client.model.declarative_fact import DeclarativeFact
from gooddata_api_client.model.declarative_reference import DeclarativeReference
from gooddata_api_client.model.declarative_workspace_data_filter_column import DeclarativeWorkspaceDataFilterColumn
from gooddata_api_client.model.grain_identifier import GrainIdentifier
