# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class GenerateLdmRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A request containing all information needed for generation of logical model.
    """


    class MetaOapg:
        
        class properties:
            dateGranularities = schemas.StrSchema
            denormPrefix = schemas.StrSchema
            factPrefix = schemas.StrSchema
            generateLongIds = schemas.BoolSchema
            grainPrefix = schemas.StrSchema
            grainReferencePrefix = schemas.StrSchema
        
            @staticmethod
            def pdm() -> typing.Type['PdmLdmRequest']:
                return PdmLdmRequest
            primaryLabelPrefix = schemas.StrSchema
            referencePrefix = schemas.StrSchema
            secondaryLabelPrefix = schemas.StrSchema
            separator = schemas.StrSchema
            tablePrefix = schemas.StrSchema
            viewPrefix = schemas.StrSchema
            wdfPrefix = schemas.StrSchema
            __annotations__ = {
                "dateGranularities": dateGranularities,
                "denormPrefix": denormPrefix,
                "factPrefix": factPrefix,
                "generateLongIds": generateLongIds,
                "grainPrefix": grainPrefix,
                "grainReferencePrefix": grainReferencePrefix,
                "pdm": pdm,
                "primaryLabelPrefix": primaryLabelPrefix,
                "referencePrefix": referencePrefix,
                "secondaryLabelPrefix": secondaryLabelPrefix,
                "separator": separator,
                "tablePrefix": tablePrefix,
                "viewPrefix": viewPrefix,
                "wdfPrefix": wdfPrefix,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateGranularities"]) -> MetaOapg.properties.dateGranularities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["denormPrefix"]) -> MetaOapg.properties.denormPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["factPrefix"]) -> MetaOapg.properties.factPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generateLongIds"]) -> MetaOapg.properties.generateLongIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grainPrefix"]) -> MetaOapg.properties.grainPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grainReferencePrefix"]) -> MetaOapg.properties.grainReferencePrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pdm"]) -> 'PdmLdmRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryLabelPrefix"]) -> MetaOapg.properties.primaryLabelPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referencePrefix"]) -> MetaOapg.properties.referencePrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondaryLabelPrefix"]) -> MetaOapg.properties.secondaryLabelPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["separator"]) -> MetaOapg.properties.separator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tablePrefix"]) -> MetaOapg.properties.tablePrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viewPrefix"]) -> MetaOapg.properties.viewPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wdfPrefix"]) -> MetaOapg.properties.wdfPrefix: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dateGranularities", "denormPrefix", "factPrefix", "generateLongIds", "grainPrefix", "grainReferencePrefix", "pdm", "primaryLabelPrefix", "referencePrefix", "secondaryLabelPrefix", "separator", "tablePrefix", "viewPrefix", "wdfPrefix", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateGranularities"]) -> typing.Union[MetaOapg.properties.dateGranularities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["denormPrefix"]) -> typing.Union[MetaOapg.properties.denormPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["factPrefix"]) -> typing.Union[MetaOapg.properties.factPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generateLongIds"]) -> typing.Union[MetaOapg.properties.generateLongIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grainPrefix"]) -> typing.Union[MetaOapg.properties.grainPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grainReferencePrefix"]) -> typing.Union[MetaOapg.properties.grainReferencePrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pdm"]) -> typing.Union['PdmLdmRequest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryLabelPrefix"]) -> typing.Union[MetaOapg.properties.primaryLabelPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referencePrefix"]) -> typing.Union[MetaOapg.properties.referencePrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondaryLabelPrefix"]) -> typing.Union[MetaOapg.properties.secondaryLabelPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["separator"]) -> typing.Union[MetaOapg.properties.separator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tablePrefix"]) -> typing.Union[MetaOapg.properties.tablePrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viewPrefix"]) -> typing.Union[MetaOapg.properties.viewPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wdfPrefix"]) -> typing.Union[MetaOapg.properties.wdfPrefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dateGranularities", "denormPrefix", "factPrefix", "generateLongIds", "grainPrefix", "grainReferencePrefix", "pdm", "primaryLabelPrefix", "referencePrefix", "secondaryLabelPrefix", "separator", "tablePrefix", "viewPrefix", "wdfPrefix", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dateGranularities: typing.Union[MetaOapg.properties.dateGranularities, str, schemas.Unset] = schemas.unset,
        denormPrefix: typing.Union[MetaOapg.properties.denormPrefix, str, schemas.Unset] = schemas.unset,
        factPrefix: typing.Union[MetaOapg.properties.factPrefix, str, schemas.Unset] = schemas.unset,
        generateLongIds: typing.Union[MetaOapg.properties.generateLongIds, bool, schemas.Unset] = schemas.unset,
        grainPrefix: typing.Union[MetaOapg.properties.grainPrefix, str, schemas.Unset] = schemas.unset,
        grainReferencePrefix: typing.Union[MetaOapg.properties.grainReferencePrefix, str, schemas.Unset] = schemas.unset,
        pdm: typing.Union['PdmLdmRequest', schemas.Unset] = schemas.unset,
        primaryLabelPrefix: typing.Union[MetaOapg.properties.primaryLabelPrefix, str, schemas.Unset] = schemas.unset,
        referencePrefix: typing.Union[MetaOapg.properties.referencePrefix, str, schemas.Unset] = schemas.unset,
        secondaryLabelPrefix: typing.Union[MetaOapg.properties.secondaryLabelPrefix, str, schemas.Unset] = schemas.unset,
        separator: typing.Union[MetaOapg.properties.separator, str, schemas.Unset] = schemas.unset,
        tablePrefix: typing.Union[MetaOapg.properties.tablePrefix, str, schemas.Unset] = schemas.unset,
        viewPrefix: typing.Union[MetaOapg.properties.viewPrefix, str, schemas.Unset] = schemas.unset,
        wdfPrefix: typing.Union[MetaOapg.properties.wdfPrefix, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GenerateLdmRequest':
        return super().__new__(
            cls,
            *_args,
            dateGranularities=dateGranularities,
            denormPrefix=denormPrefix,
            factPrefix=factPrefix,
            generateLongIds=generateLongIds,
            grainPrefix=grainPrefix,
            grainReferencePrefix=grainReferencePrefix,
            pdm=pdm,
            primaryLabelPrefix=primaryLabelPrefix,
            referencePrefix=referencePrefix,
            secondaryLabelPrefix=secondaryLabelPrefix,
            separator=separator,
            tablePrefix=tablePrefix,
            viewPrefix=viewPrefix,
            wdfPrefix=wdfPrefix,
            _configuration=_configuration,
            **kwargs,
        )

from gooddata_api_client.model.pdm_ldm_request import PdmLdmRequest
