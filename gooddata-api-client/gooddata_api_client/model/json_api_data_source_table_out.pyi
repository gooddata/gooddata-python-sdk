# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v0
    Contact: support@gooddata.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gooddata_api_client import schemas  # noqa: F401


class JsonApiDataSourceTableOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Tables in data source
    """


    class MetaOapg:
        required = {
            "attributes",
            "id",
            "type",
        }
        
        class properties:
            
            
            class attributes(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "columns",
                    }
                    
                    class properties:
                        
                        
                        class columns(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "dataType",
                                            "name",
                                        }
                                        
                                        class properties:
                                            
                                            
                                            class dataType(
                                                schemas.EnumBase,
                                                schemas.StrSchema
                                            ):
                                                
                                                @schemas.classproperty
                                                def INT(cls):
                                                    return cls("INT")
                                                
                                                @schemas.classproperty
                                                def STRING(cls):
                                                    return cls("STRING")
                                                
                                                @schemas.classproperty
                                                def DATE(cls):
                                                    return cls("DATE")
                                                
                                                @schemas.classproperty
                                                def NUMERIC(cls):
                                                    return cls("NUMERIC")
                                                
                                                @schemas.classproperty
                                                def TIMESTAMP(cls):
                                                    return cls("TIMESTAMP")
                                                
                                                @schemas.classproperty
                                                def TIMESTAMP_TZ(cls):
                                                    return cls("TIMESTAMP_TZ")
                                                
                                                @schemas.classproperty
                                                def BOOLEAN(cls):
                                                    return cls("BOOLEAN")
                                            isPrimaryKey = schemas.BoolSchema
                                            
                                            
                                            class name(
                                                schemas.StrSchema
                                            ):
                                                pass
                                            
                                            
                                            class referencedTableColumn(
                                                schemas.StrSchema
                                            ):
                                                pass
                                            
                                            
                                            class referencedTableId(
                                                schemas.StrSchema
                                            ):
                                                pass
                                            __annotations__ = {
                                                "dataType": dataType,
                                                "isPrimaryKey": isPrimaryKey,
                                                "name": name,
                                                "referencedTableColumn": referencedTableColumn,
                                                "referencedTableId": referencedTableId,
                                            }
                                    
                                    dataType: MetaOapg.properties.dataType
                                    name: MetaOapg.properties.name
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["isPrimaryKey"]) -> MetaOapg.properties.isPrimaryKey: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["referencedTableColumn"]) -> MetaOapg.properties.referencedTableColumn: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["referencedTableId"]) -> MetaOapg.properties.referencedTableId: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dataType", "isPrimaryKey", "name", "referencedTableColumn", "referencedTableId", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["dataType"]) -> MetaOapg.properties.dataType: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["isPrimaryKey"]) -> typing.Union[MetaOapg.properties.isPrimaryKey, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["referencedTableColumn"]) -> typing.Union[MetaOapg.properties.referencedTableColumn, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["referencedTableId"]) -> typing.Union[MetaOapg.properties.referencedTableId, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dataType", "isPrimaryKey", "name", "referencedTableColumn", "referencedTableId", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        dataType: typing.Union[MetaOapg.properties.dataType, str, ],
                                        name: typing.Union[MetaOapg.properties.name, str, ],
                                        isPrimaryKey: typing.Union[MetaOapg.properties.isPrimaryKey, bool, schemas.Unset] = schemas.unset,
                                        referencedTableColumn: typing.Union[MetaOapg.properties.referencedTableColumn, str, schemas.Unset] = schemas.unset,
                                        referencedTableId: typing.Union[MetaOapg.properties.referencedTableId, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            dataType=dataType,
                                            name=name,
                                            isPrimaryKey=isPrimaryKey,
                                            referencedTableColumn=referencedTableColumn,
                                            referencedTableId=referencedTableId,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'columns':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class namePrefix(
                            schemas.StrSchema
                        ):
                            pass
                        
                        
                        class path(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'path':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class type(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                            
                            @schemas.classproperty
                            def TABLE(cls):
                                return cls("TABLE")
                            
                            @schemas.classproperty
                            def VIEW(cls):
                                return cls("VIEW")
                        __annotations__ = {
                            "columns": columns,
                            "namePrefix": namePrefix,
                            "path": path,
                            "type": type,
                        }
                
                columns: MetaOapg.properties.columns
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["namePrefix"]) -> MetaOapg.properties.namePrefix: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["columns", "namePrefix", "path", "type", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["columns"]) -> MetaOapg.properties.columns: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["namePrefix"]) -> typing.Union[MetaOapg.properties.namePrefix, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["columns", "namePrefix", "path", "type", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    columns: typing.Union[MetaOapg.properties.columns, list, tuple, ],
                    namePrefix: typing.Union[MetaOapg.properties.namePrefix, str, schemas.Unset] = schemas.unset,
                    path: typing.Union[MetaOapg.properties.path, list, tuple, schemas.Unset] = schemas.unset,
                    type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'attributes':
                    return super().__new__(
                        cls,
                        *_args,
                        columns=columns,
                        namePrefix=namePrefix,
                        path=path,
                        type=type,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class id(
                schemas.StrSchema
            ):
                pass
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DATA_SOURCE_TABLE(cls):
                    return cls("dataSourceTable")
            __annotations__ = {
                "attributes": attributes,
                "id": id,
                "type": type,
            }
    
    attributes: MetaOapg.properties.attributes
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", "id", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", "id", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'JsonApiDataSourceTableOut':
        return super().__new__(
            cls,
            *_args,
            attributes=attributes,
            id=id,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
