#!/bin/env bash
# (C) 2023 GoodData Corporation

if [ -f "./.env.custom.dev" ]; then
  source ./.env.custom.dev
fi

export DBT_PROFILES_DIR="profile"
export ELT_ENVIRONMENT="production"
export DBT_TARGET="snowflake"

export DB_USER="db_user"
export DB_NAME="DB_NAME"
export OUTPUT_SCHEMA="output_stage"

# Snowflake specific
export DB_ACCOUNT="snowflake_account"
export DB_WAREHOUSE="MY_WAREHOUSE"
export GOODDATA_UPPER_CASE="--gooddata-upper-case" # Snowflake names are upper case

# GoodData
# We use profiles file(~/.gooddata/profiles.yaml) to store GoodData endpoints and their credentials
# Example:
# dev:
#   host: "https://company-dev.cloud.gooddata.com"
#   token: "<dev_token>"
# prod1:
#   host: "https://company-prod1.cloud.gooddata.com"
#   token: "<prod1_token>"
# prod2:
#   host: "https://company-prod2.cloud.gooddata.com"
#   token: "<prod2_token>"
export GOODDATA_PROFILES="prod1 prod2"
export GOODDATA_ENVIRONMENT_ID="production"

# dbt cloud - test running a dbt cloud job
export DBT_ALLOWED_DEGRADATION=20
export DBT_JOB_ID=123456
export DBT_PROJECT_ID=123456
export DBT_ENVIRONMENT_ID=123456

# Gitlab (for testing sending messages to merge requests)
export CI_MERGE_REQUEST_PROJECT_ID=123456
export CI_MERGE_REQUEST_IID=1
# GitHub (for testing sending messages to pull requests)
# GitHub is preferred over Gitlab in Python SDK. Unset GitHub variables to test Gitlab.
export GITHUB_REPOSITORY="jaceksan/gooddata-data-pipeline"
export GITHUB_REF_NAME="1/merge"
export GITHUB_ACTOR="jaceksan"
# Allow testing from localhost where COMMIT_SHA is not set
# Used for posting comments to pull requests
# GitHub does not propagate CI_COMMIT_SHA to environment variable in workers
# Developers must propagate it manually from ${{ github.event.pull_request.head.sha }} to GOODDATA_GITHUB_SHA
# DOC: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
export GOODDATA_GITHUB_SHA="1234567890abcdef1234567890abcdef12345678"

# dbt env var needed for dbt Cloud
# First delete all existing DBT variables. Uncomment to cleanup your sessions ;-)
#for var in $(env | grep -E '^DBT_' | cut -d= -f1); do
#  unset "$var"
#done
for var in $(env | grep -E '^DB_|_SCHEMA' | grep -vE '^DBT_' | cut -d= -f1); do
    # Add "DBT_" prefix to variables without DBT_ prefix
    new_var="DBT_${var}"
    # Get the value of the original variable
    value="${!var}"
    # Set the new variable with the modified value
    export "$new_var=$value"
done
