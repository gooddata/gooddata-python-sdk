{
  "metadata": {
    "dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json",
    "dbt_version": "1.4.4",
    "generated_at": "2023-08-22T08:29:00.391832Z",
    "invocation_id": "a876809c-18ef-4153-87f8-e38909dd945b",
    "env": {},
    "project_id": "5077dd8c6e32174fbe95d953403299df",
    "user_id": "1676b885-7f3a-4191-9df3-b80729c9dc97",
    "send_anonymous_usage_stats": true,
    "adapter_type": "postgres"
  },
  "nodes": {
    "model.cicd_demo.commits": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "commits",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "github/commits/commits.sql",
      "original_file_path": "models/github/commits/commits.sql",
      "unique_id": "model.cicd_demo.commits",
      "fqn": [
        "cicd_demo",
        "github",
        "commits",
        "commits"
      ],
      "alias": "commits",
      "checksum": {
        "name": "sha256",
        "checksum": "3297a128158d1e9c3da7f3b990330d517696bdab57b48a6d6755eb7f6257c057"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        },
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "commit_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "indexes": [
          {
            "columns": [
              "commit_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "user_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "repo_id"
            ],
            "unique": false
          }
        ],
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "Commits",
      "columns": {
        "commit_id": {
          "name": "commit_id",
          "description": "Commit ID",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "users"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "repo_id": {
          "name": "repo_id",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "repos"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "commit_url": {
          "name": "commit_url",
          "description": "Commit URL",
          "meta": {
            "gooddata": {
              "ldm_type": "label",
              "label_type": "HYPERLINK",
              "attribute_column": "commit_id"
            }
          },
          "data_type": "STRING",
          "quote": null,
          "tags": []
        },
        "created_at": {
          "name": "created_at",
          "description": "Created at",
          "meta": {
            "gooddata": {
              "ldm_type": "date"
            }
          },
          "data_type": "TIMESTAMP",
          "quote": null,
          "tags": []
        },
        "comment_count": {
          "name": "comment_count",
          "description": "Comment count",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "github"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/github/commits/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "incremental",
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        },
        "indexes": [
          {
            "columns": [
              "commit_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "user_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "repo_id"
            ],
            "unique": false
          }
        ],
        "unique_key": "commit_id"
      },
      "created_at": 1692692941.482383,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"commits\"",
      "raw_code": "{{ config(\n  indexes=[\n    {'columns': ['commit_id'], 'unique': true},\n    {'columns': ['user_id'], 'unique': false},\n    {'columns': ['repo_id'], 'unique': false}\n  ],\n  materialized='incremental',\n  unique_key='commit_id'\n) }}\n\nwith using_clause as (\n  select\n    *\n  from {{ ref('commits_extract_json') }}\n  {% if is_incremental() %}\n    where created_at > ( select max(created_at) from {{ this }} )\n  {% endif %}\n),\n\nupdates as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where commit_id in ( select commit_id from {{ this }} )\n  {% else %}\n    -- No updates when doing full load\n    where 1 = 0\n  {% endif %}\n),\n\ninserts as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where commit_id not in ( select commit_id from {{ this }} )\n  {% endif %}\n),\n\nusers as (\n    select * from {{ ref('users') }}\n),\n\nfinal as (\n    select\n      c.commit_id,\n      c.commit_url,\n      c.comment_count,\n      c.created_at,\n      c.repo_id,\n      users.user_id\n    from (\n      select * from inserts\n      union all select * from updates\n    ) c\n    -- Filter out commits without responsible user (data cleansing)\n    join users on c.user_id = users.user_id\n)\n\nselect * from final",
      "language": "sql",
      "refs": [
        [
          "commits_extract_json"
        ],
        [
          "users"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt.is_incremental"
        ],
        "nodes": [
          "model.cicd_demo.commits_extract_json",
          "model.cicd_demo.users"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/commits/commits.sql",
      "compiled": true,
      "compiled_code": "\n\nwith using_clause as (\n  select\n    *\n  from \"demo\".\"github_input_stage\".\"commits_extract_json\"\n  \n    where created_at > ( select max(created_at) from \"demo\".\"cicd_output_stage\".\"commits\" )\n  \n),\n\nupdates as (\n  select *\n  from using_clause\n  \n    where commit_id in ( select commit_id from \"demo\".\"cicd_output_stage\".\"commits\" )\n  \n),\n\ninserts as (\n  select *\n  from using_clause\n  \n    where commit_id not in ( select commit_id from \"demo\".\"cicd_output_stage\".\"commits\" )\n  \n),\n\nusers as (\n    select * from \"demo\".\"cicd_output_stage\".\"users\"\n),\n\nfinal as (\n    select\n      c.commit_id,\n      c.commit_url,\n      c.comment_count,\n      c.created_at,\n      c.repo_id,\n      users.user_id\n    from (\n      select * from inserts\n      union all select * from updates\n    ) c\n    -- Filter out commits without responsible user (data cleansing)\n    join users on c.user_id = users.user_id\n)\n\nselect * from final",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.commits_extract_json": {
      "database": "demo",
      "schema": "github_input_stage",
      "name": "commits_extract_json",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "github/commits/commits_extract_json.sql",
      "original_file_path": "models/github/commits/commits_extract_json.sql",
      "unique_id": "model.cicd_demo.commits_extract_json",
      "fqn": [
        "cicd_demo",
        "github",
        "commits",
        "commits_extract_json"
      ],
      "alias": "commits_extract_json",
      "checksum": {
        "name": "sha256",
        "checksum": "c2a88add4a5a2fadd016ca4e41c5a5f28c4f0c706dfd9ac27940805700905b4d"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "github_input_stage",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": "commit_id",
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "indexes": [
          {
            "columns": [
              "commit_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "user_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "repo_id"
            ],
            "unique": false
          }
        ],
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "github_input_stage",
        "materialized": "incremental",
        "indexes": [
          {
            "columns": [
              "commit_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "user_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "repo_id"
            ],
            "unique": false
          }
        ],
        "unique_key": "commit_id"
      },
      "created_at": 1692692941.229301,
      "relation_name": "\"demo\".\"github_input_stage\".\"commits_extract_json\"",
      "raw_code": "{{ config(\n  schema=var('input_schema_github'),\n  indexes=[\n    {'columns': ['commit_id'], 'unique': true},\n    {'columns': ['user_id'], 'unique': false},\n    {'columns': ['repo_id'], 'unique': false}\n  ],\n  materialized='incremental',\n  unique_key='commit_id'\n) }}\n\n-- Helper step, materialize extracted JSON fields first and then JOIN it with other tables\n-- Incremental mode\n\nwith using_clause as (\n  select\n    sha as commit_id,\n    html_url as commit_url,\n    {{ extract_json_value('commit', 'comment_count', 'comment_count', 'INT') }},\n    commit_timestamp as created_at,\n    {{ extract_json_value('author', 'id', 'user_id', 'INT') }},\n    CAST(repo_id as INT) as repo_id\n  from {{ var(\"input_schema_github\") }}.commits\n  {% if is_incremental() %}\n    where commit_timestamp > ( select max(created_at) from {{ this }} )\n  {% endif %}\n),\n\nupdates as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where commit_id in ( select commit_id from {{ this }} )\n  {% else %}\n    -- No updates when doing full load\n    where 1 = 0\n  {% endif %}\n),\n\ninserts as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where commit_id not in ( select commit_id from {{ this }} )\n  {% endif %}\n),\n\nfinal as (\n  select * from inserts\n  union all select * from updates\n)\n\nselect * from final",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.cicd_demo.extract_json_value",
          "macro.dbt.is_incremental"
        ],
        "nodes": []
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/commits/commits_extract_json.sql",
      "compiled": true,
      "compiled_code": "\n\n-- Helper step, materialize extracted JSON fields first and then JOIN it with other tables\n-- Incremental mode\n\nwith using_clause as (\n  select\n    sha as commit_id,\n    html_url as commit_url,\n    CAST(json_extract_path_text(to_json(\"commit\"), 'comment_count') AS INT) AS comment_count,\n    commit_timestamp as created_at,\n    CAST(json_extract_path_text(to_json(\"author\"), 'id') AS INT) AS user_id,\n    CAST(repo_id as INT) as repo_id\n  from github_input_stage.commits\n  \n    where commit_timestamp > ( select max(created_at) from \"demo\".\"github_input_stage\".\"commits_extract_json\" )\n  \n),\n\nupdates as (\n  select *\n  from using_clause\n  \n    where commit_id in ( select commit_id from \"demo\".\"github_input_stage\".\"commits_extract_json\" )\n  \n),\n\ninserts as (\n  select *\n  from using_clause\n  \n    where commit_id not in ( select commit_id from \"demo\".\"github_input_stage\".\"commits_extract_json\" )\n  \n),\n\nfinal as (\n  select * from inserts\n  union all select * from updates\n)\n\nselect * from final",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.repos": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "repos",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "github/repos/repos.sql",
      "original_file_path": "models/github/repos/repos.sql",
      "unique_id": "model.cicd_demo.repos",
      "fqn": [
        "cicd_demo",
        "github",
        "repos",
        "repos"
      ],
      "alias": "repos",
      "checksum": {
        "name": "sha256",
        "checksum": "600c94db9c1c08b575692faab6320554ed128f3db77f246d03a1ac76722908a5"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        },
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "Repos",
      "columns": {
        "repo_id": {
          "name": "repo_id",
          "description": "Repo ID",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "repo_url": {
          "name": "repo_url",
          "description": "Repo URL",
          "meta": {
            "gooddata": {
              "ldm_type": "label",
              "label_type": "HYPERLINK",
              "attribute_column": "repo_id"
            }
          },
          "data_type": "STRING",
          "quote": null,
          "tags": []
        },
        "repo_name": {
          "name": "repo_name",
          "description": "Repo name",
          "meta": {
            "gooddata": {
              "ldm_type": "attribute"
            }
          },
          "data_type": "STRING",
          "quote": null,
          "tags": []
        },
        "stargazers_count": {
          "name": "stargazers_count",
          "description": "Stargazers count",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "watchers_count": {
          "name": "watchers_count",
          "description": "Watches count",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "repo_created_at": {
          "name": "repo_created_at",
          "description": "Repository created at",
          "meta": {
            "gooddata": {
              "ldm_type": "date"
            }
          },
          "data_type": "TIMESTAMP",
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "github"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/github/repos/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "table",
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        }
      },
      "created_at": 1692692941.506508,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"repos\"",
      "raw_code": "with pulls_repo_ids as (\n    select distinct\n      repo_id\n    from {{ ref('pull_requests_extract_json') }}\n),\n\nrepos as (\n    select\n      CAST(id as INT) as repo_id,\n      html_url as repo_url,\n      name as repo_name,\n      stargazers_count,\n      watchers_count,\n      -- Use a dedicated name (repo prefix) to do not confuse analytics\n      -- From business perspective this is different created_at than in the case of commits/pull_requests\n      created_at as repo_created_at\n    from {{ var(\"input_schema_github\") }}.repositories\n),\n\nfinal as (\n    select\n      *\n    from repos r\n    -- Filter only repos, for which we collected at least one pull request\n    where exists (\n      select 1 from pulls_repo_ids p where p.repo_id = r.repo_id\n    )\n)\n\nselect * from final",
      "language": "sql",
      "refs": [
        [
          "pull_requests_extract_json"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.pull_requests_extract_json"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/repos/repos.sql",
      "compiled": true,
      "compiled_code": "with pulls_repo_ids as (\n    select distinct\n      repo_id\n    from \"demo\".\"github_input_stage\".\"pull_requests_extract_json\"\n),\n\nrepos as (\n    select\n      CAST(id as INT) as repo_id,\n      html_url as repo_url,\n      name as repo_name,\n      stargazers_count,\n      watchers_count,\n      -- Use a dedicated name (repo prefix) to do not confuse analytics\n      -- From business perspective this is different created_at than in the case of commits/pull_requests\n      created_at as repo_created_at\n    from github_input_stage.repositories\n),\n\nfinal as (\n    select\n      *\n    from repos r\n    -- Filter only repos, for which we collected at least one pull request\n    where exists (\n      select 1 from pulls_repo_ids p where p.repo_id = r.repo_id\n    )\n)\n\nselect * from final",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.pull_requests": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "pull_requests",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "github/pull_requests/pull_requests.sql",
      "original_file_path": "models/github/pull_requests/pull_requests.sql",
      "unique_id": "model.cicd_demo.pull_requests",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "pull_requests"
      ],
      "alias": "pull_requests",
      "checksum": {
        "name": "sha256",
        "checksum": "cbb4f3f990ff6eb1e423f3c92e112a05e8a1dcca3c2c639597dfc127ccd7274f"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        },
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": [
          "pull_request_number",
          "repo_id"
        ],
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "indexes": [
          {
            "columns": [
              "pull_request_number",
              "repo_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "pull_request_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "user_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "repo_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "created_at"
            ],
            "unique": false
          }
        ],
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "Pull requests",
      "columns": {
        "pull_request_id": {
          "name": "pull_request_id",
          "description": "Pull request ID",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": "STRING",
          "quote": null,
          "tags": []
        },
        "pull_request_number": {
          "name": "pull_request_number",
          "description": "Pull request number",
          "meta": {
            "gooddata": {
              "ldm_type": "label",
              "label_type": "TEXT",
              "attribute_column": "pull_request_id"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "user_id": {
          "name": "user_id",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "users"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "repo_id": {
          "name": "repo_id",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "repos"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "pull_request_url": {
          "name": "pull_request_url",
          "description": "Pull request URL",
          "meta": {
            "gooddata": {
              "ldm_type": "label",
              "label_type": "HYPERLINK",
              "attribute_column": "pull_request_id"
            }
          },
          "data_type": "STRING",
          "quote": null,
          "tags": []
        },
        "pull_request_title": {
          "name": "pull_request_title",
          "description": "Pull request title",
          "meta": {
            "gooddata": {
              "ldm_type": "attribute"
            }
          },
          "data_type": "STRING",
          "quote": null,
          "tags": []
        },
        "pull_request_draft": {
          "name": "pull_request_draft",
          "description": "Pull request draft",
          "meta": {
            "gooddata": {
              "ldm_type": "attribute"
            }
          },
          "data_type": "BOOLEAN",
          "quote": null,
          "tags": []
        },
        "created_at": {
          "name": "created_at",
          "description": "Created at",
          "meta": {
            "gooddata": {
              "ldm_type": "date"
            }
          },
          "data_type": "TIMESTAMP",
          "quote": null,
          "tags": []
        },
        "merged_at": {
          "name": "merged_at",
          "description": "Merged at",
          "meta": {
            "gooddata": {
              "ldm_type": "date"
            }
          },
          "data_type": "TIMESTAMP",
          "quote": null,
          "tags": []
        },
        "closed_at": {
          "name": "closed_at",
          "description": "Closed at",
          "meta": {
            "gooddata": {
              "ldm_type": "date"
            }
          },
          "data_type": "TIMESTAMP",
          "quote": null,
          "tags": []
        },
        "days_to_solve": {
          "name": "days_to_solve",
          "description": "Days to solve",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": "NUMERIC",
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "github"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/github/pull_requests/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "incremental",
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        },
        "indexes": [
          {
            "columns": [
              "pull_request_number",
              "repo_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "pull_request_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "user_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "repo_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "created_at"
            ],
            "unique": false
          }
        ],
        "unique_key": [
          "pull_request_number",
          "repo_id"
        ]
      },
      "created_at": 1692692941.519687,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"pull_requests\"",
      "raw_code": "{{ config(\n  indexes=[\n    {'columns': ['pull_request_number', 'repo_id'], 'unique': true},\n    {'columns': ['pull_request_id'], 'unique': true},\n    {'columns': ['user_id'], 'unique': false},\n    {'columns': ['repo_id'], 'unique': false},\n    {'columns': ['created_at'], 'unique': false}\n  ],\n  materialized='incremental',\n  unique_key=['pull_request_number', 'repo_id']\n) }}\n\nwith using_clause as (\n  select *\n  from {{ ref('pull_requests_extract_json') }}\n  {% if is_incremental() %}\n    where created_at > ( select max(created_at) from {{ this }} )\n  {% endif %}\n),\n\nupdates as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where (pull_request_number, repo_id) in ( select pull_request_number, repo_id from {{ this }} )\n  {% else %}\n    -- No updates when doing full load\n    where 1 = 0\n  {% endif %}\n),\n\ninserts as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where (pull_request_number, repo_id) not in ( select pull_request_number, repo_id from {{ this }} )\n  {% endif %}\n),\n\nusers as (\n    select * from {{ ref('users') }}\n),\n\nrepos as (\n    select * from {{ ref('repos') }}\n),\n\nfinal as (\n    select\n      repos.repo_name || '/' || p.pull_request_number as pull_request_id,\n      p.pull_request_number,\n      p.pull_request_url,\n      p.pull_request_title,\n      p.pull_request_draft,\n      p.created_at,\n      p.merged_at,\n      p.closed_at,\n      p.repo_id,\n      p.user_id,\n      (\n        -- Either merged_at, or closed_at(closed without merged) or now(not yet merged or closed)\n        extract(epoch from coalesce(p.merged_at, p.closed_at, {{ current_timestamp() }}))\n          - extract(epoch from p.created_at)\n      ) / 3600 / 24 as days_to_solve\n    from (\n      select * from inserts\n      union all select * from updates\n    ) p\n    -- Filter out commits without responsible user (data cleansing)\n    join users on p.user_id = users.user_id\n    join repos on p.repo_id = repos.repo_id\n)\n\nselect * from final",
      "language": "sql",
      "refs": [
        [
          "pull_requests_extract_json"
        ],
        [
          "users"
        ],
        [
          "repos"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt.is_incremental",
          "macro.cicd_demo.current_timestamp"
        ],
        "nodes": [
          "model.cicd_demo.pull_requests_extract_json",
          "model.cicd_demo.users",
          "model.cicd_demo.repos"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/pull_requests/pull_requests.sql",
      "compiled": true,
      "compiled_code": "\n\nwith using_clause as (\n  select *\n  from \"demo\".\"github_input_stage\".\"pull_requests_extract_json\"\n  \n    where created_at > ( select max(created_at) from \"demo\".\"cicd_output_stage\".\"pull_requests\" )\n  \n),\n\nupdates as (\n  select *\n  from using_clause\n  \n    where (pull_request_number, repo_id) in ( select pull_request_number, repo_id from \"demo\".\"cicd_output_stage\".\"pull_requests\" )\n  \n),\n\ninserts as (\n  select *\n  from using_clause\n  \n    where (pull_request_number, repo_id) not in ( select pull_request_number, repo_id from \"demo\".\"cicd_output_stage\".\"pull_requests\" )\n  \n),\n\nusers as (\n    select * from \"demo\".\"cicd_output_stage\".\"users\"\n),\n\nrepos as (\n    select * from \"demo\".\"cicd_output_stage\".\"repos\"\n),\n\nfinal as (\n    select\n      repos.repo_name || '/' || p.pull_request_number as pull_request_id,\n      p.pull_request_number,\n      p.pull_request_url,\n      p.pull_request_title,\n      p.pull_request_draft,\n      p.created_at,\n      p.merged_at,\n      p.closed_at,\n      p.repo_id,\n      p.user_id,\n      (\n        -- Either merged_at, or closed_at(closed without merged) or now(not yet merged or closed)\n        extract(epoch from coalesce(p.merged_at, p.closed_at, \n    current_timestamp))\n          - extract(epoch from p.created_at)\n      ) / 3600 / 24 as days_to_solve\n    from (\n      select * from inserts\n      union all select * from updates\n    ) p\n    -- Filter out commits without responsible user (data cleansing)\n    join users on p.user_id = users.user_id\n    join repos on p.repo_id = repos.repo_id\n)\n\nselect * from final",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.pull_requests_extract_json": {
      "database": "demo",
      "schema": "github_input_stage",
      "name": "pull_requests_extract_json",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "github/pull_requests/pull_requests_extract_json.sql",
      "original_file_path": "models/github/pull_requests/pull_requests_extract_json.sql",
      "unique_id": "model.cicd_demo.pull_requests_extract_json",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "pull_requests_extract_json"
      ],
      "alias": "pull_requests_extract_json",
      "checksum": {
        "name": "sha256",
        "checksum": "ce6b15a9c7e038bb1fe0c5e332ef718f541a19c3f6a07859bf51513e80d7bb58"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "github_input_stage",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "incremental",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": [
          "pull_request_number",
          "repo_id"
        ],
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "indexes": [
          {
            "columns": [
              "pull_request_number",
              "repo_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "user_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "created_at"
            ],
            "unique": false
          }
        ],
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "github_input_stage",
        "materialized": "incremental",
        "indexes": [
          {
            "columns": [
              "pull_request_number",
              "repo_id"
            ],
            "unique": true
          },
          {
            "columns": [
              "user_id"
            ],
            "unique": false
          },
          {
            "columns": [
              "created_at"
            ],
            "unique": false
          }
        ],
        "unique_key": [
          "pull_request_number",
          "repo_id"
        ]
      },
      "created_at": 1692692941.30732,
      "relation_name": "\"demo\".\"github_input_stage\".\"pull_requests_extract_json\"",
      "raw_code": "{{ config(\n  schema=var('input_schema_github'),\n  indexes=[\n    {'columns': ['pull_request_number', 'repo_id'], 'unique': true},\n    {'columns': ['user_id'], 'unique': false},\n    {'columns': ['created_at'], 'unique': false}\n  ],\n  materialized='incremental',\n  unique_key=['pull_request_number', 'repo_id']\n) }}\n\n-- Helper step, materialize extracted JSON fields first and then JOIN it with other tables\n-- Incremental mode\n\nwith using_clause as (\n  select\n    number as pull_request_number,\n    html_url as pull_request_url,\n    title as pull_request_title,\n    draft as pull_request_draft,\n    state,\n    CAST(repo_id as INT) as repo_id,\n    created_at,\n    merged_at,\n    closed_at,\n    {{ extract_json_value('user', 'id', 'user_id', 'INT') }}\n    --CAST(json_extract_path_text(to_json(\"{{ get_db_entity_name('user') }}\"), 'id') as INT) as user_id\n  from {{ var(\"input_schema_github\") }}.pull_requests\n  {% if is_incremental() %}\n    where created_at > ( select max(created_at) from {{ this }} )\n  {% endif %}\n),\n\nupdates as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where (pull_request_number, repo_id) in ( select pull_request_number, repo_id from {{ this }} )\n  {% else %}\n    -- No updates when doing full load\n    where 1 = 0\n  {% endif %}\n),\n\ninserts as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where (pull_request_number, repo_id) not in ( select pull_request_number, repo_id from {{ this }} )\n  {% endif %}\n),\n\nfinal as (\n    select *\n    from inserts\n    union all select * from updates\n)\n\nselect * from final",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.cicd_demo.extract_json_value",
          "macro.cicd_demo.get_db_entity_name",
          "macro.dbt.is_incremental"
        ],
        "nodes": []
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/pull_requests/pull_requests_extract_json.sql",
      "compiled": true,
      "compiled_code": "\n\n-- Helper step, materialize extracted JSON fields first and then JOIN it with other tables\n-- Incremental mode\n\nwith using_clause as (\n  select\n    number as pull_request_number,\n    html_url as pull_request_url,\n    title as pull_request_title,\n    draft as pull_request_draft,\n    state,\n    CAST(repo_id as INT) as repo_id,\n    created_at,\n    merged_at,\n    closed_at,\n    CAST(json_extract_path_text(to_json(\"user\"), 'id') AS INT) AS user_id\n    --CAST(json_extract_path_text(to_json(\"user\"), 'id') as INT) as user_id\n  from github_input_stage.pull_requests\n  \n    where created_at > ( select max(created_at) from \"demo\".\"github_input_stage\".\"pull_requests_extract_json\" )\n  \n),\n\nupdates as (\n  select *\n  from using_clause\n  \n    where (pull_request_number, repo_id) in ( select pull_request_number, repo_id from \"demo\".\"github_input_stage\".\"pull_requests_extract_json\" )\n  \n),\n\ninserts as (\n  select *\n  from using_clause\n  \n    where (pull_request_number, repo_id) not in ( select pull_request_number, repo_id from \"demo\".\"github_input_stage\".\"pull_requests_extract_json\" )\n  \n),\n\nfinal as (\n    select *\n    from inserts\n    union all select * from updates\n)\n\nselect * from final",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.users": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "users",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "github/users/users.sql",
      "original_file_path": "models/github/users/users.sql",
      "unique_id": "model.cicd_demo.users",
      "fqn": [
        "cicd_demo",
        "github",
        "users",
        "users"
      ],
      "alias": "users",
      "checksum": {
        "name": "sha256",
        "checksum": "f27e561ab5cbb3548eb4bc31720f1df53bd88af66f0f754b8c6a8f5c651394f6"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        },
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "indexes": [
          {
            "columns": [
              "user_id"
            ],
            "unique": true
          }
        ],
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "Users",
      "columns": {
        "user_id": {
          "name": "user_id",
          "description": "User ID",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": "INT",
          "quote": null,
          "tags": []
        },
        "user_url": {
          "name": "user_url",
          "description": "User URL",
          "meta": {
            "gooddata": {
              "ldm_type": "label",
              "label_type": "HYPERLINK",
              "attribute_column": "user_id"
            }
          },
          "data_type": "STRING",
          "quote": null,
          "tags": []
        },
        "login": {
          "name": "login",
          "description": "User login",
          "meta": {
            "gooddata": {
              "ldm_type": "label",
              "label_type": "TEXT",
              "attribute_column": "user_id"
            }
          },
          "data_type": "STRING",
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "github"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/github/users/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "table",
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        },
        "indexes": [
          {
            "columns": [
              "user_id"
            ],
            "unique": true
          }
        ]
      },
      "created_at": 1692692941.547735,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"users\"",
      "raw_code": "{{ config(\n  indexes=[\n    {'columns': ['user_id'], 'unique': true}\n  ]\n) }}\n\nwith contributors as (\n  select * from {{ var(\"input_schema_github\") }}.contributors\n),\n\nfinal as (\n  -- We do not want to store users multiple times per repo where they contribute (no analytics UC yet)\n  select distinct\n    CAST(contributors.id AS INT) as user_id,\n    contributors.html_url as user_html_url,\n    contributors.url as user_url,\n    contributors.login\n  from contributors\n)\n\nselect * from final",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": []
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/users/users.sql",
      "compiled": true,
      "compiled_code": "\n\nwith contributors as (\n  select * from github_input_stage.contributors\n),\n\nfinal as (\n  -- We do not want to store users multiple times per repo where they contribute (no analytics UC yet)\n  select distinct\n    CAST(contributors.id AS INT) as user_id,\n    contributors.html_url as user_html_url,\n    contributors.url as user_url,\n    contributors.login\n  from contributors\n)\n\nselect * from final",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.flights": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "flights",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "faa/flights/flights.sql",
      "original_file_path": "models/faa/flights/flights.sql",
      "unique_id": "model.cicd_demo.flights",
      "fqn": [
        "cicd_demo",
        "faa",
        "flights",
        "flights"
      ],
      "alias": "flights",
      "checksum": {
        "name": "sha256",
        "checksum": "9253a2d1c5f342d45b009dce2277b19cabc20ef4bfc41cb46adbf234113f0f65"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        },
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "",
      "columns": {
        "id2": {
          "name": "id2",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "carrier": {
          "name": "carrier",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "carriers"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "origin": {
          "name": "origin",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "airports"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "destination": {
          "name": "destination",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "airports"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "tail_num": {
          "name": "tail_num",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "aircraft"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "cancelled": {
          "name": "cancelled",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "diverted": {
          "name": "diverted",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "flight_num": {
          "name": "flight_num",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "arr_delay": {
          "name": "arr_delay",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "dep_delay": {
          "name": "dep_delay",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "distance": {
          "name": "distance",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "flight_time": {
          "name": "flight_time",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "taxi_in": {
          "name": "taxi_in",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "taxi_out": {
          "name": "taxi_out",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "dep_time": {
          "name": "dep_time",
          "description": "Departure time",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "faa"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/faa/flights/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "table",
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        }
      },
      "created_at": 1692692941.5565472,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"flights\"",
      "raw_code": "with flights as (\n  select\n    cancelled,\n    diverted,\n    flight_num,\n    id2,\n    cast(arr_delay as int) as arr_delay,\n    cast(dep_delay as int) as dep_delay,\n    cast(distance as int) as distance,\n    cast(flight_time as int) as flight_time,\n    cast(taxi_in as int) as taxi_in,\n    cast(taxi_out as int) as taxi_out,\n    carrier,\n    destination,\n    origin,\n    dep_time,\n    tail_num\n  from {{ var(\"input_schema_faa\") }}.flights\n)\n\nselect * from flights",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": []
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/flights/flights.sql",
      "compiled": true,
      "compiled_code": "with flights as (\n  select\n    cancelled,\n    diverted,\n    flight_num,\n    id2,\n    cast(arr_delay as int) as arr_delay,\n    cast(dep_delay as int) as dep_delay,\n    cast(distance as int) as distance,\n    cast(flight_time as int) as flight_time,\n    cast(taxi_in as int) as taxi_in,\n    cast(taxi_out as int) as taxi_out,\n    carrier,\n    destination,\n    origin,\n    dep_time,\n    tail_num\n  from faa_input_stage.flights\n)\n\nselect * from flights",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.aircraft": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "aircraft",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "faa/aircraft/aircraft.sql",
      "original_file_path": "models/faa/aircraft/aircraft.sql",
      "unique_id": "model.cicd_demo.aircraft",
      "fqn": [
        "cicd_demo",
        "faa",
        "aircraft",
        "aircraft"
      ],
      "alias": "aircraft",
      "checksum": {
        "name": "sha256",
        "checksum": "410aac009d45ca4f6987d4ae29f79e76259f0303fe0d2cfbafe66116c7f06727"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        },
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "Aircraft",
      "columns": {
        "tail_num": {
          "name": "tail_num",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "aircraft_model_code": {
          "name": "aircraft_model_code",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "reference",
              "referenced_table": "aircraft_models"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "faa"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/faa/aircraft/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "table",
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        }
      },
      "created_at": 1692692941.57137,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"aircraft\"",
      "raw_code": "with aircraft as (\n  select\n    tail_num,\n    aircraft_model_code\n  from {{ var(\"input_schema_faa\") }}.aircraft\n)\n\nselect * from aircraft",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": []
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/aircraft/aircraft.sql",
      "compiled": true,
      "compiled_code": "with aircraft as (\n  select\n    tail_num,\n    aircraft_model_code\n  from faa_input_stage.aircraft\n)\n\nselect * from aircraft",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.aircraft_models": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "aircraft_models",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "faa/aircraft_models/aircraft_models.sql",
      "original_file_path": "models/faa/aircraft_models/aircraft_models.sql",
      "unique_id": "model.cicd_demo.aircraft_models",
      "fqn": [
        "cicd_demo",
        "faa",
        "aircraft_models",
        "aircraft_models"
      ],
      "alias": "aircraft_models",
      "checksum": {
        "name": "sha256",
        "checksum": "f6409335d2fabdaa19a25ab357dfed3e37ba1e2a93cc6b4185e93ce8ee4ca5e4"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        },
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "Aircraft models",
      "columns": {
        "aircraft_model_code": {
          "name": "aircraft_model_code",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "manufacturer": {
          "name": "manufacturer",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "seats": {
          "name": "seats",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "faa"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/faa/aircraft_models/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "table",
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        }
      },
      "created_at": 1692692941.579076,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"aircraft_models\"",
      "raw_code": "with aircraft_models as (\n  select\n    aircraft_model_code,\n    manufacturer,\n    cast(seats as int) as seats\n  from {{ var(\"input_schema_faa\") }}.aircraft_models\n)\n\nselect * from aircraft_models",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": []
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/aircraft_models/aircraft_models.sql",
      "compiled": true,
      "compiled_code": "with aircraft_models as (\n  select\n    aircraft_model_code,\n    manufacturer,\n    cast(seats as int) as seats\n  from faa_input_stage.aircraft_models\n)\n\nselect * from aircraft_models",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.carriers": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "carriers",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "faa/carriers/carriers.sql",
      "original_file_path": "models/faa/carriers/carriers.sql",
      "unique_id": "model.cicd_demo.carriers",
      "fqn": [
        "cicd_demo",
        "faa",
        "carriers",
        "carriers"
      ],
      "alias": "carriers",
      "checksum": {
        "name": "sha256",
        "checksum": "5de48280c6c879c9509c0242f963ddbf07637a74e109ecbe2fbfeb20def1e1d9"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        },
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "",
      "columns": {
        "code": {
          "name": "code",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "nickname": {
          "name": "nickname",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "faa"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/faa/carriers/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "table",
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        }
      },
      "created_at": 1692692941.582967,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"carriers\"",
      "raw_code": "with carriers as (\n  select\n    code,\n    name,\n    nickname\n  from {{ var(\"input_schema_faa\") }}.carriers\n)\n\nselect * from carriers",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": []
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/carriers/carriers.sql",
      "compiled": true,
      "compiled_code": "with carriers as (\n  select\n    code,\n    name,\n    nickname\n  from faa_input_stage.carriers\n)\n\nselect * from carriers",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "model.cicd_demo.airports": {
      "database": "demo",
      "schema": "cicd_output_stage",
      "name": "airports",
      "resource_type": "model",
      "package_name": "cicd_demo",
      "path": "faa/airports/airports.sql",
      "original_file_path": "models/faa/airports/airports.sql",
      "unique_id": "model.cicd_demo.airports",
      "fqn": [
        "cicd_demo",
        "faa",
        "airports",
        "airports"
      ],
      "alias": "airports",
      "checksum": {
        "name": "sha256",
        "checksum": "db1b86ad51292eea9b2ded59fa845fa8925ec3185279ecc8a7f06207ec8f054e"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "cicd_output_stage",
        "database": null,
        "tags": [],
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        },
        "materialized": "table",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [],
      "description": "",
      "columns": {
        "code": {
          "name": "code",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "primary_key"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "faa_region": {
          "name": "faa_region",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "fac_type": {
          "name": "fac_type",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "state": {
          "name": "state",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "elevation": {
          "name": "elevation",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "fact"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "name": {
          "name": "name",
          "description": "",
          "meta": {},
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "latitude": {
          "name": "latitude",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "label",
              "label_type": "GEO_LATITUDE",
              "attribute_column": "code"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        },
        "longitude": {
          "name": "longitude",
          "description": "",
          "meta": {
            "gooddata": {
              "ldm_type": "label",
              "label_type": "GEO_LONGITUDE",
              "attribute_column": "code"
            }
          },
          "data_type": null,
          "quote": null,
          "tags": []
        }
      },
      "meta": {
        "gooddata": {
          "model_id": "faa"
        }
      },
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "cicd_demo://models/faa/airports/schema.yml",
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "schema": "{{ env_var('OUTPUT_SCHEMA', 'cicd_output_stage') }}",
        "materialized": "table",
        "meta": {
          "gooddata": {
            "model_id": "faa"
          }
        }
      },
      "created_at": 1692692941.5896761,
      "relation_name": "\"demo\".\"cicd_output_stage\".\"airports\"",
      "raw_code": "with airports as (\n  select\n    code,\n    faa_region,\n    fac_type,\n    state,\n    cast(elevation as int) as elevation,\n    code || '-' || full_name as name,\n    latitude,\n    longitude\n  from {{ var(\"input_schema_faa\") }}.airports\n)\n\nselect * from airports",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [],
        "nodes": []
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/airports/airports.sql",
      "compiled": true,
      "compiled_code": "with airports as (\n  select\n    code,\n    faa_region,\n    fac_type,\n    state,\n    cast(elevation as int) as elevation,\n    code || '-' || full_name as name,\n    latitude,\n    longitude\n  from faa_input_stage.airports\n)\n\nselect * from airports",
      "extra_ctes_injected": true,
      "extra_ctes": []
    },
    "operation.dbt_constraints.dbt_constraints-on-run-end-0": {
      "database": "demo",
      "schema": "cicd_input_stage",
      "name": "dbt_constraints-on-run-end-0",
      "resource_type": "operation",
      "package_name": "dbt_constraints",
      "path": "hooks/dbt_constraints-on-run-end-0.sql",
      "original_file_path": "./dbt_project.yml",
      "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0",
      "fqn": [
        "dbt_constraints",
        "hooks",
        "dbt_constraints-on-run-end-0"
      ],
      "alias": "dbt_constraints-on-run-end-0",
      "checksum": {
        "name": "sha256",
        "checksum": "322fdaf41d183a13b7417bf8f47935d83bfdf07242073cf29b8c8789010746fb"
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": null,
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "view",
        "incremental_strategy": null,
        "persist_docs": {},
        "quoting": {},
        "column_types": {},
        "full_refresh": null,
        "unique_key": null,
        "on_schema_change": "ignore",
        "grants": {},
        "packages": [],
        "docs": {
          "show": true,
          "node_color": null
        },
        "post-hook": [],
        "pre-hook": []
      },
      "tags": [
        "on-run-end"
      ],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.427558,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.create_constraints() }}",
      "language": "sql",
      "refs": [],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.create_constraints"
        ],
        "nodes": []
      },
      "compiled_path": null,
      "compiled": true,
      "compiled_code": "",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "index": 0
    },
    "test.cicd_demo.dbt_constraints_primary_key_reviews_review_id.7729332da5": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "review_id",
          "model": "{{ get_where_subquery(ref('reviews')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_reviews_review_id",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_reviews_review_id.sql",
      "original_file_path": "models/_todo/reviews/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_reviews_review_id.7729332da5",
      "fqn": [
        "cicd_demo",
        "_todo",
        "reviews",
        "dbt_constraints_primary_key_reviews_review_id"
      ],
      "alias": "dbt_constraints_primary_key_reviews_review_id",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": false,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.453491,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "reviews"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": []
      },
      "compiled_path": null,
      "column_name": "review_id",
      "file_key_name": "models.reviews"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_reviews_pull_request_id__pull_request_id__ref_pull_requests_.87966608a7": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('pull_requests')",
          "pk_column_name": "pull_request_id",
          "column_name": "pull_request_id",
          "model": "{{ get_where_subquery(ref('reviews')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_reviews_pull_request_id__pull_request_id__ref_pull_requests_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_re_decbc7def7c314cf25ed10ae345f4c4b.sql",
      "original_file_path": "models/_todo/reviews/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_reviews_pull_request_id__pull_request_id__ref_pull_requests_.87966608a7",
      "fqn": [
        "cicd_demo",
        "_todo",
        "reviews",
        "dbt_constraints_foreign_key_reviews_pull_request_id__pull_request_id__ref_pull_requests_"
      ],
      "alias": "dbt_constraints_foreign_key_re_decbc7def7c314cf25ed10ae345f4c4b",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": false,
        "alias": "dbt_constraints_foreign_key_re_decbc7def7c314cf25ed10ae345f4c4b",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_constraints_foreign_key_re_decbc7def7c314cf25ed10ae345f4c4b"
      },
      "created_at": 1692692941.46417,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_re_decbc7def7c314cf25ed10ae345f4c4b\") }}",
      "language": "sql",
      "refs": [
        [
          "pull_requests"
        ],
        [
          "reviews"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.pull_requests"
        ]
      },
      "compiled_path": null,
      "column_name": "pull_request_id",
      "file_key_name": "models.reviews"
    },
    "test.cicd_demo.dbt_constraints_primary_key_commits_commit_id.99ea6a0fda": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "commit_id",
          "model": "{{ get_where_subquery(ref('commits')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_commits_commit_id",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_commits_commit_id.sql",
      "original_file_path": "models/github/commits/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_commits_commit_id.99ea6a0fda",
      "fqn": [
        "cicd_demo",
        "github",
        "commits",
        "dbt_constraints_primary_key_commits_commit_id"
      ],
      "alias": "dbt_constraints_primary_key_commits_commit_id",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.48306,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "commits"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.commits"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/commits/schema.yml/dbt_constraints_primary_key_commits_commit_id.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        commit_id, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"commits\"\n    group by commit_id\n    having count(*) > 1\n        or commit_id is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "commit_id",
      "file_key_name": "models.commits"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_commits_user_id__user_id__ref_users_.3044de9a97": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('users')",
          "pk_column_name": "user_id",
          "column_name": "user_id",
          "model": "{{ get_where_subquery(ref('commits')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_commits_user_id__user_id__ref_users_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_co_13da4642a575dbe07ddeaf8a9b8a4175.sql",
      "original_file_path": "models/github/commits/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_commits_user_id__user_id__ref_users_.3044de9a97",
      "fqn": [
        "cicd_demo",
        "github",
        "commits",
        "dbt_constraints_foreign_key_commits_user_id__user_id__ref_users_"
      ],
      "alias": "dbt_constraints_foreign_key_co_13da4642a575dbe07ddeaf8a9b8a4175",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": "dbt_constraints_foreign_key_co_13da4642a575dbe07ddeaf8a9b8a4175",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_constraints_foreign_key_co_13da4642a575dbe07ddeaf8a9b8a4175"
      },
      "created_at": 1692692941.48689,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_13da4642a575dbe07ddeaf8a9b8a4175\") }}",
      "language": "sql",
      "refs": [
        [
          "users"
        ],
        [
          "commits"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.users",
          "model.cicd_demo.commits"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/commits/schema.yml/dbt_constraints_foreign_key_co_13da4642a575dbe07ddeaf8a9b8a4175.sql",
      "compiled": true,
      "compiled_code": "\nwith child as (\n  select\n    user_id\n  from \"demo\".\"cicd_output_stage\".\"commits\"\n  where 1=1\n        and user_id is not null\n        \n),\n\nparent as (\n    select\n        user_id\n    from \"demo\".\"cicd_output_stage\".\"users\"\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.user_id = child.user_id\n\n    where parent.user_id is null\n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "user_id",
      "file_key_name": "models.commits"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_commits_repo_id__repo_id__ref_repos_.8ec46a93ae": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('repos')",
          "pk_column_name": "repo_id",
          "column_name": "repo_id",
          "model": "{{ get_where_subquery(ref('commits')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_commits_repo_id__repo_id__ref_repos_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_co_6c2f08ee993093bca4cc0c8720e3812a.sql",
      "original_file_path": "models/github/commits/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_commits_repo_id__repo_id__ref_repos_.8ec46a93ae",
      "fqn": [
        "cicd_demo",
        "github",
        "commits",
        "dbt_constraints_foreign_key_commits_repo_id__repo_id__ref_repos_"
      ],
      "alias": "dbt_constraints_foreign_key_co_6c2f08ee993093bca4cc0c8720e3812a",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": "dbt_constraints_foreign_key_co_6c2f08ee993093bca4cc0c8720e3812a",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_constraints_foreign_key_co_6c2f08ee993093bca4cc0c8720e3812a"
      },
      "created_at": 1692692941.491064,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_6c2f08ee993093bca4cc0c8720e3812a\") }}",
      "language": "sql",
      "refs": [
        [
          "repos"
        ],
        [
          "commits"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.repos",
          "model.cicd_demo.commits"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/commits/schema.yml/dbt_constraints_foreign_key_co_6c2f08ee993093bca4cc0c8720e3812a.sql",
      "compiled": true,
      "compiled_code": "\nwith child as (\n  select\n    repo_id\n  from \"demo\".\"cicd_output_stage\".\"commits\"\n  where 1=1\n        and repo_id is not null\n        \n),\n\nparent as (\n    select\n        repo_id\n    from \"demo\".\"cicd_output_stage\".\"repos\"\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.repo_id = child.repo_id\n\n    where parent.repo_id is null\n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "repo_id",
      "file_key_name": "models.commits"
    },
    "test.cicd_demo.dbt_constraints_primary_key_repos_repo_id.c8eca20caa": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "repo_id",
          "model": "{{ get_where_subquery(ref('repos')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_repos_repo_id",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_repos_repo_id.sql",
      "original_file_path": "models/github/repos/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_repos_repo_id.c8eca20caa",
      "fqn": [
        "cicd_demo",
        "github",
        "repos",
        "dbt_constraints_primary_key_repos_repo_id"
      ],
      "alias": "dbt_constraints_primary_key_repos_repo_id",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.507,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "repos"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.repos"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/repos/schema.yml/dbt_constraints_primary_key_repos_repo_id.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        repo_id, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"repos\"\n    group by repo_id\n    having count(*) > 1\n        or repo_id is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "repo_id",
      "file_key_name": "models.repos"
    },
    "test.cicd_demo.dbt_constraints_primary_key_pull_requests_pull_request_id.919ab5363a": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "pull_request_id",
          "model": "{{ get_where_subquery(ref('pull_requests')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_pull_requests_pull_request_id",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_pull_requests_pull_request_id.sql",
      "original_file_path": "models/github/pull_requests/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_pull_requests_pull_request_id.919ab5363a",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "dbt_constraints_primary_key_pull_requests_pull_request_id"
      ],
      "alias": "dbt_constraints_primary_key_pull_requests_pull_request_id",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.5202198,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "pull_requests"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.pull_requests"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/pull_requests/schema.yml/dbt_constraints_primary_key_pull_requests_pull_request_id.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        pull_request_id, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"pull_requests\"\n    group by pull_request_id\n    having count(*) > 1\n        or pull_request_id is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "pull_request_id",
      "file_key_name": "models.pull_requests"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_user_id__user_id__ref_users_.d056122d52": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('users')",
          "pk_column_name": "user_id",
          "column_name": "user_id",
          "model": "{{ get_where_subquery(ref('pull_requests')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_pull_requests_user_id__user_id__ref_users_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_pu_ad9d2ba92df4a314a334811b9cfeed37.sql",
      "original_file_path": "models/github/pull_requests/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_user_id__user_id__ref_users_.d056122d52",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "dbt_constraints_foreign_key_pull_requests_user_id__user_id__ref_users_"
      ],
      "alias": "dbt_constraints_foreign_key_pu_ad9d2ba92df4a314a334811b9cfeed37",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": "dbt_constraints_foreign_key_pu_ad9d2ba92df4a314a334811b9cfeed37",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_constraints_foreign_key_pu_ad9d2ba92df4a314a334811b9cfeed37"
      },
      "created_at": 1692692941.522787,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_pu_ad9d2ba92df4a314a334811b9cfeed37\") }}",
      "language": "sql",
      "refs": [
        [
          "users"
        ],
        [
          "pull_requests"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.users",
          "model.cicd_demo.pull_requests"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/pull_requests/schema.yml/dbt_constraints_foreign_key_pu_ad9d2ba92df4a314a334811b9cfeed37.sql",
      "compiled": true,
      "compiled_code": "\nwith child as (\n  select\n    user_id\n  from \"demo\".\"cicd_output_stage\".\"pull_requests\"\n  where 1=1\n        and user_id is not null\n        \n),\n\nparent as (\n    select\n        user_id\n    from \"demo\".\"cicd_output_stage\".\"users\"\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.user_id = child.user_id\n\n    where parent.user_id is null\n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "user_id",
      "file_key_name": "models.pull_requests"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_repo_id__repo_id__ref_repos_.06edd7418b": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('repos')",
          "pk_column_name": "repo_id",
          "column_name": "repo_id",
          "model": "{{ get_where_subquery(ref('pull_requests')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_pull_requests_repo_id__repo_id__ref_repos_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_pu_a68275a216f28c8272fac2f4691585ca.sql",
      "original_file_path": "models/github/pull_requests/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_repo_id__repo_id__ref_repos_.06edd7418b",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "dbt_constraints_foreign_key_pull_requests_repo_id__repo_id__ref_repos_"
      ],
      "alias": "dbt_constraints_foreign_key_pu_a68275a216f28c8272fac2f4691585ca",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": "dbt_constraints_foreign_key_pu_a68275a216f28c8272fac2f4691585ca",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_constraints_foreign_key_pu_a68275a216f28c8272fac2f4691585ca"
      },
      "created_at": 1692692941.526142,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_pu_a68275a216f28c8272fac2f4691585ca\") }}",
      "language": "sql",
      "refs": [
        [
          "repos"
        ],
        [
          "pull_requests"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.repos",
          "model.cicd_demo.pull_requests"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/pull_requests/schema.yml/dbt_constraints_foreign_key_pu_a68275a216f28c8272fac2f4691585ca.sql",
      "compiled": true,
      "compiled_code": "\nwith child as (\n  select\n    repo_id\n  from \"demo\".\"cicd_output_stage\".\"pull_requests\"\n  where 1=1\n        and repo_id is not null\n        \n),\n\nparent as (\n    select\n        repo_id\n    from \"demo\".\"cicd_output_stage\".\"repos\"\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.repo_id = child.repo_id\n\n    where parent.repo_id is null\n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "repo_id",
      "file_key_name": "models.pull_requests"
    },
    "test.cicd_demo.dbt_constraints_primary_key_users_user_id.cddf4edd90": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "user_id",
          "model": "{{ get_where_subquery(ref('users')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_users_user_id",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_users_user_id.sql",
      "original_file_path": "models/github/users/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_users_user_id.cddf4edd90",
      "fqn": [
        "cicd_demo",
        "github",
        "users",
        "dbt_constraints_primary_key_users_user_id"
      ],
      "alias": "dbt_constraints_primary_key_users_user_id",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.548266,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "users"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.users"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/github/users/schema.yml/dbt_constraints_primary_key_users_user_id.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        user_id, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"users\"\n    group by user_id\n    having count(*) > 1\n        or user_id is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "user_id",
      "file_key_name": "models.users"
    },
    "test.cicd_demo.dbt_constraints_primary_key_flights_id2.ab3c5cf673": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "id2",
          "model": "{{ get_where_subquery(ref('flights')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_flights_id2",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_flights_id2.sql",
      "original_file_path": "models/faa/flights/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_flights_id2.ab3c5cf673",
      "fqn": [
        "cicd_demo",
        "faa",
        "flights",
        "dbt_constraints_primary_key_flights_id2"
      ],
      "alias": "dbt_constraints_primary_key_flights_id2",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.557056,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "flights"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.flights"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/flights/schema.yml/dbt_constraints_primary_key_flights_id2.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        id2, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"flights\"\n    group by id2\n    having count(*) > 1\n        or id2 is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "id2",
      "file_key_name": "models.flights"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_flights_carrier__code__ref_carriers_.efed8dff2a": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('carriers')",
          "pk_column_name": "code",
          "column_name": "carrier",
          "model": "{{ get_where_subquery(ref('flights')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_flights_carrier__code__ref_carriers_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_fl_45222d5fa17beaafee0bddcfb65f16f0.sql",
      "original_file_path": "models/faa/flights/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_flights_carrier__code__ref_carriers_.efed8dff2a",
      "fqn": [
        "cicd_demo",
        "faa",
        "flights",
        "dbt_constraints_foreign_key_flights_carrier__code__ref_carriers_"
      ],
      "alias": "dbt_constraints_foreign_key_fl_45222d5fa17beaafee0bddcfb65f16f0",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": "dbt_constraints_foreign_key_fl_45222d5fa17beaafee0bddcfb65f16f0",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_constraints_foreign_key_fl_45222d5fa17beaafee0bddcfb65f16f0"
      },
      "created_at": 1692692941.5595589,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fl_45222d5fa17beaafee0bddcfb65f16f0\") }}",
      "language": "sql",
      "refs": [
        [
          "carriers"
        ],
        [
          "flights"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.carriers",
          "model.cicd_demo.flights"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/flights/schema.yml/dbt_constraints_foreign_key_fl_45222d5fa17beaafee0bddcfb65f16f0.sql",
      "compiled": true,
      "compiled_code": "\nwith child as (\n  select\n    carrier\n  from \"demo\".\"cicd_output_stage\".\"flights\"\n  where 1=1\n        and carrier is not null\n        \n),\n\nparent as (\n    select\n        code\n    from \"demo\".\"cicd_output_stage\".\"carriers\"\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.code = child.carrier\n\n    where parent.code is null\n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "carrier",
      "file_key_name": "models.flights"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_flights_origin__code__ref_airports_.42b7c9061a": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('airports')",
          "pk_column_name": "code",
          "column_name": "origin",
          "model": "{{ get_where_subquery(ref('flights')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_flights_origin__code__ref_airports_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_flights_origin__code__ref_airports_.sql",
      "original_file_path": "models/faa/flights/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_flights_origin__code__ref_airports_.42b7c9061a",
      "fqn": [
        "cicd_demo",
        "faa",
        "flights",
        "dbt_constraints_foreign_key_flights_origin__code__ref_airports_"
      ],
      "alias": "dbt_constraints_foreign_key_flights_origin__code__ref_airports_",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.562942,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "airports"
        ],
        [
          "flights"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.airports",
          "model.cicd_demo.flights"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/flights/schema.yml/dbt_constraints_foreign_key_flights_origin__code__ref_airports_.sql",
      "compiled": true,
      "compiled_code": "\nwith child as (\n  select\n    origin\n  from \"demo\".\"cicd_output_stage\".\"flights\"\n  where 1=1\n        and origin is not null\n        \n),\n\nparent as (\n    select\n        code\n    from \"demo\".\"cicd_output_stage\".\"airports\"\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.code = child.origin\n\n    where parent.code is null\n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "origin",
      "file_key_name": "models.flights"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_flights_tail_num__tail_num__ref_aircraft_.4530d69393": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('aircraft')",
          "pk_column_name": "tail_num",
          "column_name": "tail_num",
          "model": "{{ get_where_subquery(ref('flights')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_flights_tail_num__tail_num__ref_aircraft_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_fl_e08262b0e7e755bae2dcab4022aaff41.sql",
      "original_file_path": "models/faa/flights/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_flights_tail_num__tail_num__ref_aircraft_.4530d69393",
      "fqn": [
        "cicd_demo",
        "faa",
        "flights",
        "dbt_constraints_foreign_key_flights_tail_num__tail_num__ref_aircraft_"
      ],
      "alias": "dbt_constraints_foreign_key_fl_e08262b0e7e755bae2dcab4022aaff41",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": "dbt_constraints_foreign_key_fl_e08262b0e7e755bae2dcab4022aaff41",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_constraints_foreign_key_fl_e08262b0e7e755bae2dcab4022aaff41"
      },
      "created_at": 1692692941.56611,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_fl_e08262b0e7e755bae2dcab4022aaff41\") }}",
      "language": "sql",
      "refs": [
        [
          "aircraft"
        ],
        [
          "flights"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.aircraft",
          "model.cicd_demo.flights"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/flights/schema.yml/dbt_constraints_foreign_key_fl_e08262b0e7e755bae2dcab4022aaff41.sql",
      "compiled": true,
      "compiled_code": "\nwith child as (\n  select\n    tail_num\n  from \"demo\".\"cicd_output_stage\".\"flights\"\n  where 1=1\n        and tail_num is not null\n        \n),\n\nparent as (\n    select\n        tail_num\n    from \"demo\".\"cicd_output_stage\".\"aircraft\"\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.tail_num = child.tail_num\n\n    where parent.tail_num is null\n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "tail_num",
      "file_key_name": "models.flights"
    },
    "test.cicd_demo.dbt_constraints_primary_key_aircraft_tail_num.b6907b519f": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "tail_num",
          "model": "{{ get_where_subquery(ref('aircraft')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_aircraft_tail_num",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_aircraft_tail_num.sql",
      "original_file_path": "models/faa/aircraft/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_aircraft_tail_num.b6907b519f",
      "fqn": [
        "cicd_demo",
        "faa",
        "aircraft",
        "dbt_constraints_primary_key_aircraft_tail_num"
      ],
      "alias": "dbt_constraints_primary_key_aircraft_tail_num",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.571839,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "aircraft"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.aircraft"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/aircraft/schema.yml/dbt_constraints_primary_key_aircraft_tail_num.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        tail_num, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"aircraft\"\n    group by tail_num\n    having count(*) > 1\n        or tail_num is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "tail_num",
      "file_key_name": "models.aircraft"
    },
    "test.cicd_demo.dbt_constraints_foreign_key_aircraft_aircraft_model_code__aircraft_model_code__ref_aircraft_models_.5f77421d63": {
      "test_metadata": {
        "name": "foreign_key",
        "kwargs": {
          "pk_table_name": "ref('aircraft_models')",
          "pk_column_name": "aircraft_model_code",
          "column_name": "aircraft_model_code",
          "model": "{{ get_where_subquery(ref('aircraft')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_foreign_key_aircraft_aircraft_model_code__aircraft_model_code__ref_aircraft_models_",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_foreign_key_ai_2d4471d8f1ea92485e1d52f45d972017.sql",
      "original_file_path": "models/faa/aircraft/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_foreign_key_aircraft_aircraft_model_code__aircraft_model_code__ref_aircraft_models_.5f77421d63",
      "fqn": [
        "cicd_demo",
        "faa",
        "aircraft",
        "dbt_constraints_foreign_key_aircraft_aircraft_model_code__aircraft_model_code__ref_aircraft_models_"
      ],
      "alias": "dbt_constraints_foreign_key_ai_2d4471d8f1ea92485e1d52f45d972017",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": "dbt_constraints_foreign_key_ai_2d4471d8f1ea92485e1d52f45d972017",
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {
        "alias": "dbt_constraints_foreign_key_ai_2d4471d8f1ea92485e1d52f45d972017"
      },
      "created_at": 1692692941.574201,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_ai_2d4471d8f1ea92485e1d52f45d972017\") }}",
      "language": "sql",
      "refs": [
        [
          "aircraft_models"
        ],
        [
          "aircraft"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_foreign_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.aircraft_models",
          "model.cicd_demo.aircraft"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/aircraft/schema.yml/dbt_constraints_foreign_key_ai_2d4471d8f1ea92485e1d52f45d972017.sql",
      "compiled": true,
      "compiled_code": "\nwith child as (\n  select\n    aircraft_model_code\n  from \"demo\".\"cicd_output_stage\".\"aircraft\"\n  where 1=1\n        and aircraft_model_code is not null\n        \n),\n\nparent as (\n    select\n        aircraft_model_code\n    from \"demo\".\"cicd_output_stage\".\"aircraft_models\"\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.aircraft_model_code = child.aircraft_model_code\n\n    where parent.aircraft_model_code is null\n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "aircraft_model_code",
      "file_key_name": "models.aircraft"
    },
    "test.cicd_demo.dbt_constraints_primary_key_aircraft_models_aircraft_model_code.8cb531c034": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "aircraft_model_code",
          "model": "{{ get_where_subquery(ref('aircraft_models')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_aircraft_models_aircraft_model_code",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_aircraft_models_aircraft_model_code.sql",
      "original_file_path": "models/faa/aircraft_models/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_aircraft_models_aircraft_model_code.8cb531c034",
      "fqn": [
        "cicd_demo",
        "faa",
        "aircraft_models",
        "dbt_constraints_primary_key_aircraft_models_aircraft_model_code"
      ],
      "alias": "dbt_constraints_primary_key_aircraft_models_aircraft_model_code",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.5795252,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "aircraft_models"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.aircraft_models"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/aircraft_models/schema.yml/dbt_constraints_primary_key_aircraft_models_aircraft_model_code.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        aircraft_model_code, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"aircraft_models\"\n    group by aircraft_model_code\n    having count(*) > 1\n        or aircraft_model_code is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "aircraft_model_code",
      "file_key_name": "models.aircraft_models"
    },
    "test.cicd_demo.dbt_constraints_primary_key_carriers_code.f6c920845b": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "code",
          "model": "{{ get_where_subquery(ref('carriers')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_carriers_code",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_carriers_code.sql",
      "original_file_path": "models/faa/carriers/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_carriers_code.f6c920845b",
      "fqn": [
        "cicd_demo",
        "faa",
        "carriers",
        "dbt_constraints_primary_key_carriers_code"
      ],
      "alias": "dbt_constraints_primary_key_carriers_code",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.583403,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "carriers"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.carriers"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/carriers/schema.yml/dbt_constraints_primary_key_carriers_code.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        code, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"carriers\"\n    group by code\n    having count(*) > 1\n        or code is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "code",
      "file_key_name": "models.carriers"
    },
    "test.cicd_demo.dbt_constraints_primary_key_airports_code.bc08a869e8": {
      "test_metadata": {
        "name": "primary_key",
        "kwargs": {
          "column_name": "code",
          "model": "{{ get_where_subquery(ref('airports')) }}"
        },
        "namespace": "dbt_constraints"
      },
      "database": "demo",
      "schema": "dbt_test__audit",
      "name": "dbt_constraints_primary_key_airports_code",
      "resource_type": "test",
      "package_name": "cicd_demo",
      "path": "dbt_constraints_primary_key_airports_code.sql",
      "original_file_path": "models/faa/airports/schema.yml",
      "unique_id": "test.cicd_demo.dbt_constraints_primary_key_airports_code.bc08a869e8",
      "fqn": [
        "cicd_demo",
        "faa",
        "airports",
        "dbt_constraints_primary_key_airports_code"
      ],
      "alias": "dbt_constraints_primary_key_airports_code",
      "checksum": {
        "name": "none",
        "checksum": ""
      },
      "config": {
        "enabled": true,
        "alias": null,
        "schema": "dbt_test__audit",
        "database": null,
        "tags": [],
        "meta": {},
        "materialized": "test",
        "severity": "ERROR",
        "store_failures": null,
        "where": null,
        "limit": null,
        "fail_calc": "count(*)",
        "warn_if": "!= 0",
        "error_if": "!= 0"
      },
      "tags": [],
      "description": "",
      "columns": {},
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "build_path": null,
      "deferred": false,
      "unrendered_config": {},
      "created_at": 1692692941.590175,
      "relation_name": null,
      "raw_code": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}",
      "language": "sql",
      "refs": [
        [
          "airports"
        ]
      ],
      "sources": [],
      "metrics": [],
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.test_primary_key",
          "macro.dbt.get_where_subquery"
        ],
        "nodes": [
          "model.cicd_demo.airports"
        ]
      },
      "compiled_path": "target/compiled/cicd_demo/models/faa/airports/schema.yml/dbt_constraints_primary_key_airports_code.sql",
      "compiled": true,
      "compiled_code": "with validation_errors as (\n    select\n        code, count(*) as row_count\n    from \"demo\".\"cicd_output_stage\".\"airports\"\n    group by code\n    having count(*) > 1\n        or code is null\n        \n)\n\nselect *\nfrom validation_errors",
      "extra_ctes_injected": true,
      "extra_ctes": [],
      "column_name": "code",
      "file_key_name": "models.airports"
    }
  },
  "sources": {},
  "macros": {
    "macro.cicd_demo.extract_json_value": {
      "name": "extract_json_value",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/extract_json_value.sql",
      "original_file_path": "macros/extract_json_value.sql",
      "unique_id": "macro.cicd_demo.extract_json_value",
      "macro_sql": "{% macro extract_json_value(json_column_name, field_name, target_column_name, data_type) -%}\n\n    {%- set db_entity_name = get_db_entity_name(json_column_name) -%}\n\n    {%- if target.type == \"snowflake\" -%}\n\n        CAST(json_extract_path_text(to_json(parse_json(\"{{ db_entity_name }}\")), '{{ field_name }}') AS {{ data_type }}) AS {{ target_column_name }}\n\n    {%- elif target.type == \"vertica\" -%}\n\n        CAST((public.MapJSONExtractor(\"{{ db_entity_name }}\"))['{{ field_name }}'] AS {{ data_type }}) AS {{ target_column_name }}\n\n    {%- elif target.type == \"postgres\" -%}\n\n        CAST(json_extract_path_text(to_json(\"{{ db_entity_name }}\"), '{{ field_name }}') AS {{ data_type }}) AS {{ target_column_name }}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"Invalid `target.type`. Got: \" ~ target.type) }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.cicd_demo.get_db_entity_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4395862,
      "supported_languages": null
    },
    "macro.cicd_demo.get_db_entity_name": {
      "name": "get_db_entity_name",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/get_db_entity_name.sql",
      "original_file_path": "macros/get_db_entity_name.sql",
      "unique_id": "macro.cicd_demo.get_db_entity_name",
      "macro_sql": "{% macro get_db_entity_name(entity_name, node) -%}\n\n    {%- if target.type == \"snowflake\" -%}\n\n        {{ entity_name.upper() }}\n\n    {%- else -%}\n\n        {{ entity_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.439908,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__create_primary_key": {
      "name": "vertica__create_primary_key",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__create_primary_key",
      "macro_sql": "\n{%- macro vertica__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4483562,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__create_unique_key": {
      "name": "vertica__create_unique_key",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__create_unique_key",
      "macro_sql": "\n{%- macro vertica__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.449745,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__create_foreign_key": {
      "name": "vertica__create_foreign_key",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__create_foreign_key",
      "macro_sql": "\n{%- macro vertica__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                    ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.foreign_key_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt_constraints.have_references_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.451648,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__create_not_null": {
      "name": "vertica__create_not_null",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__create_not_null",
      "macro_sql": "\n{%- macro vertica__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name|upper not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} ALTER {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n            {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_list",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.453533,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__unique_constraint_exists": {
      "name": "vertica__unique_constraint_exists",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__unique_constraint_exists",
      "macro_sql": "\n{%- macro vertica__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n      select constraint_name, column_name\n      from constraint_columns\n      where\n          table_schema ilike '{{table_relation.schema}}'\n        and table_name ilike '{{table_relation.identifier}}'\n        and constraint_type in ('u')\n      order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    select constraint_name, column_name\n    from constraint_columns\n    where\n        table_schema ilike '{{table_relation.schema}}'\n      and table_name ilike '{{table_relation.identifier}}'\n      and constraint_type in ('p')\n    order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.column_list_matches",
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.456196,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__foreign_key_exists": {
      "name": "vertica__foreign_key_exists",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__foreign_key_exists",
      "macro_sql": "\n{%- macro vertica__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n        select constraint_name as fk_name, column_name as fk_column_name\n        from constraint_columns\n        where\n            table_schema ilike '{{table_relation.schema}}'\n          and table_name ilike '{{table_relation.identifier}}'\n          and constraint_type in ('f')\n        order by constraint_name\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.column_list_matches",
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.457909,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__have_references_priv": {
      "name": "vertica__have_references_priv",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__have_references_priv",
      "macro_sql": "{%- macro vertica__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.cicd_demo.vertica__lookup_table_privileges"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.458456,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__have_ownership_priv": {
      "name": "vertica__have_ownership_priv",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__have_ownership_priv",
      "macro_sql": "{%- macro vertica__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.cicd_demo.vertica__lookup_table_privileges"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.458905,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__lookup_table_privileges": {
      "name": "vertica__lookup_table_privileges",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__lookup_table_privileges",
      "macro_sql": "{%- macro vertica__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n            select distinct\n              upper(tp.table_schema) as \"table_schema\",\n              upper(tp.table_name) as \"table_name\",\n              tp.privilege_type as \"privilege_type\"\n            from {{table_relation.database}}.information_schema.table_privileges tp\n            where is_role_in_session(tp.grantee)\n              and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.460074,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__lookup_table_columns": {
      "name": "vertica__lookup_table_columns",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__lookup_table_columns",
      "macro_sql": "{%- macro vertica__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n            select column_name, is_nullable\n            from columns\n            where table_schema ilike '{{table_relation.schema}}'\n              and table_name ilike '{{table_relation.identifier}}'\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['is_nullable'] == False -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4611478,
      "supported_languages": null
    },
    "macro.cicd_demo.vertica__get_create_index_sql": {
      "name": "vertica__get_create_index_sql",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/vertica__create_constraints.sql",
      "original_file_path": "macros/vertica__create_constraints.sql",
      "unique_id": "macro.cicd_demo.vertica__get_create_index_sql",
      "macro_sql": "{%- macro vertica__get_create_index_sql(table_relation, lookup_cache) -%}\n\n    {%- do log(\"Skipping creation of indexes, they are not supported by Vertica\", info=true) -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.461339,
      "supported_languages": null
    },
    "macro.cicd_demo.current_timestamp": {
      "name": "current_timestamp",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/current_timestamp.sql",
      "original_file_path": "macros/current_timestamp.sql",
      "unique_id": "macro.cicd_demo.current_timestamp",
      "macro_sql": "{% macro current_timestamp() -%}\n\n    {# TODO - may not work correctly with timestamp with timezone #}\n    current_timestamp\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4615092,
      "supported_languages": null
    },
    "macro.cicd_demo.generate_schema_name": {
      "name": "generate_schema_name",
      "resource_type": "macro",
      "package_name": "cicd_demo",
      "path": "macros/generate_schema_name.sql",
      "original_file_path": "macros/generate_schema_name.sql",
      "unique_id": "macro.cicd_demo.generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.461857,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__current_timestamp": {
      "name": "postgres__current_timestamp",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/timestamps.sql",
      "original_file_path": "macros/timestamps.sql",
      "unique_id": "macro.dbt_postgres.postgres__current_timestamp",
      "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.462153,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__snapshot_string_as_time": {
      "name": "postgres__snapshot_string_as_time",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/timestamps.sql",
      "original_file_path": "macros/timestamps.sql",
      "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time",
      "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4623392,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__snapshot_get_time": {
      "name": "postgres__snapshot_get_time",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/timestamps.sql",
      "original_file_path": "macros/timestamps.sql",
      "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time",
      "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.cicd_demo.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4624481,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__current_timestamp_backcompat": {
      "name": "postgres__current_timestamp_backcompat",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/timestamps.sql",
      "original_file_path": "macros/timestamps.sql",
      "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat",
      "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.462566,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {
      "name": "postgres__current_timestamp_in_utc_backcompat",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/timestamps.sql",
      "original_file_path": "macros/timestamps.sql",
      "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.462678,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__get_catalog": {
      "name": "postgres__get_catalog",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/catalog.sql",
      "original_file_path": "macros/catalog.sql",
      "unique_id": "macro.dbt_postgres.postgres__get_catalog",
      "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.463747,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres_get_relations": {
      "name": "postgres_get_relations",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/relations.sql",
      "original_file_path": "macros/relations.sql",
      "unique_id": "macro.dbt_postgres.postgres_get_relations",
      "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.464386,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__create_table_as": {
      "name": "postgres__create_table_as",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__create_table_as",
      "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.470686,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__get_create_index_sql": {
      "name": "postgres__get_create_index_sql",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql",
      "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.471225,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__create_schema": {
      "name": "postgres__create_schema",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__create_schema",
      "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4715679,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__drop_schema": {
      "name": "postgres__drop_schema",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__drop_schema",
      "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4718971,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__get_columns_in_relation": {
      "name": "postgres__get_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation",
      "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt.sql_convert_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.472398,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__list_relations_without_caching": {
      "name": "postgres__list_relations_without_caching",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching",
      "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.472894,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__information_schema_name": {
      "name": "postgres__information_schema_name",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__information_schema_name",
      "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.473077,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__list_schemas": {
      "name": "postgres__list_schemas",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__list_schemas",
      "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.473427,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__check_schema_exists": {
      "name": "postgres__check_schema_exists",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__check_schema_exists",
      "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.473826,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__make_relation_with_suffix": {
      "name": "postgres__make_relation_with_suffix",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix",
      "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4747488,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__make_intermediate_relation": {
      "name": "postgres__make_intermediate_relation",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation",
      "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__make_relation_with_suffix"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.475026,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__make_temp_relation": {
      "name": "postgres__make_temp_relation",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__make_temp_relation",
      "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__make_relation_with_suffix"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.47539,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__make_backup_relation": {
      "name": "postgres__make_backup_relation",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__make_backup_relation",
      "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__make_relation_with_suffix"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4756758,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres_escape_comment": {
      "name": "postgres_escape_comment",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres_escape_comment",
      "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.476115,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__alter_relation_comment": {
      "name": "postgres__alter_relation_comment",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment",
      "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres_escape_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4763489,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__alter_column_comment": {
      "name": "postgres__alter_column_comment",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__alter_column_comment",
      "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres_escape_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4769971,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__get_show_grant_sql": {
      "name": "postgres__get_show_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql",
      "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.477217,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__copy_grants": {
      "name": "postgres__copy_grants",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/adapters.sql",
      "original_file_path": "macros/adapters.sql",
      "unique_id": "macro.dbt_postgres.postgres__copy_grants",
      "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.477341,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__get_incremental_default_sql": {
      "name": "postgres__get_incremental_default_sql",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/materializations/incremental_strategies.sql",
      "original_file_path": "macros/materializations/incremental_strategies.sql",
      "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql",
      "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_incremental_delete_insert_sql",
          "macro.dbt.get_incremental_append_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4777741,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__snapshot_merge_sql": {
      "name": "postgres__snapshot_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/materializations/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshot_merge.sql",
      "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql",
      "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.478555,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__dateadd": {
      "name": "postgres__dateadd",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "unique_id": "macro.dbt_postgres.postgres__dateadd",
      "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.478797,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__listagg": {
      "name": "postgres__listagg",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "unique_id": "macro.dbt_postgres.postgres__listagg",
      "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.479456,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__datediff": {
      "name": "postgres__datediff",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "unique_id": "macro.dbt_postgres.postgres__datediff",
      "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4830232,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__any_value": {
      "name": "postgres__any_value",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "unique_id": "macro.dbt_postgres.postgres__any_value",
      "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.483231,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__last_day": {
      "name": "postgres__last_day",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "unique_id": "macro.dbt_postgres.postgres__last_day",
      "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt.date_trunc",
          "macro.dbt.default_last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.483867,
      "supported_languages": null
    },
    "macro.dbt_postgres.postgres__split_part": {
      "name": "postgres__split_part",
      "resource_type": "macro",
      "package_name": "dbt_postgres",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "unique_id": "macro.dbt_postgres.postgres__split_part",
      "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__split_part",
          "macro.dbt._split_part_negative"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4843562,
      "supported_languages": null
    },
    "macro.dbt.run_hooks": {
      "name": "run_hooks",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.run_hooks",
      "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.485685,
      "supported_languages": null
    },
    "macro.dbt.make_hook_config": {
      "name": "make_hook_config",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.make_hook_config",
      "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.485916,
      "supported_languages": null
    },
    "macro.dbt.before_begin": {
      "name": "before_begin",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.before_begin",
      "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4860811,
      "supported_languages": null
    },
    "macro.dbt.in_transaction": {
      "name": "in_transaction",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.in_transaction",
      "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4862368,
      "supported_languages": null
    },
    "macro.dbt.after_commit": {
      "name": "after_commit",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/hooks.sql",
      "original_file_path": "macros/materializations/hooks.sql",
      "unique_id": "macro.dbt.after_commit",
      "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_hook_config"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.486391,
      "supported_languages": null
    },
    "macro.dbt.set_sql_header": {
      "name": "set_sql_header",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "unique_id": "macro.dbt.set_sql_header",
      "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.486805,
      "supported_languages": null
    },
    "macro.dbt.should_full_refresh": {
      "name": "should_full_refresh",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "unique_id": "macro.dbt.should_full_refresh",
      "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.487136,
      "supported_languages": null
    },
    "macro.dbt.should_store_failures": {
      "name": "should_store_failures",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/configs.sql",
      "original_file_path": "macros/materializations/configs.sql",
      "unique_id": "macro.dbt.should_store_failures",
      "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.487463,
      "supported_languages": null
    },
    "macro.dbt.snapshot_merge_sql": {
      "name": "snapshot_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "unique_id": "macro.dbt.snapshot_merge_sql",
      "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__snapshot_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.487905,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_merge_sql": {
      "name": "default__snapshot_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/snapshot_merge.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql",
      "unique_id": "macro.dbt.default__snapshot_merge_sql",
      "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.488189,
      "supported_languages": null
    },
    "macro.dbt.strategy_dispatch": {
      "name": "strategy_dispatch",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.strategy_dispatch",
      "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4919071,
      "supported_languages": null
    },
    "macro.dbt.snapshot_hash_arguments": {
      "name": "snapshot_hash_arguments",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_hash_arguments",
      "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.492202,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_hash_arguments": {
      "name": "default__snapshot_hash_arguments",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.default__snapshot_hash_arguments",
      "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4924421,
      "supported_languages": null
    },
    "macro.dbt.snapshot_timestamp_strategy": {
      "name": "snapshot_timestamp_strategy",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_timestamp_strategy",
      "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.493216,
      "supported_languages": null
    },
    "macro.dbt.snapshot_string_as_time": {
      "name": "snapshot_string_as_time",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_string_as_time",
      "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__snapshot_string_as_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.493404,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_string_as_time": {
      "name": "default__snapshot_string_as_time",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.default__snapshot_string_as_time",
      "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.4935958,
      "supported_languages": null
    },
    "macro.dbt.snapshot_check_all_get_existing_columns": {
      "name": "snapshot_check_all_get_existing_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns",
      "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_columns_in_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.495084,
      "supported_languages": null
    },
    "macro.dbt.snapshot_check_strategy": {
      "name": "snapshot_check_strategy",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/strategies.sql",
      "original_file_path": "macros/materializations/snapshots/strategies.sql",
      "unique_id": "macro.dbt.snapshot_check_strategy",
      "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time",
          "macro.dbt.snapshot_check_all_get_existing_columns",
          "macro.dbt.get_true_sql",
          "macro.dbt.snapshot_hash_arguments"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.496673,
      "supported_languages": null
    },
    "macro.dbt.create_columns": {
      "name": "create_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.create_columns",
      "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.501044,
      "supported_languages": null
    },
    "macro.dbt.default__create_columns": {
      "name": "default__create_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__create_columns",
      "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.501355,
      "supported_languages": null
    },
    "macro.dbt.post_snapshot": {
      "name": "post_snapshot",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.post_snapshot",
      "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.501525,
      "supported_languages": null
    },
    "macro.dbt.default__post_snapshot": {
      "name": "default__post_snapshot",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__post_snapshot",
      "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5016189,
      "supported_languages": null
    },
    "macro.dbt.get_true_sql": {
      "name": "get_true_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.get_true_sql",
      "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_true_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.501866,
      "supported_languages": null
    },
    "macro.dbt.default__get_true_sql": {
      "name": "default__get_true_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__get_true_sql",
      "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5020192,
      "supported_languages": null
    },
    "macro.dbt.snapshot_staging_table": {
      "name": "snapshot_staging_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.snapshot_staging_table",
      "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__snapshot_staging_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.502248,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_staging_table": {
      "name": "default__snapshot_staging_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__snapshot_staging_table",
      "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.snapshot_get_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.503204,
      "supported_languages": null
    },
    "macro.dbt.build_snapshot_table": {
      "name": "build_snapshot_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.build_snapshot_table",
      "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__build_snapshot_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.503406,
      "supported_languages": null
    },
    "macro.dbt.default__build_snapshot_table": {
      "name": "default__build_snapshot_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.default__build_snapshot_table",
      "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.503673,
      "supported_languages": null
    },
    "macro.dbt.build_snapshot_staging_table": {
      "name": "build_snapshot_staging_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/helpers.sql",
      "original_file_path": "macros/materializations/snapshots/helpers.sql",
      "unique_id": "macro.dbt.build_snapshot_staging_table",
      "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.make_temp_relation",
          "macro.dbt.snapshot_staging_table",
          "macro.dbt.statement",
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.50415,
      "supported_languages": null
    },
    "macro.dbt.materialization_snapshot_default": {
      "name": "materialization_snapshot_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/snapshots/snapshot.sql",
      "original_file_path": "macros/materializations/snapshots/snapshot.sql",
      "unique_id": "macro.dbt.materialization_snapshot_default",
      "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_or_create_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.strategy_dispatch",
          "macro.dbt.build_snapshot_table",
          "macro.dbt.create_table_as",
          "macro.dbt.build_snapshot_staging_table",
          "macro.dbt.create_columns",
          "macro.dbt.snapshot_merge_sql",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes",
          "macro.dbt.post_snapshot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.510656,
      "supported_languages": [
        "sql"
      ]
    },
    "macro.dbt.materialization_test_default": {
      "name": "materialization_test_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/test.sql",
      "original_file_path": "macros/materializations/tests/test.sql",
      "unique_id": "macro.dbt.materialization_test_default",
      "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures",
          "macro.dbt.statement",
          "macro.dbt.create_table_as",
          "macro.dbt.get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.512864,
      "supported_languages": [
        "sql"
      ]
    },
    "macro.dbt.get_test_sql": {
      "name": "get_test_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "unique_id": "macro.dbt.get_test_sql",
      "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_test_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5133371,
      "supported_languages": null
    },
    "macro.dbt.default__get_test_sql": {
      "name": "default__get_test_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/helpers.sql",
      "original_file_path": "macros/materializations/tests/helpers.sql",
      "unique_id": "macro.dbt.default__get_test_sql",
      "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.513702,
      "supported_languages": null
    },
    "macro.dbt.get_where_subquery": {
      "name": "get_where_subquery",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "unique_id": "macro.dbt.get_where_subquery",
      "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_where_subquery"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5141041,
      "supported_languages": null
    },
    "macro.dbt.default__get_where_subquery": {
      "name": "default__get_where_subquery",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/tests/where_subquery.sql",
      "original_file_path": "macros/materializations/tests/where_subquery.sql",
      "unique_id": "macro.dbt.default__get_where_subquery",
      "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5144992,
      "supported_languages": null
    },
    "macro.dbt.get_quoted_csv": {
      "name": "get_quoted_csv",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.get_quoted_csv",
      "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.516248,
      "supported_languages": null
    },
    "macro.dbt.diff_columns": {
      "name": "diff_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.diff_columns",
      "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.516835,
      "supported_languages": null
    },
    "macro.dbt.diff_column_data_types": {
      "name": "diff_column_data_types",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.diff_column_data_types",
      "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.517521,
      "supported_languages": null
    },
    "macro.dbt.get_merge_update_columns": {
      "name": "get_merge_update_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.get_merge_update_columns",
      "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_merge_update_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5177789,
      "supported_languages": null
    },
    "macro.dbt.default__get_merge_update_columns": {
      "name": "default__get_merge_update_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/column_helpers.sql",
      "original_file_path": "macros/materializations/models/incremental/column_helpers.sql",
      "unique_id": "macro.dbt.default__get_merge_update_columns",
      "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.51852,
      "supported_languages": null
    },
    "macro.dbt.get_merge_sql": {
      "name": "get_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.get_merge_sql",
      "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.525347,
      "supported_languages": null
    },
    "macro.dbt.default__get_merge_sql": {
      "name": "default__get_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.default__get_merge_sql",
      "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv",
          "macro.dbt.get_merge_update_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.527207,
      "supported_languages": null
    },
    "macro.dbt.get_delete_insert_merge_sql": {
      "name": "get_delete_insert_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.get_delete_insert_merge_sql",
      "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5274932,
      "supported_languages": null
    },
    "macro.dbt.default__get_delete_insert_merge_sql": {
      "name": "default__get_delete_insert_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.default__get_delete_insert_merge_sql",
      "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.528567,
      "supported_languages": null
    },
    "macro.dbt.get_insert_overwrite_merge_sql": {
      "name": "get_insert_overwrite_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_insert_overwrite_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.528849,
      "supported_languages": null
    },
    "macro.dbt.default__get_insert_overwrite_merge_sql": {
      "name": "default__get_insert_overwrite_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/merge.sql",
      "original_file_path": "macros/materializations/models/incremental/merge.sql",
      "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql",
      "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5295281,
      "supported_languages": null
    },
    "macro.dbt.is_incremental": {
      "name": "is_incremental",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/is_incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/is_incremental.sql",
      "unique_id": "macro.dbt.is_incremental",
      "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.53021,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_append_sql": {
      "name": "get_incremental_append_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_append_sql",
      "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_incremental_append_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.531123,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_append_sql": {
      "name": "default__get_incremental_append_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_append_sql",
      "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_insert_into_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.53137,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_delete_insert_sql": {
      "name": "get_incremental_delete_insert_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_delete_insert_sql",
      "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_incremental_delete_insert_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.531568,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_delete_insert_sql": {
      "name": "default__get_incremental_delete_insert_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql",
      "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_delete_insert_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.531874,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_merge_sql": {
      "name": "get_incremental_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_merge_sql",
      "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_incremental_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.532074,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_merge_sql": {
      "name": "default__get_incremental_merge_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_merge_sql",
      "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.532379,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_insert_overwrite_sql": {
      "name": "get_incremental_insert_overwrite_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql",
      "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_incremental_insert_overwrite_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5325708,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_insert_overwrite_sql": {
      "name": "default__get_incremental_insert_overwrite_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql",
      "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_insert_overwrite_merge_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.532844,
      "supported_languages": null
    },
    "macro.dbt.get_incremental_default_sql": {
      "name": "get_incremental_default_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_incremental_default_sql",
      "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__get_incremental_default_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.533032,
      "supported_languages": null
    },
    "macro.dbt.default__get_incremental_default_sql": {
      "name": "default__get_incremental_default_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.default__get_incremental_default_sql",
      "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_incremental_append_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.533185,
      "supported_languages": null
    },
    "macro.dbt.get_insert_into_sql": {
      "name": "get_insert_into_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/strategies.sql",
      "original_file_path": "macros/materializations/models/incremental/strategies.sql",
      "unique_id": "macro.dbt.get_insert_into_sql",
      "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_quoted_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.533473,
      "supported_languages": null
    },
    "macro.dbt.materialization_incremental_default": {
      "name": "materialization_incremental_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/incremental.sql",
      "original_file_path": "macros/materializations/models/incremental/incremental.sql",
      "unique_id": "macro.dbt.materialization_incremental_default",
      "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_temp_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.should_full_refresh",
          "macro.dbt.incremental_validate_on_schema_change",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.run_query",
          "macro.dbt.process_schema_changes",
          "macro.dbt.statement",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5388522,
      "supported_languages": [
        "sql"
      ]
    },
    "macro.dbt.incremental_validate_on_schema_change": {
      "name": "incremental_validate_on_schema_change",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "unique_id": "macro.dbt.incremental_validate_on_schema_change",
      "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.548688,
      "supported_languages": null
    },
    "macro.dbt.check_for_schema_changes": {
      "name": "check_for_schema_changes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "unique_id": "macro.dbt.check_for_schema_changes",
      "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.diff_columns",
          "macro.dbt.diff_column_data_types"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.550255,
      "supported_languages": null
    },
    "macro.dbt.sync_column_schemas": {
      "name": "sync_column_schemas",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "unique_id": "macro.dbt.sync_column_schemas",
      "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.alter_relation_add_remove_columns",
          "macro.dbt.alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.559644,
      "supported_languages": null
    },
    "macro.dbt.process_schema_changes": {
      "name": "process_schema_changes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/incremental/on_schema_change.sql",
      "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql",
      "unique_id": "macro.dbt.process_schema_changes",
      "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.check_for_schema_changes",
          "macro.dbt.sync_column_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.560771,
      "supported_languages": null
    },
    "macro.dbt.materialization_table_default": {
      "name": "materialization_table_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/table/table.sql",
      "original_file_path": "macros/materializations/models/table/table.sql",
      "unique_id": "macro.dbt.materialization_table_default",
      "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.run_hooks",
          "macro.dbt.statement",
          "macro.dbt.get_create_table_as_sql",
          "macro.dbt.create_indexes",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.563745,
      "supported_languages": [
        "sql"
      ]
    },
    "macro.dbt.get_create_table_as_sql": {
      "name": "get_create_table_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "unique_id": "macro.dbt.get_create_table_as_sql",
      "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_create_table_as_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.564312,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_table_as_sql": {
      "name": "default__get_create_table_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "unique_id": "macro.dbt.default__get_create_table_as_sql",
      "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5645068,
      "supported_languages": null
    },
    "macro.dbt.create_table_as": {
      "name": "create_table_as",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "unique_id": "macro.dbt.create_table_as",
      "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__create_table_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.564975,
      "supported_languages": null
    },
    "macro.dbt.default__create_table_as": {
      "name": "default__create_table_as",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/table/create_table_as.sql",
      "original_file_path": "macros/materializations/models/table/create_table_as.sql",
      "unique_id": "macro.dbt.default__create_table_as",
      "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.565411,
      "supported_languages": null
    },
    "macro.dbt.materialization_view_default": {
      "name": "materialization_view_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view/view.sql",
      "original_file_path": "macros/materializations/models/view/view.sql",
      "unique_id": "macro.dbt.materialization_view_default",
      "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation",
          "macro.dbt.make_intermediate_relation",
          "macro.dbt.make_backup_relation",
          "macro.dbt.run_hooks",
          "macro.dbt.drop_relation_if_exists",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.568436,
      "supported_languages": [
        "sql"
      ]
    },
    "macro.dbt.handle_existing_table": {
      "name": "handle_existing_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view/helpers.sql",
      "original_file_path": "macros/materializations/models/view/helpers.sql",
      "unique_id": "macro.dbt.handle_existing_table",
      "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__handle_existing_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5688598,
      "supported_languages": null
    },
    "macro.dbt.default__handle_existing_table": {
      "name": "default__handle_existing_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view/helpers.sql",
      "original_file_path": "macros/materializations/models/view/helpers.sql",
      "unique_id": "macro.dbt.default__handle_existing_table",
      "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.569123,
      "supported_languages": null
    },
    "macro.dbt.create_or_replace_view": {
      "name": "create_or_replace_view",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view/create_or_replace_view.sql",
      "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql",
      "unique_id": "macro.dbt.create_or_replace_view",
      "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_hooks",
          "macro.dbt.handle_existing_table",
          "macro.dbt.should_full_refresh",
          "macro.dbt.statement",
          "macro.dbt.get_create_view_as_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.570806,
      "supported_languages": null
    },
    "macro.dbt.get_create_view_as_sql": {
      "name": "get_create_view_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "unique_id": "macro.dbt.get_create_view_as_sql",
      "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_create_view_as_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.571201,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_view_as_sql": {
      "name": "default__get_create_view_as_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "unique_id": "macro.dbt.default__get_create_view_as_sql",
      "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.create_view_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.571376,
      "supported_languages": null
    },
    "macro.dbt.create_view_as": {
      "name": "create_view_as",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "unique_id": "macro.dbt.create_view_as",
      "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_view_as"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.57157,
      "supported_languages": null
    },
    "macro.dbt.default__create_view_as": {
      "name": "default__create_view_as",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/models/view/create_view_as.sql",
      "original_file_path": "macros/materializations/models/view/create_view_as.sql",
      "unique_id": "macro.dbt.default__create_view_as",
      "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5718532,
      "supported_languages": null
    },
    "macro.dbt.materialization_seed_default": {
      "name": "materialization_seed_default",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/seed.sql",
      "original_file_path": "macros/materializations/seeds/seed.sql",
      "unique_id": "macro.dbt.materialization_seed_default",
      "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}",
      "depends_on": {
        "macros": [
          "macro.dbt.should_full_refresh",
          "macro.dbt.run_hooks",
          "macro.dbt.reset_csv_table",
          "macro.dbt.create_csv_table",
          "macro.dbt.load_csv_rows",
          "macro.dbt.noop_statement",
          "macro.dbt.get_csv_sql",
          "macro.dbt.should_revoke",
          "macro.dbt.apply_grants",
          "macro.dbt.persist_docs",
          "macro.dbt.create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.576103,
      "supported_languages": [
        "sql"
      ]
    },
    "macro.dbt.create_csv_table": {
      "name": "create_csv_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.create_csv_table",
      "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.582073,
      "supported_languages": null
    },
    "macro.dbt.default__create_csv_table": {
      "name": "default__create_csv_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__create_csv_table",
      "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.583174,
      "supported_languages": null
    },
    "macro.dbt.reset_csv_table": {
      "name": "reset_csv_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.reset_csv_table",
      "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__reset_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.583443,
      "supported_languages": null
    },
    "macro.dbt.default__reset_csv_table": {
      "name": "default__reset_csv_table",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__reset_csv_table",
      "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.create_csv_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.583972,
      "supported_languages": null
    },
    "macro.dbt.get_csv_sql": {
      "name": "get_csv_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.get_csv_sql",
      "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_csv_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.584182,
      "supported_languages": null
    },
    "macro.dbt.default__get_csv_sql": {
      "name": "default__get_csv_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__get_csv_sql",
      "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.584318,
      "supported_languages": null
    },
    "macro.dbt.get_binding_char": {
      "name": "get_binding_char",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.get_binding_char",
      "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5844631,
      "supported_languages": null
    },
    "macro.dbt.default__get_binding_char": {
      "name": "default__get_binding_char",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__get_binding_char",
      "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.584589,
      "supported_languages": null
    },
    "macro.dbt.get_batch_size": {
      "name": "get_batch_size",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.get_batch_size",
      "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_batch_size"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.584762,
      "supported_languages": null
    },
    "macro.dbt.default__get_batch_size": {
      "name": "default__get_batch_size",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__get_batch_size",
      "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5848808,
      "supported_languages": null
    },
    "macro.dbt.get_seed_column_quoted_csv": {
      "name": "get_seed_column_quoted_csv",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.get_seed_column_quoted_csv",
      "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.585383,
      "supported_languages": null
    },
    "macro.dbt.load_csv_rows": {
      "name": "load_csv_rows",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.load_csv_rows",
      "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__load_csv_rows"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.585589,
      "supported_languages": null
    },
    "macro.dbt.default__load_csv_rows": {
      "name": "default__load_csv_rows",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/materializations/seeds/helpers.sql",
      "original_file_path": "macros/materializations/seeds/helpers.sql",
      "unique_id": "macro.dbt.default__load_csv_rows",
      "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_batch_size",
          "macro.dbt.get_seed_column_quoted_csv",
          "macro.dbt.get_binding_char"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.587038,
      "supported_languages": null
    },
    "macro.dbt.generate_alias_name": {
      "name": "generate_alias_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "unique_id": "macro.dbt.generate_alias_name",
      "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__generate_alias_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.587568,
      "supported_languages": null
    },
    "macro.dbt.default__generate_alias_name": {
      "name": "default__generate_alias_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_alias.sql",
      "original_file_path": "macros/get_custom_name/get_custom_alias.sql",
      "unique_id": "macro.dbt.default__generate_alias_name",
      "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5879,
      "supported_languages": null
    },
    "macro.dbt.generate_schema_name": {
      "name": "generate_schema_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "unique_id": "macro.dbt.generate_schema_name",
      "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__generate_schema_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.588495,
      "supported_languages": null
    },
    "macro.dbt.default__generate_schema_name": {
      "name": "default__generate_schema_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "unique_id": "macro.dbt.default__generate_schema_name",
      "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.588772,
      "supported_languages": null
    },
    "macro.dbt.generate_schema_name_for_env": {
      "name": "generate_schema_name_for_env",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_schema.sql",
      "original_file_path": "macros/get_custom_name/get_custom_schema.sql",
      "unique_id": "macro.dbt.generate_schema_name_for_env",
      "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5890749,
      "supported_languages": null
    },
    "macro.dbt.generate_database_name": {
      "name": "generate_database_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "unique_id": "macro.dbt.generate_database_name",
      "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__generate_database_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.589504,
      "supported_languages": null
    },
    "macro.dbt.default__generate_database_name": {
      "name": "default__generate_database_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/get_custom_name/get_custom_database.sql",
      "original_file_path": "macros/get_custom_name/get_custom_database.sql",
      "unique_id": "macro.dbt.default__generate_database_name",
      "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.589778,
      "supported_languages": null
    },
    "macro.dbt.default__test_relationships": {
      "name": "default__test_relationships",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/generic_test_sql/relationships.sql",
      "original_file_path": "macros/generic_test_sql/relationships.sql",
      "unique_id": "macro.dbt.default__test_relationships",
      "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.590133,
      "supported_languages": null
    },
    "macro.dbt.default__test_not_null": {
      "name": "default__test_not_null",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/generic_test_sql/not_null.sql",
      "original_file_path": "macros/generic_test_sql/not_null.sql",
      "unique_id": "macro.dbt.default__test_not_null",
      "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5904498,
      "supported_languages": null
    },
    "macro.dbt.default__test_unique": {
      "name": "default__test_unique",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/generic_test_sql/unique.sql",
      "original_file_path": "macros/generic_test_sql/unique.sql",
      "unique_id": "macro.dbt.default__test_unique",
      "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.590715,
      "supported_languages": null
    },
    "macro.dbt.default__test_accepted_values": {
      "name": "default__test_accepted_values",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/generic_test_sql/accepted_values.sql",
      "original_file_path": "macros/generic_test_sql/accepted_values.sql",
      "unique_id": "macro.dbt.default__test_accepted_values",
      "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.591309,
      "supported_languages": null
    },
    "macro.dbt.statement": {
      "name": "statement",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "unique_id": "macro.dbt.statement",
      "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.592902,
      "supported_languages": null
    },
    "macro.dbt.noop_statement": {
      "name": "noop_statement",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "unique_id": "macro.dbt.noop_statement",
      "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.593515,
      "supported_languages": null
    },
    "macro.dbt.run_query": {
      "name": "run_query",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/statement.sql",
      "original_file_path": "macros/etc/statement.sql",
      "unique_id": "macro.dbt.run_query",
      "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5938182,
      "supported_languages": null
    },
    "macro.dbt.convert_datetime": {
      "name": "convert_datetime",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "unique_id": "macro.dbt.convert_datetime",
      "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5957592,
      "supported_languages": null
    },
    "macro.dbt.dates_in_range": {
      "name": "dates_in_range",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "unique_id": "macro.dbt.dates_in_range",
      "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.convert_datetime"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.597179,
      "supported_languages": null
    },
    "macro.dbt.partition_range": {
      "name": "partition_range",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "unique_id": "macro.dbt.partition_range",
      "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dates_in_range"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.598069,
      "supported_languages": null
    },
    "macro.dbt.py_current_timestring": {
      "name": "py_current_timestring",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/etc/datetime.sql",
      "original_file_path": "macros/etc/datetime.sql",
      "unique_id": "macro.dbt.py_current_timestring",
      "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.598337,
      "supported_languages": null
    },
    "macro.dbt.except": {
      "name": "except",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/except.sql",
      "original_file_path": "macros/utils/except.sql",
      "unique_id": "macro.dbt.except",
      "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5986078,
      "supported_languages": null
    },
    "macro.dbt.default__except": {
      "name": "default__except",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/except.sql",
      "original_file_path": "macros/utils/except.sql",
      "unique_id": "macro.dbt.default__except",
      "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.598686,
      "supported_languages": null
    },
    "macro.dbt.replace": {
      "name": "replace",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/replace.sql",
      "original_file_path": "macros/utils/replace.sql",
      "unique_id": "macro.dbt.replace",
      "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__replace"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.59912,
      "supported_languages": null
    },
    "macro.dbt.default__replace": {
      "name": "default__replace",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/replace.sql",
      "original_file_path": "macros/utils/replace.sql",
      "unique_id": "macro.dbt.default__replace",
      "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5992918,
      "supported_languages": null
    },
    "macro.dbt.concat": {
      "name": "concat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/concat.sql",
      "original_file_path": "macros/utils/concat.sql",
      "unique_id": "macro.dbt.concat",
      "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.5995488,
      "supported_languages": null
    },
    "macro.dbt.default__concat": {
      "name": "default__concat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/concat.sql",
      "original_file_path": "macros/utils/concat.sql",
      "unique_id": "macro.dbt.default__concat",
      "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.599684,
      "supported_languages": null
    },
    "macro.dbt.length": {
      "name": "length",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/length.sql",
      "original_file_path": "macros/utils/length.sql",
      "unique_id": "macro.dbt.length",
      "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__length"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.599945,
      "supported_languages": null
    },
    "macro.dbt.default__length": {
      "name": "default__length",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/length.sql",
      "original_file_path": "macros/utils/length.sql",
      "unique_id": "macro.dbt.default__length",
      "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.600055,
      "supported_languages": null
    },
    "macro.dbt.dateadd": {
      "name": "dateadd",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "unique_id": "macro.dbt.dateadd",
      "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.600416,
      "supported_languages": null
    },
    "macro.dbt.default__dateadd": {
      "name": "default__dateadd",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/dateadd.sql",
      "original_file_path": "macros/utils/dateadd.sql",
      "unique_id": "macro.dbt.default__dateadd",
      "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.600585,
      "supported_languages": null
    },
    "macro.dbt.intersect": {
      "name": "intersect",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/intersect.sql",
      "original_file_path": "macros/utils/intersect.sql",
      "unique_id": "macro.dbt.intersect",
      "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__intersect"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.600812,
      "supported_languages": null
    },
    "macro.dbt.default__intersect": {
      "name": "default__intersect",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/intersect.sql",
      "original_file_path": "macros/utils/intersect.sql",
      "unique_id": "macro.dbt.default__intersect",
      "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.600887,
      "supported_languages": null
    },
    "macro.dbt.escape_single_quotes": {
      "name": "escape_single_quotes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/escape_single_quotes.sql",
      "original_file_path": "macros/utils/escape_single_quotes.sql",
      "unique_id": "macro.dbt.escape_single_quotes",
      "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__escape_single_quotes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.601164,
      "supported_languages": null
    },
    "macro.dbt.default__escape_single_quotes": {
      "name": "default__escape_single_quotes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/escape_single_quotes.sql",
      "original_file_path": "macros/utils/escape_single_quotes.sql",
      "unique_id": "macro.dbt.default__escape_single_quotes",
      "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.601305,
      "supported_languages": null
    },
    "macro.dbt.right": {
      "name": "right",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "unique_id": "macro.dbt.right",
      "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__right"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6016152,
      "supported_languages": null
    },
    "macro.dbt.default__right": {
      "name": "default__right",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/right.sql",
      "original_file_path": "macros/utils/right.sql",
      "unique_id": "macro.dbt.default__right",
      "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6017659,
      "supported_languages": null
    },
    "macro.dbt.listagg": {
      "name": "listagg",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "unique_id": "macro.dbt.listagg",
      "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__listagg"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6024241,
      "supported_languages": null
    },
    "macro.dbt.default__listagg": {
      "name": "default__listagg",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/listagg.sql",
      "original_file_path": "macros/utils/listagg.sql",
      "unique_id": "macro.dbt.default__listagg",
      "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6029282,
      "supported_languages": null
    },
    "macro.dbt.datediff": {
      "name": "datediff",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "unique_id": "macro.dbt.datediff",
      "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6032739,
      "supported_languages": null
    },
    "macro.dbt.default__datediff": {
      "name": "default__datediff",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/datediff.sql",
      "original_file_path": "macros/utils/datediff.sql",
      "unique_id": "macro.dbt.default__datediff",
      "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.603439,
      "supported_languages": null
    },
    "macro.dbt.safe_cast": {
      "name": "safe_cast",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "unique_id": "macro.dbt.safe_cast",
      "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__safe_cast"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.603731,
      "supported_languages": null
    },
    "macro.dbt.default__safe_cast": {
      "name": "default__safe_cast",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/safe_cast.sql",
      "original_file_path": "macros/utils/safe_cast.sql",
      "unique_id": "macro.dbt.default__safe_cast",
      "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6038709,
      "supported_languages": null
    },
    "macro.dbt.hash": {
      "name": "hash",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "unique_id": "macro.dbt.hash",
      "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__hash"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.604136,
      "supported_languages": null
    },
    "macro.dbt.default__hash": {
      "name": "default__hash",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/hash.sql",
      "original_file_path": "macros/utils/hash.sql",
      "unique_id": "macro.dbt.default__hash",
      "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.604297,
      "supported_languages": null
    },
    "macro.dbt.cast_bool_to_text": {
      "name": "cast_bool_to_text",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/cast_bool_to_text.sql",
      "original_file_path": "macros/utils/cast_bool_to_text.sql",
      "unique_id": "macro.dbt.cast_bool_to_text",
      "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.604554,
      "supported_languages": null
    },
    "macro.dbt.default__cast_bool_to_text": {
      "name": "default__cast_bool_to_text",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/cast_bool_to_text.sql",
      "original_file_path": "macros/utils/cast_bool_to_text.sql",
      "unique_id": "macro.dbt.default__cast_bool_to_text",
      "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.604713,
      "supported_languages": null
    },
    "macro.dbt.any_value": {
      "name": "any_value",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "unique_id": "macro.dbt.any_value",
      "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__any_value"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.604963,
      "supported_languages": null
    },
    "macro.dbt.default__any_value": {
      "name": "default__any_value",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/any_value.sql",
      "original_file_path": "macros/utils/any_value.sql",
      "unique_id": "macro.dbt.default__any_value",
      "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6050692,
      "supported_languages": null
    },
    "macro.dbt.position": {
      "name": "position",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/position.sql",
      "original_file_path": "macros/utils/position.sql",
      "unique_id": "macro.dbt.position",
      "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__position"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.605361,
      "supported_languages": null
    },
    "macro.dbt.default__position": {
      "name": "default__position",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/position.sql",
      "original_file_path": "macros/utils/position.sql",
      "unique_id": "macro.dbt.default__position",
      "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.605495,
      "supported_languages": null
    },
    "macro.dbt.string_literal": {
      "name": "string_literal",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/literal.sql",
      "original_file_path": "macros/utils/literal.sql",
      "unique_id": "macro.dbt.string_literal",
      "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.default__string_literal"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.605739,
      "supported_languages": null
    },
    "macro.dbt.default__string_literal": {
      "name": "default__string_literal",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/literal.sql",
      "original_file_path": "macros/utils/literal.sql",
      "unique_id": "macro.dbt.default__string_literal",
      "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6058419,
      "supported_languages": null
    },
    "macro.dbt.type_string": {
      "name": "type_string",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_string",
      "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.default__type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6067781,
      "supported_languages": null
    },
    "macro.dbt.default__type_string": {
      "name": "default__type_string",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_string",
      "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.607053,
      "supported_languages": null
    },
    "macro.dbt.type_timestamp": {
      "name": "type_timestamp",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_timestamp",
      "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.default__type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6072671,
      "supported_languages": null
    },
    "macro.dbt.default__type_timestamp": {
      "name": "default__type_timestamp",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_timestamp",
      "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.607445,
      "supported_languages": null
    },
    "macro.dbt.type_float": {
      "name": "type_float",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_float",
      "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.default__type_float"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.607713,
      "supported_languages": null
    },
    "macro.dbt.default__type_float": {
      "name": "default__type_float",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_float",
      "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.607888,
      "supported_languages": null
    },
    "macro.dbt.type_numeric": {
      "name": "type_numeric",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_numeric",
      "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.default__type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.608064,
      "supported_languages": null
    },
    "macro.dbt.default__type_numeric": {
      "name": "default__type_numeric",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_numeric",
      "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.608265,
      "supported_languages": null
    },
    "macro.dbt.type_bigint": {
      "name": "type_bigint",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_bigint",
      "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.default__type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6084511,
      "supported_languages": null
    },
    "macro.dbt.default__type_bigint": {
      "name": "default__type_bigint",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_bigint",
      "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.608613,
      "supported_languages": null
    },
    "macro.dbt.type_int": {
      "name": "type_int",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_int",
      "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.default__type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.608788,
      "supported_languages": null
    },
    "macro.dbt.default__type_int": {
      "name": "default__type_int",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_int",
      "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.608943,
      "supported_languages": null
    },
    "macro.dbt.type_boolean": {
      "name": "type_boolean",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.type_boolean",
      "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.default__type_boolean"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.609112,
      "supported_languages": null
    },
    "macro.dbt.default__type_boolean": {
      "name": "default__type_boolean",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/data_types.sql",
      "original_file_path": "macros/utils/data_types.sql",
      "unique_id": "macro.dbt.default__type_boolean",
      "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.60927,
      "supported_languages": null
    },
    "macro.dbt.array_concat": {
      "name": "array_concat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "unique_id": "macro.dbt.array_concat",
      "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__array_concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.609594,
      "supported_languages": null
    },
    "macro.dbt.default__array_concat": {
      "name": "default__array_concat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_concat.sql",
      "original_file_path": "macros/utils/array_concat.sql",
      "unique_id": "macro.dbt.default__array_concat",
      "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.609733,
      "supported_languages": null
    },
    "macro.dbt.bool_or": {
      "name": "bool_or",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "unique_id": "macro.dbt.bool_or",
      "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__bool_or"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.609986,
      "supported_languages": null
    },
    "macro.dbt.default__bool_or": {
      "name": "default__bool_or",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/bool_or.sql",
      "original_file_path": "macros/utils/bool_or.sql",
      "unique_id": "macro.dbt.default__bool_or",
      "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.610093,
      "supported_languages": null
    },
    "macro.dbt.last_day": {
      "name": "last_day",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "unique_id": "macro.dbt.last_day",
      "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.610453,
      "supported_languages": null
    },
    "macro.dbt.default_last_day": {
      "name": "default_last_day",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "unique_id": "macro.dbt.default_last_day",
      "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.610738,
      "supported_languages": null
    },
    "macro.dbt.default__last_day": {
      "name": "default__last_day",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/last_day.sql",
      "original_file_path": "macros/utils/last_day.sql",
      "unique_id": "macro.dbt.default__last_day",
      "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default_last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.610894,
      "supported_languages": null
    },
    "macro.dbt.split_part": {
      "name": "split_part",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "unique_id": "macro.dbt.split_part",
      "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__split_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.611454,
      "supported_languages": null
    },
    "macro.dbt.default__split_part": {
      "name": "default__split_part",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "unique_id": "macro.dbt.default__split_part",
      "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.611625,
      "supported_languages": null
    },
    "macro.dbt._split_part_negative": {
      "name": "_split_part_negative",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/split_part.sql",
      "original_file_path": "macros/utils/split_part.sql",
      "unique_id": "macro.dbt._split_part_negative",
      "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.611862,
      "supported_languages": null
    },
    "macro.dbt.date_trunc": {
      "name": "date_trunc",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "unique_id": "macro.dbt.date_trunc",
      "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.612156,
      "supported_languages": null
    },
    "macro.dbt.default__date_trunc": {
      "name": "default__date_trunc",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/date_trunc.sql",
      "original_file_path": "macros/utils/date_trunc.sql",
      "unique_id": "macro.dbt.default__date_trunc",
      "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.612302,
      "supported_languages": null
    },
    "macro.dbt.array_construct": {
      "name": "array_construct",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "unique_id": "macro.dbt.array_construct",
      "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__array_construct"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.61278,
      "supported_languages": null
    },
    "macro.dbt.default__array_construct": {
      "name": "default__array_construct",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_construct.sql",
      "original_file_path": "macros/utils/array_construct.sql",
      "unique_id": "macro.dbt.default__array_construct",
      "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6130419,
      "supported_languages": null
    },
    "macro.dbt.array_append": {
      "name": "array_append",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "unique_id": "macro.dbt.array_append",
      "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__array_append"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.61334,
      "supported_languages": null
    },
    "macro.dbt.default__array_append": {
      "name": "default__array_append",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/utils/array_append.sql",
      "original_file_path": "macros/utils/array_append.sql",
      "unique_id": "macro.dbt.default__array_append",
      "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.613478,
      "supported_languages": null
    },
    "macro.dbt.create_schema": {
      "name": "create_schema",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "unique_id": "macro.dbt.create_schema",
      "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__create_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.613864,
      "supported_languages": null
    },
    "macro.dbt.default__create_schema": {
      "name": "default__create_schema",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "unique_id": "macro.dbt.default__create_schema",
      "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6140642,
      "supported_languages": null
    },
    "macro.dbt.drop_schema": {
      "name": "drop_schema",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "unique_id": "macro.dbt.drop_schema",
      "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__drop_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.614231,
      "supported_languages": null
    },
    "macro.dbt.default__drop_schema": {
      "name": "default__drop_schema",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/schema.sql",
      "original_file_path": "macros/adapters/schema.sql",
      "unique_id": "macro.dbt.default__drop_schema",
      "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.614416,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp": {
      "name": "current_timestamp",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.current_timestamp",
      "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.614901,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp": {
      "name": "default__current_timestamp",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.default__current_timestamp",
      "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.615055,
      "supported_languages": null
    },
    "macro.dbt.snapshot_get_time": {
      "name": "snapshot_get_time",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.snapshot_get_time",
      "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__snapshot_get_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.615201,
      "supported_languages": null
    },
    "macro.dbt.default__snapshot_get_time": {
      "name": "default__snapshot_get_time",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.default__snapshot_get_time",
      "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.615309,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp_backcompat": {
      "name": "current_timestamp_backcompat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.current_timestamp_backcompat",
      "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__current_timestamp_backcompat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.615485,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp_backcompat": {
      "name": "default__current_timestamp_backcompat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.default__current_timestamp_backcompat",
      "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.61556,
      "supported_languages": null
    },
    "macro.dbt.current_timestamp_in_utc_backcompat": {
      "name": "current_timestamp_in_utc_backcompat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6157298,
      "supported_languages": null
    },
    "macro.dbt.default__current_timestamp_in_utc_backcompat": {
      "name": "default__current_timestamp_in_utc_backcompat",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/timestamps.sql",
      "original_file_path": "macros/adapters/timestamps.sql",
      "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat",
      "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.current_timestamp_backcompat",
          "macro.dbt_postgres.postgres__current_timestamp_backcompat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6158998,
      "supported_languages": null
    },
    "macro.dbt.get_create_index_sql": {
      "name": "get_create_index_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.get_create_index_sql",
      "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__get_create_index_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6163661,
      "supported_languages": null
    },
    "macro.dbt.default__get_create_index_sql": {
      "name": "default__get_create_index_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.default__get_create_index_sql",
      "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.616506,
      "supported_languages": null
    },
    "macro.dbt.create_indexes": {
      "name": "create_indexes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.create_indexes",
      "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__create_indexes"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.616668,
      "supported_languages": null
    },
    "macro.dbt.default__create_indexes": {
      "name": "default__create_indexes",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/indexes.sql",
      "original_file_path": "macros/adapters/indexes.sql",
      "unique_id": "macro.dbt.default__create_indexes",
      "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.get_create_index_sql",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6170921,
      "supported_languages": null
    },
    "macro.dbt.make_intermediate_relation": {
      "name": "make_intermediate_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.make_intermediate_relation",
      "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__make_intermediate_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.620476,
      "supported_languages": null
    },
    "macro.dbt.default__make_intermediate_relation": {
      "name": "default__make_intermediate_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__make_intermediate_relation",
      "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__make_temp_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.620717,
      "supported_languages": null
    },
    "macro.dbt.make_temp_relation": {
      "name": "make_temp_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.make_temp_relation",
      "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__make_temp_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.620943,
      "supported_languages": null
    },
    "macro.dbt.default__make_temp_relation": {
      "name": "default__make_temp_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__make_temp_relation",
      "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.621247,
      "supported_languages": null
    },
    "macro.dbt.make_backup_relation": {
      "name": "make_backup_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.make_backup_relation",
      "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__make_backup_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6214988,
      "supported_languages": null
    },
    "macro.dbt.default__make_backup_relation": {
      "name": "default__make_backup_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__make_backup_relation",
      "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6218271,
      "supported_languages": null
    },
    "macro.dbt.drop_relation": {
      "name": "drop_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.drop_relation",
      "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__drop_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.622015,
      "supported_languages": null
    },
    "macro.dbt.default__drop_relation": {
      "name": "default__drop_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__drop_relation",
      "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.622229,
      "supported_languages": null
    },
    "macro.dbt.truncate_relation": {
      "name": "truncate_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.truncate_relation",
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__truncate_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6224158,
      "supported_languages": null
    },
    "macro.dbt.default__truncate_relation": {
      "name": "default__truncate_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__truncate_relation",
      "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.622574,
      "supported_languages": null
    },
    "macro.dbt.rename_relation": {
      "name": "rename_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.rename_relation",
      "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__rename_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.622776,
      "supported_languages": null
    },
    "macro.dbt.default__rename_relation": {
      "name": "default__rename_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__rename_relation",
      "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.623067,
      "supported_languages": null
    },
    "macro.dbt.get_or_create_relation": {
      "name": "get_or_create_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.get_or_create_relation",
      "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_or_create_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.623324,
      "supported_languages": null
    },
    "macro.dbt.default__get_or_create_relation": {
      "name": "default__get_or_create_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.default__get_or_create_relation",
      "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.623915,
      "supported_languages": null
    },
    "macro.dbt.load_cached_relation": {
      "name": "load_cached_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.load_cached_relation",
      "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.624154,
      "supported_languages": null
    },
    "macro.dbt.load_relation": {
      "name": "load_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.load_relation",
      "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.load_cached_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6243,
      "supported_languages": null
    },
    "macro.dbt.drop_relation_if_exists": {
      "name": "drop_relation_if_exists",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/relation.sql",
      "original_file_path": "macros/adapters/relation.sql",
      "unique_id": "macro.dbt.drop_relation_if_exists",
      "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.624504,
      "supported_languages": null
    },
    "macro.dbt.collect_freshness": {
      "name": "collect_freshness",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "unique_id": "macro.dbt.collect_freshness",
      "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__collect_freshness"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.624933,
      "supported_languages": null
    },
    "macro.dbt.default__collect_freshness": {
      "name": "default__collect_freshness",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/freshness.sql",
      "original_file_path": "macros/adapters/freshness.sql",
      "unique_id": "macro.dbt.default__collect_freshness",
      "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.625359,
      "supported_languages": null
    },
    "macro.dbt.copy_grants": {
      "name": "copy_grants",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.copy_grants",
      "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__copy_grants"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.62711,
      "supported_languages": null
    },
    "macro.dbt.default__copy_grants": {
      "name": "default__copy_grants",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__copy_grants",
      "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.627226,
      "supported_languages": null
    },
    "macro.dbt.support_multiple_grantees_per_dcl_statement": {
      "name": "support_multiple_grantees_per_dcl_statement",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement",
      "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__support_multiple_grantees_per_dcl_statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6274,
      "supported_languages": null
    },
    "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {
      "name": "default__support_multiple_grantees_per_dcl_statement",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement",
      "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.627608,
      "supported_languages": null
    },
    "macro.dbt.should_revoke": {
      "name": "should_revoke",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.should_revoke",
      "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.copy_grants"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.628014,
      "supported_languages": null
    },
    "macro.dbt.get_show_grant_sql": {
      "name": "get_show_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.get_show_grant_sql",
      "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__get_show_grant_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.628219,
      "supported_languages": null
    },
    "macro.dbt.default__get_show_grant_sql": {
      "name": "default__get_show_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__get_show_grant_sql",
      "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.628331,
      "supported_languages": null
    },
    "macro.dbt.get_grant_sql": {
      "name": "get_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.get_grant_sql",
      "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_grant_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.628572,
      "supported_languages": null
    },
    "macro.dbt.default__get_grant_sql": {
      "name": "default__get_grant_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__get_grant_sql",
      "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6287649,
      "supported_languages": null
    },
    "macro.dbt.get_revoke_sql": {
      "name": "get_revoke_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.get_revoke_sql",
      "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_revoke_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.629002,
      "supported_languages": null
    },
    "macro.dbt.default__get_revoke_sql": {
      "name": "default__get_revoke_sql",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__get_revoke_sql",
      "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.629195,
      "supported_languages": null
    },
    "macro.dbt.get_dcl_statement_list": {
      "name": "get_dcl_statement_list",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.get_dcl_statement_list",
      "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_dcl_statement_list"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.629438,
      "supported_languages": null
    },
    "macro.dbt.default__get_dcl_statement_list": {
      "name": "default__get_dcl_statement_list",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__get_dcl_statement_list",
      "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.support_multiple_grantees_per_dcl_statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6301482,
      "supported_languages": null
    },
    "macro.dbt.call_dcl_statements": {
      "name": "call_dcl_statements",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.call_dcl_statements",
      "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__call_dcl_statements"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.63035,
      "supported_languages": null
    },
    "macro.dbt.default__call_dcl_statements": {
      "name": "default__call_dcl_statements",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__call_dcl_statements",
      "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.630599,
      "supported_languages": null
    },
    "macro.dbt.apply_grants": {
      "name": "apply_grants",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.apply_grants",
      "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__apply_grants"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.630835,
      "supported_languages": null
    },
    "macro.dbt.default__apply_grants": {
      "name": "default__apply_grants",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/apply_grants.sql",
      "original_file_path": "macros/adapters/apply_grants.sql",
      "unique_id": "macro.dbt.default__apply_grants",
      "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.get_show_grant_sql",
          "macro.dbt.get_dcl_statement_list",
          "macro.dbt.call_dcl_statements"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6320481,
      "supported_languages": null
    },
    "macro.dbt.alter_column_comment": {
      "name": "alter_column_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.alter_column_comment",
      "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.632761,
      "supported_languages": null
    },
    "macro.dbt.default__alter_column_comment": {
      "name": "default__alter_column_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.default__alter_column_comment",
      "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.632937,
      "supported_languages": null
    },
    "macro.dbt.alter_relation_comment": {
      "name": "alter_relation_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.alter_relation_comment",
      "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__alter_relation_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.633146,
      "supported_languages": null
    },
    "macro.dbt.default__alter_relation_comment": {
      "name": "default__alter_relation_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.default__alter_relation_comment",
      "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6333199,
      "supported_languages": null
    },
    "macro.dbt.persist_docs": {
      "name": "persist_docs",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.persist_docs",
      "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__persist_docs"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6335979,
      "supported_languages": null
    },
    "macro.dbt.default__persist_docs": {
      "name": "default__persist_docs",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/persist_docs.sql",
      "original_file_path": "macros/adapters/persist_docs.sql",
      "unique_id": "macro.dbt.default__persist_docs",
      "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.alter_relation_comment",
          "macro.dbt.alter_column_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.634335,
      "supported_languages": null
    },
    "macro.dbt.get_catalog": {
      "name": "get_catalog",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.get_catalog",
      "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__get_catalog"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.635863,
      "supported_languages": null
    },
    "macro.dbt.default__get_catalog": {
      "name": "default__get_catalog",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__get_catalog",
      "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.636127,
      "supported_languages": null
    },
    "macro.dbt.information_schema_name": {
      "name": "information_schema_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.information_schema_name",
      "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__information_schema_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.63632,
      "supported_languages": null
    },
    "macro.dbt.default__information_schema_name": {
      "name": "default__information_schema_name",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__information_schema_name",
      "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6364748,
      "supported_languages": null
    },
    "macro.dbt.list_schemas": {
      "name": "list_schemas",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.list_schemas",
      "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__list_schemas"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6366599,
      "supported_languages": null
    },
    "macro.dbt.default__list_schemas": {
      "name": "default__list_schemas",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__list_schemas",
      "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.information_schema_name",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.636905,
      "supported_languages": null
    },
    "macro.dbt.check_schema_exists": {
      "name": "check_schema_exists",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.check_schema_exists",
      "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__check_schema_exists"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.637109,
      "supported_languages": null
    },
    "macro.dbt.default__check_schema_exists": {
      "name": "default__check_schema_exists",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__check_schema_exists",
      "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.replace",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6374211,
      "supported_languages": null
    },
    "macro.dbt.list_relations_without_caching": {
      "name": "list_relations_without_caching",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.list_relations_without_caching",
      "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__list_relations_without_caching"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.637609,
      "supported_languages": null
    },
    "macro.dbt.default__list_relations_without_caching": {
      "name": "default__list_relations_without_caching",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/metadata.sql",
      "original_file_path": "macros/adapters/metadata.sql",
      "unique_id": "macro.dbt.default__list_relations_without_caching",
      "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.637774,
      "supported_languages": null
    },
    "macro.dbt.get_columns_in_relation": {
      "name": "get_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.get_columns_in_relation",
      "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_postgres.postgres__get_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.639553,
      "supported_languages": null
    },
    "macro.dbt.default__get_columns_in_relation": {
      "name": "default__get_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__get_columns_in_relation",
      "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.639719,
      "supported_languages": null
    },
    "macro.dbt.sql_convert_columns_in_relation": {
      "name": "sql_convert_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.sql_convert_columns_in_relation",
      "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6400409,
      "supported_languages": null
    },
    "macro.dbt.get_columns_in_query": {
      "name": "get_columns_in_query",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.get_columns_in_query",
      "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__get_columns_in_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6402318,
      "supported_languages": null
    },
    "macro.dbt.default__get_columns_in_query": {
      "name": "default__get_columns_in_query",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__get_columns_in_query",
      "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.640598,
      "supported_languages": null
    },
    "macro.dbt.alter_column_type": {
      "name": "alter_column_type",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.alter_column_type",
      "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__alter_column_type"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6408918,
      "supported_languages": null
    },
    "macro.dbt.default__alter_column_type": {
      "name": "default__alter_column_type",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__alter_column_type",
      "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6416042,
      "supported_languages": null
    },
    "macro.dbt.alter_relation_add_remove_columns": {
      "name": "alter_relation_add_remove_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.alter_relation_add_remove_columns",
      "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__alter_relation_add_remove_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.64188,
      "supported_languages": null
    },
    "macro.dbt.default__alter_relation_add_remove_columns": {
      "name": "default__alter_relation_add_remove_columns",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/adapters/columns.sql",
      "original_file_path": "macros/adapters/columns.sql",
      "unique_id": "macro.dbt.default__alter_relation_add_remove_columns",
      "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6427,
      "supported_languages": null
    },
    "macro.dbt.build_ref_function": {
      "name": "build_ref_function",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.build_ref_function",
      "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.644237,
      "supported_languages": null
    },
    "macro.dbt.build_source_function": {
      "name": "build_source_function",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.build_source_function",
      "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.644727,
      "supported_languages": null
    },
    "macro.dbt.build_config_dict": {
      "name": "build_config_dict",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.build_config_dict",
      "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6453261,
      "supported_languages": null
    },
    "macro.dbt.py_script_postfix": {
      "name": "py_script_postfix",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.py_script_postfix",
      "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.build_ref_function",
          "macro.dbt.build_source_function",
          "macro.dbt.build_config_dict",
          "macro.dbt.is_incremental",
          "macro.dbt.py_script_comment"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.645751,
      "supported_languages": null
    },
    "macro.dbt.py_script_comment": {
      "name": "py_script_comment",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "macros/python_model/python.sql",
      "original_file_path": "macros/python_model/python.sql",
      "unique_id": "macro.dbt.py_script_comment",
      "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.645825,
      "supported_languages": null
    },
    "macro.dbt.test_unique": {
      "name": "test_unique",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "unique_id": "macro.dbt.test_unique",
      "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_unique"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.646359,
      "supported_languages": null
    },
    "macro.dbt.test_not_null": {
      "name": "test_not_null",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "unique_id": "macro.dbt.test_not_null",
      "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.646601,
      "supported_languages": null
    },
    "macro.dbt.test_accepted_values": {
      "name": "test_accepted_values",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "unique_id": "macro.dbt.test_accepted_values",
      "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_accepted_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.646898,
      "supported_languages": null
    },
    "macro.dbt.test_relationships": {
      "name": "test_relationships",
      "resource_type": "macro",
      "package_name": "dbt",
      "path": "tests/generic/builtin.sql",
      "original_file_path": "tests/generic/builtin.sql",
      "unique_id": "macro.dbt.test_relationships",
      "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt.default__test_relationships"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.647181,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_host": {
      "name": "get_url_host",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "unique_id": "macro.dbt_utils.get_url_host",
      "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_host"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.647542,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_host": {
      "name": "default__get_url_host",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_host.sql",
      "original_file_path": "macros/web/get_url_host.sql",
      "unique_id": "macro.dbt_utils.default__get_url_host",
      "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.split_part",
          "macro.dbt.replace",
          "macro.dbt.safe_cast",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6480331,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_path": {
      "name": "get_url_path",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "unique_id": "macro.dbt_utils.get_url_path",
      "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_path"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6485271,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_path": {
      "name": "default__get_url_path",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_path.sql",
      "original_file_path": "macros/web/get_url_path.sql",
      "unique_id": "macro.dbt_utils.default__get_url_path",
      "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.replace",
          "macro.dbt.position",
          "macro.dbt.split_part",
          "macro.dbt.right",
          "macro.dbt.length",
          "macro.dbt.safe_cast",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.649212,
      "supported_languages": null
    },
    "macro.dbt_utils.get_url_parameter": {
      "name": "get_url_parameter",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "unique_id": "macro.dbt_utils.get_url_parameter",
      "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_url_parameter"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.649535,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_url_parameter": {
      "name": "default__get_url_parameter",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/web/get_url_parameter.sql",
      "original_file_path": "macros/web/get_url_parameter.sql",
      "unique_id": "macro.dbt_utils.default__get_url_parameter",
      "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.split_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6498659,
      "supported_languages": null
    },
    "macro.dbt_utils.test_fewer_rows_than": {
      "name": "test_fewer_rows_than",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/fewer_rows_than.sql",
      "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
      "unique_id": "macro.dbt_utils.test_fewer_rows_than",
      "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_fewer_rows_than"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.650955,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_fewer_rows_than": {
      "name": "default__test_fewer_rows_than",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/fewer_rows_than.sql",
      "original_file_path": "macros/generic_tests/fewer_rows_than.sql",
      "unique_id": "macro.dbt_utils.default__test_fewer_rows_than",
      "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.652092,
      "supported_languages": null
    },
    "macro.dbt_utils.test_equal_rowcount": {
      "name": "test_equal_rowcount",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/equal_rowcount.sql",
      "original_file_path": "macros/generic_tests/equal_rowcount.sql",
      "unique_id": "macro.dbt_utils.test_equal_rowcount",
      "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_equal_rowcount"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.652971,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_equal_rowcount": {
      "name": "default__test_equal_rowcount",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/equal_rowcount.sql",
      "original_file_path": "macros/generic_tests/equal_rowcount.sql",
      "unique_id": "macro.dbt_utils.default__test_equal_rowcount",
      "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.654117,
      "supported_languages": null
    },
    "macro.dbt_utils.test_relationships_where": {
      "name": "test_relationships_where",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/relationships_where.sql",
      "original_file_path": "macros/generic_tests/relationships_where.sql",
      "unique_id": "macro.dbt_utils.test_relationships_where",
      "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_relationships_where"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6547751,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_relationships_where": {
      "name": "default__test_relationships_where",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/relationships_where.sql",
      "original_file_path": "macros/generic_tests/relationships_where.sql",
      "unique_id": "macro.dbt_utils.default__test_relationships_where",
      "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6551292,
      "supported_languages": null
    },
    "macro.dbt_utils.test_recency": {
      "name": "test_recency",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/recency.sql",
      "original_file_path": "macros/generic_tests/recency.sql",
      "unique_id": "macro.dbt_utils.test_recency",
      "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_recency"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6559622,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_recency": {
      "name": "default__test_recency",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/recency.sql",
      "original_file_path": "macros/generic_tests/recency.sql",
      "unique_id": "macro.dbt_utils.default__test_recency",
      "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt.current_timestamp",
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.656848,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_constant": {
      "name": "test_not_constant",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_constant.sql",
      "original_file_path": "macros/generic_tests/not_constant.sql",
      "unique_id": "macro.dbt_utils.test_not_constant",
      "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_constant"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6573179,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_constant": {
      "name": "default__test_not_constant",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_constant.sql",
      "original_file_path": "macros/generic_tests/not_constant.sql",
      "unique_id": "macro.dbt_utils.default__test_not_constant",
      "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.657799,
      "supported_languages": null
    },
    "macro.dbt_utils.test_accepted_range": {
      "name": "test_accepted_range",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/accepted_range.sql",
      "original_file_path": "macros/generic_tests/accepted_range.sql",
      "unique_id": "macro.dbt_utils.test_accepted_range",
      "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_accepted_range"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6584241,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_accepted_range": {
      "name": "default__test_accepted_range",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/accepted_range.sql",
      "original_file_path": "macros/generic_tests/accepted_range.sql",
      "unique_id": "macro.dbt_utils.default__test_accepted_range",
      "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.658922,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_accepted_values": {
      "name": "test_not_accepted_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_accepted_values.sql",
      "original_file_path": "macros/generic_tests/not_accepted_values.sql",
      "unique_id": "macro.dbt_utils.test_not_accepted_values",
      "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_accepted_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.659492,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_accepted_values": {
      "name": "default__test_not_accepted_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_accepted_values.sql",
      "original_file_path": "macros/generic_tests/not_accepted_values.sql",
      "unique_id": "macro.dbt_utils.default__test_not_accepted_values",
      "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.659889,
      "supported_languages": null
    },
    "macro.dbt_utils.test_at_least_one": {
      "name": "test_at_least_one",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/at_least_one.sql",
      "original_file_path": "macros/generic_tests/at_least_one.sql",
      "unique_id": "macro.dbt_utils.test_at_least_one",
      "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_at_least_one"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6605608,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_at_least_one": {
      "name": "default__test_at_least_one",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/at_least_one.sql",
      "original_file_path": "macros/generic_tests/at_least_one.sql",
      "unique_id": "macro.dbt_utils.default__test_at_least_one",
      "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6614048,
      "supported_languages": null
    },
    "macro.dbt_utils.test_unique_combination_of_columns": {
      "name": "test_unique_combination_of_columns",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
      "unique_id": "macro.dbt_utils.test_unique_combination_of_columns",
      "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_unique_combination_of_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.662045,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_unique_combination_of_columns": {
      "name": "default__test_unique_combination_of_columns",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/unique_combination_of_columns.sql",
      "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql",
      "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns",
      "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.662721,
      "supported_languages": null
    },
    "macro.dbt_utils.test_cardinality_equality": {
      "name": "test_cardinality_equality",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/cardinality_equality.sql",
      "original_file_path": "macros/generic_tests/cardinality_equality.sql",
      "unique_id": "macro.dbt_utils.test_cardinality_equality",
      "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_cardinality_equality"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.66327,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_cardinality_equality": {
      "name": "default__test_cardinality_equality",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/cardinality_equality.sql",
      "original_file_path": "macros/generic_tests/cardinality_equality.sql",
      "unique_id": "macro.dbt_utils.default__test_cardinality_equality",
      "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.663625,
      "supported_languages": null
    },
    "macro.dbt_utils.test_expression_is_true": {
      "name": "test_expression_is_true",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/expression_is_true.sql",
      "original_file_path": "macros/generic_tests/expression_is_true.sql",
      "unique_id": "macro.dbt_utils.test_expression_is_true",
      "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_expression_is_true"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6640372,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_expression_is_true": {
      "name": "default__test_expression_is_true",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/expression_is_true.sql",
      "original_file_path": "macros/generic_tests/expression_is_true.sql",
      "unique_id": "macro.dbt_utils.default__test_expression_is_true",
      "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.should_store_failures"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.664483,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_null_proportion": {
      "name": "test_not_null_proportion",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_null_proportion.sql",
      "original_file_path": "macros/generic_tests/not_null_proportion.sql",
      "unique_id": "macro.dbt_utils.test_not_null_proportion",
      "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_null_proportion"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6651368,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_null_proportion": {
      "name": "default__test_not_null_proportion",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_null_proportion.sql",
      "original_file_path": "macros/generic_tests/not_null_proportion.sql",
      "unique_id": "macro.dbt_utils.default__test_not_null_proportion",
      "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.666014,
      "supported_languages": null
    },
    "macro.dbt_utils.test_sequential_values": {
      "name": "test_sequential_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/sequential_values.sql",
      "original_file_path": "macros/generic_tests/sequential_values.sql",
      "unique_id": "macro.dbt_utils.test_sequential_values",
      "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_sequential_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6669362,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_sequential_values": {
      "name": "default__test_sequential_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/sequential_values.sql",
      "original_file_path": "macros/generic_tests/sequential_values.sql",
      "unique_id": "macro.dbt_utils.default__test_sequential_values",
      "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.slugify",
          "macro.dbt.type_timestamp",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.667884,
      "supported_languages": null
    },
    "macro.dbt_utils.test_equality": {
      "name": "test_equality",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/equality.sql",
      "original_file_path": "macros/generic_tests/equality.sql",
      "unique_id": "macro.dbt_utils.test_equality",
      "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_equality"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.668632,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_equality": {
      "name": "default__test_equality",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/equality.sql",
      "original_file_path": "macros/generic_tests/equality.sql",
      "unique_id": "macro.dbt_utils.default__test_equality",
      "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.except"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6695528,
      "supported_languages": null
    },
    "macro.dbt_utils.test_not_empty_string": {
      "name": "test_not_empty_string",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_empty_string.sql",
      "original_file_path": "macros/generic_tests/not_empty_string.sql",
      "unique_id": "macro.dbt_utils.test_not_empty_string",
      "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_not_empty_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6700811,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_not_empty_string": {
      "name": "default__test_not_empty_string",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/not_empty_string.sql",
      "original_file_path": "macros/generic_tests/not_empty_string.sql",
      "unique_id": "macro.dbt_utils.default__test_not_empty_string",
      "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6703858,
      "supported_languages": null
    },
    "macro.dbt_utils.test_mutually_exclusive_ranges": {
      "name": "test_mutually_exclusive_ranges",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges",
      "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__test_mutually_exclusive_ranges"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.673886,
      "supported_languages": null
    },
    "macro.dbt_utils.default__test_mutually_exclusive_ranges": {
      "name": "default__test_mutually_exclusive_ranges",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql",
      "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges",
      "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.675542,
      "supported_languages": null
    },
    "macro.dbt_utils.pretty_log_format": {
      "name": "pretty_log_format",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "unique_id": "macro.dbt_utils.pretty_log_format",
      "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pretty_log_format"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.675828,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pretty_log_format": {
      "name": "default__pretty_log_format",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/pretty_log_format.sql",
      "original_file_path": "macros/jinja_helpers/pretty_log_format.sql",
      "unique_id": "macro.dbt_utils.default__pretty_log_format",
      "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.pretty_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.676,
      "supported_languages": null
    },
    "macro.dbt_utils._is_relation": {
      "name": "_is_relation",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/_is_relation.sql",
      "original_file_path": "macros/jinja_helpers/_is_relation.sql",
      "unique_id": "macro.dbt_utils._is_relation",
      "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.676455,
      "supported_languages": null
    },
    "macro.dbt_utils.pretty_time": {
      "name": "pretty_time",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "unique_id": "macro.dbt_utils.pretty_time",
      "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pretty_time"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.676736,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pretty_time": {
      "name": "default__pretty_time",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/pretty_time.sql",
      "original_file_path": "macros/jinja_helpers/pretty_time.sql",
      "unique_id": "macro.dbt_utils.default__pretty_time",
      "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.676936,
      "supported_languages": null
    },
    "macro.dbt_utils.log_info": {
      "name": "log_info",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "unique_id": "macro.dbt_utils.log_info",
      "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__log_info"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.677192,
      "supported_languages": null
    },
    "macro.dbt_utils.default__log_info": {
      "name": "default__log_info",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/log_info.sql",
      "original_file_path": "macros/jinja_helpers/log_info.sql",
      "unique_id": "macro.dbt_utils.default__log_info",
      "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.pretty_log_format"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.677367,
      "supported_languages": null
    },
    "macro.dbt_utils.slugify": {
      "name": "slugify",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/slugify.sql",
      "original_file_path": "macros/jinja_helpers/slugify.sql",
      "unique_id": "macro.dbt_utils.slugify",
      "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6780028,
      "supported_languages": null
    },
    "macro.dbt_utils._is_ephemeral": {
      "name": "_is_ephemeral",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/jinja_helpers/_is_ephemeral.sql",
      "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql",
      "unique_id": "macro.dbt_utils._is_ephemeral",
      "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.678911,
      "supported_languages": null
    },
    "macro.dbt_utils.get_intervals_between": {
      "name": "get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "unique_id": "macro.dbt_utils.get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_intervals_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.679639,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_intervals_between": {
      "name": "default__get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "unique_id": "macro.dbt_utils.default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.680258,
      "supported_languages": null
    },
    "macro.dbt_utils.date_spine": {
      "name": "date_spine",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "unique_id": "macro.dbt_utils.date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__date_spine"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6804962,
      "supported_languages": null
    },
    "macro.dbt_utils.default__date_spine": {
      "name": "default__date_spine",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/date_spine.sql",
      "original_file_path": "macros/sql/date_spine.sql",
      "unique_id": "macro.dbt_utils.default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.generate_series",
          "macro.dbt_utils.get_intervals_between",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.680872,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_subtract": {
      "name": "safe_subtract",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_subtract.sql",
      "original_file_path": "macros/sql/safe_subtract.sql",
      "unique_id": "macro.dbt_utils.safe_subtract",
      "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__safe_subtract"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6812658,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_subtract": {
      "name": "default__safe_subtract",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_subtract.sql",
      "original_file_path": "macros/sql/safe_subtract.sql",
      "unique_id": "macro.dbt_utils.default__safe_subtract",
      "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.681837,
      "supported_languages": null
    },
    "macro.dbt_utils.nullcheck_table": {
      "name": "nullcheck_table",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "unique_id": "macro.dbt_utils.nullcheck_table",
      "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__nullcheck_table"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.682167,
      "supported_languages": null
    },
    "macro.dbt_utils.default__nullcheck_table": {
      "name": "default__nullcheck_table",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/nullcheck_table.sql",
      "original_file_path": "macros/sql/nullcheck_table.sql",
      "unique_id": "macro.dbt_utils.default__nullcheck_table",
      "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.682527,
      "supported_languages": null
    },
    "macro.dbt_utils.get_relations_by_pattern": {
      "name": "get_relations_by_pattern",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "unique_id": "macro.dbt_utils.get_relations_by_pattern",
      "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_relations_by_pattern"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.683233,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_relations_by_pattern": {
      "name": "default__get_relations_by_pattern",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_relations_by_pattern.sql",
      "original_file_path": "macros/sql/get_relations_by_pattern.sql",
      "unique_id": "macro.dbt_utils.default__get_relations_by_pattern",
      "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6841888,
      "supported_languages": null
    },
    "macro.dbt_utils.get_powers_of_two": {
      "name": "get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "unique_id": "macro.dbt_utils.get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_powers_of_two"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6850529,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_powers_of_two": {
      "name": "default__get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "unique_id": "macro.dbt_utils.default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.685486,
      "supported_languages": null
    },
    "macro.dbt_utils.generate_series": {
      "name": "generate_series",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "unique_id": "macro.dbt_utils.generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__generate_series"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6856818,
      "supported_languages": null
    },
    "macro.dbt_utils.default__generate_series": {
      "name": "default__generate_series",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_series.sql",
      "original_file_path": "macros/sql/generate_series.sql",
      "unique_id": "macro.dbt_utils.default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_powers_of_two"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.686215,
      "supported_languages": null
    },
    "macro.dbt_utils.get_relations_by_prefix": {
      "name": "get_relations_by_prefix",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "unique_id": "macro.dbt_utils.get_relations_by_prefix",
      "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_relations_by_prefix"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.686931,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_relations_by_prefix": {
      "name": "default__get_relations_by_prefix",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_relations_by_prefix.sql",
      "original_file_path": "macros/sql/get_relations_by_prefix.sql",
      "unique_id": "macro.dbt_utils.default__get_relations_by_prefix",
      "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt_utils.get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.687808,
      "supported_languages": null
    },
    "macro.dbt_utils.get_tables_by_prefix_sql": {
      "name": "get_tables_by_prefix_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql",
      "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_tables_by_prefix_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6882198,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_tables_by_prefix_sql": {
      "name": "default__get_tables_by_prefix_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_prefix_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql",
      "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql",
      "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.688513,
      "supported_languages": null
    },
    "macro.dbt_utils.star": {
      "name": "star",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "unique_id": "macro.dbt_utils.star",
      "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__star"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6898491,
      "supported_languages": null
    },
    "macro.dbt_utils.default__star": {
      "name": "default__star",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/star.sql",
      "original_file_path": "macros/sql/star.sql",
      "unique_id": "macro.dbt_utils.default__star",
      "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt_utils.get_filtered_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.691349,
      "supported_languages": null
    },
    "macro.dbt_utils.unpivot": {
      "name": "unpivot",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "unique_id": "macro.dbt_utils.unpivot",
      "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__unpivot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.692758,
      "supported_languages": null
    },
    "macro.dbt_utils.default__unpivot": {
      "name": "default__unpivot",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/unpivot.sql",
      "original_file_path": "macros/sql/unpivot.sql",
      "unique_id": "macro.dbt_utils.default__unpivot",
      "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.type_string",
          "macro.dbt.cast_bool_to_text"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.6945028,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_divide": {
      "name": "safe_divide",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_divide.sql",
      "original_file_path": "macros/sql/safe_divide.sql",
      "unique_id": "macro.dbt_utils.safe_divide",
      "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__safe_divide"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.694807,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_divide": {
      "name": "default__safe_divide",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_divide.sql",
      "original_file_path": "macros/sql/safe_divide.sql",
      "unique_id": "macro.dbt_utils.default__safe_divide",
      "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.694942,
      "supported_languages": null
    },
    "macro.dbt_utils.union_relations": {
      "name": "union_relations",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "unique_id": "macro.dbt_utils.union_relations",
      "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__union_relations"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.698335,
      "supported_languages": null
    },
    "macro.dbt_utils.default__union_relations": {
      "name": "default__union_relations",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/union.sql",
      "original_file_path": "macros/sql/union.sql",
      "unique_id": "macro.dbt_utils.default__union_relations",
      "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.string_literal",
          "macro.dbt.type_string"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7019362,
      "supported_languages": null
    },
    "macro.dbt_utils.group_by": {
      "name": "group_by",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "unique_id": "macro.dbt_utils.group_by",
      "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__group_by"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.702247,
      "supported_languages": null
    },
    "macro.dbt_utils.default__group_by": {
      "name": "default__group_by",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/groupby.sql",
      "original_file_path": "macros/sql/groupby.sql",
      "unique_id": "macro.dbt_utils.default__group_by",
      "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.702538,
      "supported_languages": null
    },
    "macro.dbt_utils.deduplicate": {
      "name": "deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.deduplicate",
      "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.postgres__deduplicate"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7032902,
      "supported_languages": null
    },
    "macro.dbt_utils.default__deduplicate": {
      "name": "default__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.default__deduplicate",
      "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.703509,
      "supported_languages": null
    },
    "macro.dbt_utils.redshift__deduplicate": {
      "name": "redshift__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.redshift__deduplicate",
      "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__deduplicate"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7037172,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__deduplicate": {
      "name": "postgres__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.postgres__deduplicate",
      "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7039099,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__deduplicate": {
      "name": "snowflake__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.snowflake__deduplicate",
      "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.704083,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__deduplicate": {
      "name": "bigquery__deduplicate",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/deduplicate.sql",
      "original_file_path": "macros/sql/deduplicate.sql",
      "unique_id": "macro.dbt_utils.bigquery__deduplicate",
      "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.704257,
      "supported_languages": null
    },
    "macro.dbt_utils.surrogate_key": {
      "name": "surrogate_key",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "unique_id": "macro.dbt_utils.surrogate_key",
      "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__surrogate_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7046468,
      "supported_languages": null
    },
    "macro.dbt_utils.default__surrogate_key": {
      "name": "default__surrogate_key",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/surrogate_key.sql",
      "original_file_path": "macros/sql/surrogate_key.sql",
      "unique_id": "macro.dbt_utils.default__surrogate_key",
      "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.704886,
      "supported_languages": null
    },
    "macro.dbt_utils.safe_add": {
      "name": "safe_add",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "unique_id": "macro.dbt_utils.safe_add",
      "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__safe_add"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.705274,
      "supported_languages": null
    },
    "macro.dbt_utils.default__safe_add": {
      "name": "default__safe_add",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/safe_add.sql",
      "original_file_path": "macros/sql/safe_add.sql",
      "unique_id": "macro.dbt_utils.default__safe_add",
      "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7058392,
      "supported_languages": null
    },
    "macro.dbt_utils.nullcheck": {
      "name": "nullcheck",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "unique_id": "macro.dbt_utils.nullcheck",
      "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__nullcheck"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.706186,
      "supported_languages": null
    },
    "macro.dbt_utils.default__nullcheck": {
      "name": "default__nullcheck",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/nullcheck.sql",
      "original_file_path": "macros/sql/nullcheck.sql",
      "unique_id": "macro.dbt_utils.default__nullcheck",
      "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.70653,
      "supported_languages": null
    },
    "macro.dbt_utils.get_tables_by_pattern_sql": {
      "name": "get_tables_by_pattern_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql",
      "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_tables_by_pattern_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7083101,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_tables_by_pattern_sql": {
      "name": "default__get_tables_by_pattern_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql",
      "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_table_types_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.708689,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {
      "name": "bigquery__get_tables_by_pattern_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql",
      "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._bigquery__get_matching_schemata",
          "macro.dbt_utils.get_table_types_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7094998,
      "supported_languages": null
    },
    "macro.dbt_utils._bigquery__get_matching_schemata": {
      "name": "_bigquery__get_matching_schemata",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_tables_by_pattern_sql.sql",
      "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql",
      "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata",
      "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.710022,
      "supported_languages": null
    },
    "macro.dbt_utils.get_column_values": {
      "name": "get_column_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "unique_id": "macro.dbt_utils.get_column_values",
      "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_column_values"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7112,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_column_values": {
      "name": "default__get_column_values",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_column_values.sql",
      "original_file_path": "macros/sql/get_column_values.sql",
      "unique_id": "macro.dbt_utils.default__get_column_values",
      "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_ephemeral",
          "macro.dbt.load_relation",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.712781,
      "supported_languages": null
    },
    "macro.dbt_utils.pivot": {
      "name": "pivot",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "unique_id": "macro.dbt_utils.pivot",
      "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__pivot"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.713875,
      "supported_languages": null
    },
    "macro.dbt_utils.default__pivot": {
      "name": "default__pivot",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/pivot.sql",
      "original_file_path": "macros/sql/pivot.sql",
      "unique_id": "macro.dbt_utils.default__pivot",
      "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.escape_single_quotes",
          "macro.dbt_utils.slugify"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7147489,
      "supported_languages": null
    },
    "macro.dbt_utils.get_filtered_columns_in_relation": {
      "name": "get_filtered_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_filtered_columns_in_relation.sql",
      "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
      "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation",
      "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_filtered_columns_in_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7152278,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_filtered_columns_in_relation": {
      "name": "default__get_filtered_columns_in_relation",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_filtered_columns_in_relation.sql",
      "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql",
      "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation",
      "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils._is_relation",
          "macro.dbt_utils._is_ephemeral"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7159832,
      "supported_languages": null
    },
    "macro.dbt_utils.width_bucket": {
      "name": "width_bucket",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "unique_id": "macro.dbt_utils.width_bucket",
      "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__width_bucket"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7167811,
      "supported_languages": null
    },
    "macro.dbt_utils.default__width_bucket": {
      "name": "default__width_bucket",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "unique_id": "macro.dbt_utils.default__width_bucket",
      "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.safe_cast",
          "macro.dbt.type_numeric"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7172601,
      "supported_languages": null
    },
    "macro.dbt_utils.snowflake__width_bucket": {
      "name": "snowflake__width_bucket",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/width_bucket.sql",
      "original_file_path": "macros/sql/width_bucket.sql",
      "unique_id": "macro.dbt_utils.snowflake__width_bucket",
      "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.717452,
      "supported_languages": null
    },
    "macro.dbt_utils.get_query_results_as_dict": {
      "name": "get_query_results_as_dict",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "unique_id": "macro.dbt_utils.get_query_results_as_dict",
      "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_query_results_as_dict"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7178502,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_query_results_as_dict": {
      "name": "default__get_query_results_as_dict",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_query_results_as_dict.sql",
      "original_file_path": "macros/sql/get_query_results_as_dict.sql",
      "unique_id": "macro.dbt_utils.default__get_query_results_as_dict",
      "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.718463,
      "supported_languages": null
    },
    "macro.dbt_utils.generate_surrogate_key": {
      "name": "generate_surrogate_key",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_surrogate_key.sql",
      "original_file_path": "macros/sql/generate_surrogate_key.sql",
      "unique_id": "macro.dbt_utils.generate_surrogate_key",
      "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__generate_surrogate_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.718938,
      "supported_languages": null
    },
    "macro.dbt_utils.default__generate_surrogate_key": {
      "name": "default__generate_surrogate_key",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/generate_surrogate_key.sql",
      "original_file_path": "macros/sql/generate_surrogate_key.sql",
      "unique_id": "macro.dbt_utils.default__generate_surrogate_key",
      "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.type_string",
          "macro.dbt.hash",
          "macro.dbt.concat"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.71959,
      "supported_languages": null
    },
    "macro.dbt_utils.get_table_types_sql": {
      "name": "get_table_types_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "unique_id": "macro.dbt_utils.get_table_types_sql",
      "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.postgres__get_table_types_sql"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7201312,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_table_types_sql": {
      "name": "default__get_table_types_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "unique_id": "macro.dbt_utils.default__get_table_types_sql",
      "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.720271,
      "supported_languages": null
    },
    "macro.dbt_utils.postgres__get_table_types_sql": {
      "name": "postgres__get_table_types_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "unique_id": "macro.dbt_utils.postgres__get_table_types_sql",
      "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.720413,
      "supported_languages": null
    },
    "macro.dbt_utils.databricks__get_table_types_sql": {
      "name": "databricks__get_table_types_sql",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_table_types_sql.sql",
      "original_file_path": "macros/sql/get_table_types_sql.sql",
      "unique_id": "macro.dbt_utils.databricks__get_table_types_sql",
      "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7205582,
      "supported_languages": null
    },
    "macro.dbt_utils.get_single_value": {
      "name": "get_single_value",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_single_value.sql",
      "original_file_path": "macros/sql/get_single_value.sql",
      "unique_id": "macro.dbt_utils.get_single_value",
      "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__get_single_value"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.721121,
      "supported_languages": null
    },
    "macro.dbt_utils.default__get_single_value": {
      "name": "default__get_single_value",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/get_single_value.sql",
      "original_file_path": "macros/sql/get_single_value.sql",
      "unique_id": "macro.dbt_utils.default__get_single_value",
      "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.721948,
      "supported_languages": null
    },
    "macro.dbt_utils.degrees_to_radians": {
      "name": "degrees_to_radians",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "unique_id": "macro.dbt_utils.degrees_to_radians",
      "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7230668,
      "supported_languages": null
    },
    "macro.dbt_utils.haversine_distance": {
      "name": "haversine_distance",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "unique_id": "macro.dbt_utils.haversine_distance",
      "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.default__haversine_distance"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7233548,
      "supported_languages": null
    },
    "macro.dbt_utils.default__haversine_distance": {
      "name": "default__haversine_distance",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "unique_id": "macro.dbt_utils.default__haversine_distance",
      "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.723944,
      "supported_languages": null
    },
    "macro.dbt_utils.bigquery__haversine_distance": {
      "name": "bigquery__haversine_distance",
      "resource_type": "macro",
      "package_name": "dbt_utils",
      "path": "macros/sql/haversine_distance.sql",
      "original_file_path": "macros/sql/haversine_distance.sql",
      "unique_id": "macro.dbt_utils.bigquery__haversine_distance",
      "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.degrees_to_radians"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.72477,
      "supported_languages": null
    },
    "macro.codegen.generate_model_import_ctes": {
      "name": "generate_model_import_ctes",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_model_import_ctes.sql",
      "original_file_path": "macros/generate_model_import_ctes.sql",
      "unique_id": "macro.codegen.generate_model_import_ctes",
      "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = false) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':'(?i)(from|join)\\s+({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_source':'(?i)(from|join)\\s+({{\\s*source\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_1':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_var_2':'(?i)(from|join)\\s+({{\\s*var\\s*\\(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(,)(\\s*[\\'\\\"]?)([^)\\'\\\"]+)([\\'\\\"]?\\s*)(\\)\\s*}})',\n        'from_table_1':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_2':'(?i)(from|join)\\s+([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(\\.)([\\[`\\\"\\']?)(\\w+)([\\]`\\\"\\']?)(?=\\s|$)',\n        'from_table_3':'(?i)(from|join)\\s+([\\[`\\\"\\'])([\\w ]+)([\\]`\\\"\\'])(?=\\s|$)',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ log(model_import_ctes, info=True) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.737636,
      "supported_languages": null
    },
    "macro.codegen.generate_column_yaml": {
      "name": "generate_column_yaml",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_model_yaml.sql",
      "original_file_path": "macros/generate_model_yaml.sql",
      "unique_id": "macro.codegen.generate_column_yaml",
      "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, parent_column_name=\"\") %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.generate_column_yaml"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.739983,
      "supported_languages": null
    },
    "macro.codegen.generate_model_yaml": {
      "name": "generate_model_yaml",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_model_yaml.sql",
      "original_file_path": "macros/generate_model_yaml.sql",
      "unique_id": "macro.codegen.generate_model_yaml",
      "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.build_dict_column_descriptions",
          "macro.codegen.generate_column_yaml"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7413518,
      "supported_languages": null
    },
    "macro.codegen.generate_base_model": {
      "name": "generate_base_model",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_base_model.sql",
      "original_file_path": "macros/generate_base_model.sql",
      "unique_id": "macro.codegen.generate_base_model",
      "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.743696,
      "supported_languages": null
    },
    "macro.codegen.get_tables_in_schema": {
      "name": "get_tables_in_schema",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_source.sql",
      "original_file_path": "macros/generate_source.sql",
      "unique_id": "macro.codegen.get_tables_in_schema",
      "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_utils.get_relations_by_pattern"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.745916,
      "supported_languages": null
    },
    "macro.codegen.generate_source": {
      "name": "generate_source",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/generate_source.sql",
      "original_file_path": "macros/generate_source.sql",
      "unique_id": "macro.codegen.generate_source",
      "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='', name=schema_name, table_names=None) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.get_tables_in_schema"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.748384,
      "supported_languages": null
    },
    "macro.codegen.get_model_dependencies": {
      "name": "get_model_dependencies",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.get_model_dependencies",
      "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.749002,
      "supported_languages": null
    },
    "macro.codegen.add_model_column_descriptions_to_dict": {
      "name": "add_model_column_descriptions_to_dict",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.add_model_column_descriptions_to_dict",
      "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.749513,
      "supported_languages": null
    },
    "macro.codegen.build_dict_column_descriptions": {
      "name": "build_dict_column_descriptions",
      "resource_type": "macro",
      "package_name": "codegen",
      "path": "macros/helpers/helpers.sql",
      "original_file_path": "macros/helpers/helpers.sql",
      "unique_id": "macro.codegen.build_dict_column_descriptions",
      "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.codegen.get_model_dependencies",
          "macro.codegen.add_model_column_descriptions_to_dict"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.749971,
      "supported_languages": null
    },
    "macro.dbt_date.get_date_dimension": {
      "name": "get_date_dimension",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "unique_id": "macro.dbt_date.get_date_dimension",
      "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.postgres__get_date_dimension"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.758653,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_date_dimension": {
      "name": "default__get_date_dimension",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "unique_id": "macro.dbt_date.default__get_date_dimension",
      "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_base_dates",
          "macro.dbt.dateadd",
          "macro.dbt_date.yesterday",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.day_of_week",
          "macro.dbt_date.day_name",
          "macro.dbt_date.day_of_month",
          "macro.dbt_date.day_of_year",
          "macro.dbt_date.week_start",
          "macro.dbt_date.week_end",
          "macro.dbt_date.week_of_year",
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.iso_week_end",
          "macro.dbt_date.iso_week_of_year",
          "macro.dbt_date.date_part",
          "macro.dbt.type_int",
          "macro.dbt_date.month_name",
          "macro.dbt.date_trunc",
          "macro.dbt.last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.761088,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__get_date_dimension": {
      "name": "postgres__get_date_dimension",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_date_dimension.sql",
      "original_file_path": "macros/get_date_dimension.sql",
      "unique_id": "macro.dbt_date.postgres__get_date_dimension",
      "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_base_dates",
          "macro.dbt.dateadd",
          "macro.dbt_date.yesterday",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.day_of_week",
          "macro.dbt_date.day_name",
          "macro.dbt_date.day_of_month",
          "macro.dbt_date.day_of_year",
          "macro.dbt_date.week_start",
          "macro.dbt_date.week_end",
          "macro.dbt_date.week_of_year",
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.iso_week_end",
          "macro.dbt_date.iso_week_of_year",
          "macro.dbt_date.date_part",
          "macro.dbt.type_int",
          "macro.dbt_date.month_name",
          "macro.dbt.date_trunc",
          "macro.dbt.last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.763726,
      "supported_languages": null
    },
    "macro.dbt_date.get_base_dates": {
      "name": "get_base_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "unique_id": "macro.dbt_date.get_base_dates",
      "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__get_base_dates"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.764885,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_base_dates": {
      "name": "default__get_base_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "unique_id": "macro.dbt_date.default__get_base_dates",
      "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.type_timestamp",
          "macro.dbt.dateadd",
          "macro.dbt_date.today",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.date_spine"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.765755,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__get_base_dates": {
      "name": "bigquery__get_base_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/get_base_dates.sql",
      "original_file_path": "macros/get_base_dates.sql",
      "unique_id": "macro.dbt_date.bigquery__get_base_dates",
      "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt_date.today",
          "macro.dbt_date.tomorrow",
          "macro.dbt_date.date_spine",
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.766506,
      "supported_languages": null
    },
    "macro.dbt_date.get_intervals_between": {
      "name": "get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/date_spine.sql",
      "original_file_path": "macros/_utils/date_spine.sql",
      "unique_id": "macro.dbt_date.get_intervals_between",
      "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__get_intervals_between"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.767248,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_intervals_between": {
      "name": "default__get_intervals_between",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/date_spine.sql",
      "original_file_path": "macros/_utils/date_spine.sql",
      "unique_id": "macro.dbt_date.default__get_intervals_between",
      "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement",
          "macro.dbt.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7678561,
      "supported_languages": null
    },
    "macro.dbt_date.date_spine": {
      "name": "date_spine",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/date_spine.sql",
      "original_file_path": "macros/_utils/date_spine.sql",
      "unique_id": "macro.dbt_date.date_spine",
      "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__date_spine"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.768091,
      "supported_languages": null
    },
    "macro.dbt_date.default__date_spine": {
      "name": "default__date_spine",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/date_spine.sql",
      "original_file_path": "macros/_utils/date_spine.sql",
      "unique_id": "macro.dbt_date.default__date_spine",
      "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.generate_series",
          "macro.dbt_date.get_intervals_between",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.768472,
      "supported_languages": null
    },
    "macro.dbt_date.get_powers_of_two": {
      "name": "get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/generate_series.sql",
      "original_file_path": "macros/_utils/generate_series.sql",
      "unique_id": "macro.dbt_date.get_powers_of_two",
      "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__get_powers_of_two"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.769332,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_powers_of_two": {
      "name": "default__get_powers_of_two",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/generate_series.sql",
      "original_file_path": "macros/_utils/generate_series.sql",
      "unique_id": "macro.dbt_date.default__get_powers_of_two",
      "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.769762,
      "supported_languages": null
    },
    "macro.dbt_date.generate_series": {
      "name": "generate_series",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/generate_series.sql",
      "original_file_path": "macros/_utils/generate_series.sql",
      "unique_id": "macro.dbt_date.generate_series",
      "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__generate_series"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7699552,
      "supported_languages": null
    },
    "macro.dbt_date.default__generate_series": {
      "name": "default__generate_series",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/_utils/generate_series.sql",
      "original_file_path": "macros/_utils/generate_series.sql",
      "unique_id": "macro.dbt_date.default__generate_series",
      "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_powers_of_two"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.770495,
      "supported_languages": null
    },
    "macro.dbt_date.get_fiscal_year_dates": {
      "name": "get_fiscal_year_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "unique_id": "macro.dbt_date.get_fiscal_year_dates",
      "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__get_fiscal_year_dates"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.772178,
      "supported_languages": null
    },
    "macro.dbt_date.default__get_fiscal_year_dates": {
      "name": "default__get_fiscal_year_dates",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql",
      "unique_id": "macro.dbt_date.default__get_fiscal_year_dates",
      "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt.datediff"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7727869,
      "supported_languages": null
    },
    "macro.dbt_date.get_fiscal_periods": {
      "name": "get_fiscal_periods",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/fiscal_date/get_fiscal_periods.sql",
      "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql",
      "unique_id": "macro.dbt_date.get_fiscal_periods",
      "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.get_fiscal_year_dates",
          "macro.dbt.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.773702,
      "supported_languages": null
    },
    "macro.dbt_date.tomorrow": {
      "name": "tomorrow",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/tomorrow.sql",
      "original_file_path": "macros/calendar_date/tomorrow.sql",
      "unique_id": "macro.dbt_date.tomorrow",
      "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7739289,
      "supported_languages": null
    },
    "macro.dbt_date.next_week": {
      "name": "next_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/next_week.sql",
      "original_file_path": "macros/calendar_date/next_week.sql",
      "unique_id": "macro.dbt_date.next_week",
      "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_weeks_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7741172,
      "supported_languages": null
    },
    "macro.dbt_date.next_month_name": {
      "name": "next_month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/next_month_name.sql",
      "original_file_path": "macros/calendar_date/next_month_name.sql",
      "unique_id": "macro.dbt_date.next_month_name",
      "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.month_name",
          "macro.dbt_date.next_month"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.774366,
      "supported_languages": null
    },
    "macro.dbt_date.next_month": {
      "name": "next_month",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/next_month.sql",
      "original_file_path": "macros/calendar_date/next_month.sql",
      "unique_id": "macro.dbt_date.next_month",
      "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_months_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.774554,
      "supported_languages": null
    },
    "macro.dbt_date.day_name": {
      "name": "day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.day_name",
      "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.postgres__day_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.775359,
      "supported_languages": null
    },
    "macro.dbt_date.default__day_name": {
      "name": "default__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.default__day_name",
      "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.775672,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__day_name": {
      "name": "snowflake__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.snowflake__day_name",
      "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.775886,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__day_name": {
      "name": "bigquery__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.bigquery__day_name",
      "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7760901,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__day_name": {
      "name": "postgres__day_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_name.sql",
      "original_file_path": "macros/calendar_date/day_name.sql",
      "unique_id": "macro.dbt_date.postgres__day_name",
      "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.776302,
      "supported_languages": null
    },
    "macro.dbt_date.to_unixtimestamp": {
      "name": "to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.to_unixtimestamp",
      "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__to_unixtimestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.776631,
      "supported_languages": null
    },
    "macro.dbt_date.default__to_unixtimestamp": {
      "name": "default__to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.default__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7767801,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__to_unixtimestamp": {
      "name": "snowflake__to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.776928,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__to_unixtimestamp": {
      "name": "bigquery__to_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/to_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/to_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp",
      "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7770371,
      "supported_languages": null
    },
    "macro.dbt_date.n_days_away": {
      "name": "n_days_away",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_days_away.sql",
      "original_file_path": "macros/calendar_date/n_days_away.sql",
      "unique_id": "macro.dbt_date.n_days_away",
      "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_days_ago"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7772968,
      "supported_languages": null
    },
    "macro.dbt_date.week_start": {
      "name": "week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.week_start",
      "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.postgres__week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.777772,
      "supported_languages": null
    },
    "macro.dbt_date.default__week_start": {
      "name": "default__week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.default__week_start",
      "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.777924,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__week_start": {
      "name": "snowflake__week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.snowflake__week_start",
      "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.day_of_week",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.77824,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__week_start": {
      "name": "postgres__week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_start.sql",
      "original_file_path": "macros/calendar_date/week_start.sql",
      "unique_id": "macro.dbt_date.postgres__week_start",
      "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.dateadd",
          "macro.dbt.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.778523,
      "supported_languages": null
    },
    "macro.dbt_date.iso_week_start": {
      "name": "iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.iso_week_start",
      "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.postgres__iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7790358,
      "supported_languages": null
    },
    "macro.dbt_date._iso_week_start": {
      "name": "_iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date._iso_week_start",
      "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.779194,
      "supported_languages": null
    },
    "macro.dbt_date.default__iso_week_start": {
      "name": "default__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.default__iso_week_start",
      "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.779335,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__iso_week_start": {
      "name": "snowflake__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.snowflake__iso_week_start",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.77948,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__iso_week_start": {
      "name": "postgres__iso_week_start",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_start.sql",
      "original_file_path": "macros/calendar_date/iso_week_start.sql",
      "unique_id": "macro.dbt_date.postgres__iso_week_start",
      "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_start"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.779616,
      "supported_languages": null
    },
    "macro.dbt_date.n_days_ago": {
      "name": "n_days_ago",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_days_ago.sql",
      "original_file_path": "macros/calendar_date/n_days_ago.sql",
      "unique_id": "macro.dbt_date.n_days_ago",
      "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.780045,
      "supported_languages": null
    },
    "macro.dbt_date.last_week": {
      "name": "last_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/last_week.sql",
      "original_file_path": "macros/calendar_date/last_week.sql",
      "unique_id": "macro.dbt_date.last_week",
      "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_weeks_ago"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7802298,
      "supported_languages": null
    },
    "macro.dbt_date.now": {
      "name": "now",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/now.sql",
      "original_file_path": "macros/calendar_date/now.sql",
      "unique_id": "macro.dbt_date.now",
      "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.convert_timezone",
          "macro.dbt.current_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.780437,
      "supported_languages": null
    },
    "macro.dbt_date.periods_since": {
      "name": "periods_since",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/periods_since.sql",
      "original_file_path": "macros/calendar_date/periods_since.sql",
      "unique_id": "macro.dbt_date.periods_since",
      "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.datediff",
          "macro.dbt_date.now"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.780712,
      "supported_languages": null
    },
    "macro.dbt_date.today": {
      "name": "today",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/today.sql",
      "original_file_path": "macros/calendar_date/today.sql",
      "unique_id": "macro.dbt_date.today",
      "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.now"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.78096,
      "supported_languages": null
    },
    "macro.dbt_date.last_month": {
      "name": "last_month",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/last_month.sql",
      "original_file_path": "macros/calendar_date/last_month.sql",
      "unique_id": "macro.dbt_date.last_month",
      "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_months_ago"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.781145,
      "supported_languages": null
    },
    "macro.dbt_date.day_of_year": {
      "name": "day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.day_of_year",
      "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.postgres__day_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.781464,
      "supported_languages": null
    },
    "macro.dbt_date.default__day_of_year": {
      "name": "default__day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.default__day_of_year",
      "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.781603,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__day_of_year": {
      "name": "postgres__day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.postgres__day_of_year",
      "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7817411,
      "supported_languages": null
    },
    "macro.dbt_date.redshift__day_of_year": {
      "name": "redshift__day_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_year.sql",
      "original_file_path": "macros/calendar_date/day_of_year.sql",
      "unique_id": "macro.dbt_date.redshift__day_of_year",
      "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.781929,
      "supported_languages": null
    },
    "macro.dbt_date.round_timestamp": {
      "name": "round_timestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/round_timestamp.sql",
      "original_file_path": "macros/calendar_date/round_timestamp.sql",
      "unique_id": "macro.dbt_date.round_timestamp",
      "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.782177,
      "supported_languages": null
    },
    "macro.dbt_date.from_unixtimestamp": {
      "name": "from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.from_unixtimestamp",
      "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.postgres__from_unixtimestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.783443,
      "supported_languages": null
    },
    "macro.dbt_date.default__from_unixtimestamp": {
      "name": "default__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.default__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7837272,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__from_unixtimestamp": {
      "name": "postgres__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.postgres__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7840059,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__from_unixtimestamp": {
      "name": "snowflake__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7845,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__from_unixtimestamp": {
      "name": "bigquery__from_unixtimestamp",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/from_unixtimestamp.sql",
      "original_file_path": "macros/calendar_date/from_unixtimestamp.sql",
      "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp",
      "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7849238,
      "supported_languages": null
    },
    "macro.dbt_date.n_months_ago": {
      "name": "n_months_ago",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_months_ago.sql",
      "original_file_path": "macros/calendar_date/n_months_ago.sql",
      "unique_id": "macro.dbt_date.n_months_ago",
      "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.785301,
      "supported_languages": null
    },
    "macro.dbt_date.date_part": {
      "name": "date_part",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "unique_id": "macro.dbt_date.date_part",
      "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.785604,
      "supported_languages": null
    },
    "macro.dbt_date.default__date_part": {
      "name": "default__date_part",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "unique_id": "macro.dbt_date.default__date_part",
      "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.785739,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__date_part": {
      "name": "bigquery__date_part",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/date_part.sql",
      "original_file_path": "macros/calendar_date/date_part.sql",
      "unique_id": "macro.dbt_date.bigquery__date_part",
      "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7858691,
      "supported_languages": null
    },
    "macro.dbt_date.n_weeks_away": {
      "name": "n_weeks_away",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_weeks_away.sql",
      "original_file_path": "macros/calendar_date/n_weeks_away.sql",
      "unique_id": "macro.dbt_date.n_weeks_away",
      "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7862248,
      "supported_languages": null
    },
    "macro.dbt_date.day_of_month": {
      "name": "day_of_month",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_month.sql",
      "original_file_path": "macros/calendar_date/day_of_month.sql",
      "unique_id": "macro.dbt_date.day_of_month",
      "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.786439,
      "supported_languages": null
    },
    "macro.dbt_date.redshift__day_of_month": {
      "name": "redshift__day_of_month",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_month.sql",
      "original_file_path": "macros/calendar_date/day_of_month.sql",
      "unique_id": "macro.dbt_date.redshift__day_of_month",
      "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7866292,
      "supported_languages": null
    },
    "macro.dbt_date.yesterday": {
      "name": "yesterday",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/yesterday.sql",
      "original_file_path": "macros/calendar_date/yesterday.sql",
      "unique_id": "macro.dbt_date.yesterday",
      "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.n_days_ago"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.78685,
      "supported_languages": null
    },
    "macro.dbt_date.day_of_week": {
      "name": "day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.day_of_week",
      "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.postgres__day_of_week"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7887082,
      "supported_languages": null
    },
    "macro.dbt_date.default__day_of_week": {
      "name": "default__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.default__day_of_week",
      "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.789074,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__day_of_week": {
      "name": "snowflake__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.snowflake__day_of_week",
      "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.789516,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__day_of_week": {
      "name": "bigquery__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.bigquery__day_of_week",
      "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.789838,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__day_of_week": {
      "name": "postgres__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.postgres__day_of_week",
      "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.790286,
      "supported_languages": null
    },
    "macro.dbt_date.redshift__day_of_week": {
      "name": "redshift__day_of_week",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/day_of_week.sql",
      "original_file_path": "macros/calendar_date/day_of_week.sql",
      "unique_id": "macro.dbt_date.redshift__day_of_week",
      "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_bigint"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.790665,
      "supported_languages": null
    },
    "macro.dbt_date.iso_week_end": {
      "name": "iso_week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "unique_id": "macro.dbt_date.iso_week_end",
      "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.default__iso_week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.791135,
      "supported_languages": null
    },
    "macro.dbt_date._iso_week_end": {
      "name": "_iso_week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "unique_id": "macro.dbt_date._iso_week_end",
      "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.iso_week_start",
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7913501,
      "supported_languages": null
    },
    "macro.dbt_date.default__iso_week_end": {
      "name": "default__iso_week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "unique_id": "macro.dbt_date.default__iso_week_end",
      "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.79149,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__iso_week_end": {
      "name": "snowflake__iso_week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_end.sql",
      "original_file_path": "macros/calendar_date/iso_week_end.sql",
      "unique_id": "macro.dbt_date.snowflake__iso_week_end",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.791646,
      "supported_languages": null
    },
    "macro.dbt_date.n_weeks_ago": {
      "name": "n_weeks_ago",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_weeks_ago.sql",
      "original_file_path": "macros/calendar_date/n_weeks_ago.sql",
      "unique_id": "macro.dbt_date.n_weeks_ago",
      "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.792023,
      "supported_languages": null
    },
    "macro.dbt_date.month_name": {
      "name": "month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.month_name",
      "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.postgres__month_name"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7925131,
      "supported_languages": null
    },
    "macro.dbt_date.default__month_name": {
      "name": "default__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.default__month_name",
      "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7927182,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__month_name": {
      "name": "bigquery__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.bigquery__month_name",
      "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7929301,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__month_name": {
      "name": "snowflake__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.snowflake__month_name",
      "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.793151,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__month_name": {
      "name": "postgres__month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/month_name.sql",
      "original_file_path": "macros/calendar_date/month_name.sql",
      "unique_id": "macro.dbt_date.postgres__month_name",
      "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.793369,
      "supported_languages": null
    },
    "macro.dbt_date.last_month_name": {
      "name": "last_month_name",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/last_month_name.sql",
      "original_file_path": "macros/calendar_date/last_month_name.sql",
      "unique_id": "macro.dbt_date.last_month_name",
      "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.month_name",
          "macro.dbt_date.last_month"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.793625,
      "supported_languages": null
    },
    "macro.dbt_date.week_of_year": {
      "name": "week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "unique_id": "macro.dbt_date.week_of_year",
      "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.postgres__week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.794053,
      "supported_languages": null
    },
    "macro.dbt_date.default__week_of_year": {
      "name": "default__week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "unique_id": "macro.dbt_date.default__week_of_year",
      "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.794245,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__week_of_year": {
      "name": "postgres__week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_of_year.sql",
      "original_file_path": "macros/calendar_date/week_of_year.sql",
      "unique_id": "macro.dbt_date.postgres__week_of_year",
      "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.794396,
      "supported_languages": null
    },
    "macro.dbt_date.convert_timezone": {
      "name": "convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.convert_timezone",
      "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.postgres__convert_timezone"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.795362,
      "supported_languages": null
    },
    "macro.dbt_date.default__convert_timezone": {
      "name": "default__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.default__convert_timezone",
      "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.795648,
      "supported_languages": null
    },
    "macro.dbt_date.bigquery__convert_timezone": {
      "name": "bigquery__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.bigquery__convert_timezone",
      "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.795808,
      "supported_languages": null
    },
    "macro.dbt_date.spark__convert_timezone": {
      "name": "spark__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.spark__convert_timezone",
      "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7959738,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__convert_timezone": {
      "name": "postgres__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.postgres__convert_timezone",
      "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.type_timestamp"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.796216,
      "supported_languages": null
    },
    "macro.dbt_date.redshift__convert_timezone": {
      "name": "redshift__convert_timezone",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/convert_timezone.sql",
      "original_file_path": "macros/calendar_date/convert_timezone.sql",
      "unique_id": "macro.dbt_date.redshift__convert_timezone",
      "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.default__convert_timezone"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7964082,
      "supported_languages": null
    },
    "macro.dbt_date.n_months_away": {
      "name": "n_months_away",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/n_months_away.sql",
      "original_file_path": "macros/calendar_date/n_months_away.sql",
      "unique_id": "macro.dbt_date.n_months_away",
      "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.date_trunc",
          "macro.dbt.dateadd",
          "macro.dbt_date.today"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.796763,
      "supported_languages": null
    },
    "macro.dbt_date.iso_week_of_year": {
      "name": "iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.iso_week_of_year",
      "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.postgres__iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7973099,
      "supported_languages": null
    },
    "macro.dbt_date._iso_week_of_year": {
      "name": "_iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date._iso_week_of_year",
      "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt.type_int"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7975109,
      "supported_languages": null
    },
    "macro.dbt_date.default__iso_week_of_year": {
      "name": "default__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.default__iso_week_of_year",
      "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.797655,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__iso_week_of_year": {
      "name": "snowflake__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.snowflake__iso_week_of_year",
      "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.797795,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__iso_week_of_year": {
      "name": "postgres__iso_week_of_year",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/iso_week_of_year.sql",
      "original_file_path": "macros/calendar_date/iso_week_of_year.sql",
      "unique_id": "macro.dbt_date.postgres__iso_week_of_year",
      "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date._iso_week_of_year"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7979462,
      "supported_languages": null
    },
    "macro.dbt_date.week_end": {
      "name": "week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.week_end",
      "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_date.today",
          "macro.dbt_date.postgres__week_end"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.798414,
      "supported_languages": null
    },
    "macro.dbt_date.default__week_end": {
      "name": "default__week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.default__week_end",
      "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.last_day"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7985458,
      "supported_languages": null
    },
    "macro.dbt_date.snowflake__week_end": {
      "name": "snowflake__week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.snowflake__week_end",
      "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.week_start",
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.798749,
      "supported_languages": null
    },
    "macro.dbt_date.postgres__week_end": {
      "name": "postgres__week_end",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/week_end.sql",
      "original_file_path": "macros/calendar_date/week_end.sql",
      "unique_id": "macro.dbt_date.postgres__week_end",
      "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.week_start",
          "macro.dbt_date.n_days_away"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.798955,
      "supported_languages": null
    },
    "macro.dbt_date.next_month_number": {
      "name": "next_month_number",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/next_month_number.sql",
      "original_file_path": "macros/calendar_date/next_month_number.sql",
      "unique_id": "macro.dbt_date.next_month_number",
      "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_date.next_month"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.799179,
      "supported_languages": null
    },
    "macro.dbt_date.last_month_number": {
      "name": "last_month_number",
      "resource_type": "macro",
      "package_name": "dbt_date",
      "path": "macros/calendar_date/last_month_number.sql",
      "original_file_path": "macros/calendar_date/last_month_number.sql",
      "unique_id": "macro.dbt_date.last_month_number",
      "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_date.date_part",
          "macro.dbt_date.last_month"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.7993999,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__create_primary_key": {
      "name": "postgres__create_primary_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__create_primary_key",
      "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.805654,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__create_unique_key": {
      "name": "postgres__create_unique_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__create_unique_key",
      "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.807083,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__create_not_null": {
      "name": "postgres__create_not_null",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__create_not_null",
      "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_list",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8081431,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__create_foreign_key": {
      "name": "postgres__create_foreign_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__create_foreign_key",
      "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.foreign_key_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt_constraints.have_references_priv",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.810049,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__unique_constraint_exists": {
      "name": "postgres__unique_constraint_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists",
      "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by",
          "macro.dbt_constraints.column_list_matches"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.811044,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__foreign_key_exists": {
      "name": "postgres__foreign_key_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__foreign_key_exists",
      "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by",
          "macro.dbt_constraints.column_list_matches"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.812066,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__have_references_priv": {
      "name": "postgres__have_references_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__have_references_priv",
      "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.812754,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__have_ownership_priv": {
      "name": "postgres__have_ownership_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__have_ownership_priv",
      "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.813421,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__drop_referential_constraints": {
      "name": "postgres__drop_referential_constraints",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints",
      "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.814066,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__truncate_relation": {
      "name": "postgres__truncate_relation",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__truncate_relation",
      "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__drop_referential_constraints",
          "macro.dbt_constraints.truncate_relation",
          "macro.dbt.default__truncate_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8142989,
      "supported_languages": null
    },
    "macro.dbt_constraints.postgres__drop_relation": {
      "name": "postgres__drop_relation",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/postgres__create_constraints.sql",
      "original_file_path": "macros/postgres__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.postgres__drop_relation",
      "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__drop_referential_constraints",
          "macro.dbt_constraints.drop_relation",
          "macro.dbt.default__drop_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8145301,
      "supported_languages": null
    },
    "macro.dbt_constraints.default__test_primary_key": {
      "name": "default__test_primary_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/default__test_constraints.sql",
      "original_file_path": "macros/default__test_constraints.sql",
      "unique_id": "macro.dbt_constraints.default__test_primary_key",
      "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*) as row_count\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.816019,
      "supported_languages": null
    },
    "macro.dbt_constraints.default__test_unique_key": {
      "name": "default__test_unique_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/default__test_constraints.sql",
      "original_file_path": "macros/default__test_constraints.sql",
      "unique_id": "macro.dbt_constraints.default__test_unique_key",
      "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.816302,
      "supported_languages": null
    },
    "macro.dbt_constraints.default__test_foreign_key": {
      "name": "default__test_foreign_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/default__test_constraints.sql",
      "original_file_path": "macros/default__test_constraints.sql",
      "unique_id": "macro.dbt_constraints.default__test_foreign_key",
      "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_list",
          "macro.dbt_constraints.get_quoted_column_csv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.817295,
      "supported_languages": null
    },
    "macro.dbt_constraints.get_quoted_column_list": {
      "name": "get_quoted_column_list",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/default__test_constraints.sql",
      "original_file_path": "macros/default__test_constraints.sql",
      "unique_id": "macro.dbt_constraints.get_quoted_column_list",
      "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.817821,
      "supported_languages": null
    },
    "macro.dbt_constraints.get_quoted_column_csv": {
      "name": "get_quoted_column_csv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/default__test_constraints.sql",
      "original_file_path": "macros/default__test_constraints.sql",
      "unique_id": "macro.dbt_constraints.get_quoted_column_csv",
      "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_list"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.818115,
      "supported_languages": null
    },
    "macro.dbt_constraints.test_primary_key": {
      "name": "test_primary_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.test_primary_key",
      "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.default__test_primary_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.825052,
      "supported_languages": null
    },
    "macro.dbt_constraints.test_unique_key": {
      "name": "test_unique_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.test_unique_key",
      "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.default__test_unique_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8254888,
      "supported_languages": null
    },
    "macro.dbt_constraints.test_foreign_key": {
      "name": "test_foreign_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.test_foreign_key",
      "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false, constraint_name=none) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.default__test_foreign_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.826371,
      "supported_languages": null
    },
    "macro.dbt_constraints.create_primary_key": {
      "name": "create_primary_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.create_primary_key",
      "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__create_primary_key"
        ]
      },
      "description": "Calls the adapter-specific version of the macro to create a primary key",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "dbt_constraints://macros/macros.yml",
      "arguments": [
        {
          "name": "table_model",
          "type": "graph node",
          "description": "Accepts the graph node of the table that will have the constraint"
        },
        {
          "name": "column_names",
          "type": "array of column names",
          "description": "An array of text column names to include in the constraint"
        },
        {
          "name": "quote_columns",
          "type": "boolean",
          "description": "Whether to wrap column names in double quotes. By default this is set to false."
        },
        {
          "name": "constraint_name",
          "type": "string",
          "description": "Name of the constraint.  If not specified, a constraint name will be generated."
        }
      ],
      "created_at": 1692692941.598548,
      "supported_languages": null
    },
    "macro.dbt_constraints.create_unique_key": {
      "name": "create_unique_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.create_unique_key",
      "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__create_unique_key"
        ]
      },
      "description": "Calls the adapter-specific version of the macro to create a unique key",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "dbt_constraints://macros/macros.yml",
      "arguments": [
        {
          "name": "table_model",
          "type": "graph node",
          "description": "Accepts the graph node of the table that will have the constraint"
        },
        {
          "name": "column_names",
          "type": "array of column names",
          "description": "An array of text column names to include in the constraint"
        },
        {
          "name": "quote_columns",
          "type": "boolean",
          "description": "Whether to wrap column names in double quotes. By default this is set to false."
        },
        {
          "name": "constraint_name",
          "type": "string",
          "description": "Name of the constraint.  If not specified, a constraint name will be generated."
        }
      ],
      "created_at": 1692692941.600333,
      "supported_languages": null
    },
    "macro.dbt_constraints.create_foreign_key": {
      "name": "create_foreign_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.create_foreign_key",
      "macro_sql": "{%- macro create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache)) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__create_foreign_key"
        ]
      },
      "description": "Calls the adapter-specific version of the macro to create a foreign key",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "dbt_constraints://macros/macros.yml",
      "arguments": [
        {
          "name": "test_model",
          "type": "results node",
          "description": "Accepts the result node of the test related to this constraint"
        },
        {
          "name": "pk_model",
          "type": "graph node",
          "description": "Accepts the graph node of the parent table that has a PK or UK"
        },
        {
          "name": "column_names",
          "type": "array of column names",
          "description": "An array of text column names to include in the FK reference"
        },
        {
          "name": "fk_model",
          "type": "graph node",
          "description": "Accepts the graph node of the table that will have the constraint"
        },
        {
          "name": "fk_column_names",
          "type": "array of column names",
          "description": "An array of text column names to include in the constraint"
        },
        {
          "name": "quote_columns",
          "type": "boolean",
          "description": "Whether to wrap column names in double quotes. By default this is set to false."
        },
        {
          "name": "constraint_name",
          "type": "string",
          "description": "Name of the constraint.  If not specified, a constraint name will be generated."
        }
      ],
      "created_at": 1692692941.602876,
      "supported_languages": null
    },
    "macro.dbt_constraints.create_not_null": {
      "name": "create_not_null",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.create_not_null",
      "macro_sql": "{%- macro create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_relation, column_names, verify_permissions, quote_columns, lookup_cache)) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__create_not_null"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8276749,
      "supported_languages": null
    },
    "macro.dbt_constraints.unique_constraint_exists": {
      "name": "unique_constraint_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.unique_constraint_exists",
      "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache) ) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__unique_constraint_exists"
        ]
      },
      "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "dbt_constraints://macros/macros.yml",
      "arguments": [
        {
          "name": "table_relation",
          "type": "relation",
          "description": "Accepts the relation of the table to check"
        },
        {
          "name": "column_names",
          "type": "array of column names",
          "description": "An array of text column names the constraint must contain"
        }
      ],
      "created_at": 1692692941.6037178,
      "supported_languages": null
    },
    "macro.dbt_constraints.foreign_key_exists": {
      "name": "foreign_key_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.foreign_key_exists",
      "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names, lookup_cache)) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__foreign_key_exists"
        ]
      },
      "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "dbt_constraints://macros/macros.yml",
      "arguments": [
        {
          "name": "table_relation",
          "type": "relation",
          "description": "Accepts the relation of the table to check"
        },
        {
          "name": "column_names",
          "type": "array of column names",
          "description": "An array of text column names the constraint must contain"
        }
      ],
      "created_at": 1692692941.604544,
      "supported_languages": null
    },
    "macro.dbt_constraints.have_references_priv": {
      "name": "have_references_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.have_references_priv",
      "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache) ) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__have_references_priv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.828442,
      "supported_languages": null
    },
    "macro.dbt_constraints.have_ownership_priv": {
      "name": "have_ownership_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.have_ownership_priv",
      "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions, lookup_cache)) }}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__have_ownership_priv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.828681,
      "supported_languages": null
    },
    "macro.dbt_constraints.truncate_relation": {
      "name": "truncate_relation",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.truncate_relation",
      "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__truncate_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.828854,
      "supported_languages": null
    },
    "macro.dbt_constraints.drop_relation": {
      "name": "drop_relation",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.drop_relation",
      "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.postgres__drop_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.829022,
      "supported_languages": null
    },
    "macro.dbt_constraints.create_constraints": {
      "name": "create_constraints",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.create_constraints",
      "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) and results -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- set lookup_cache = {\n            \"table_columns\": { },\n            \"table_privileges\": { },\n            \"unique_keys\": { },\n            \"not_null_col\": { },\n            \"foreign_keys\": { } } -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns, lookup_cache) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.create_constraints_by_type"
        ]
      },
      "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": "dbt_constraints://macros/macros.yml",
      "arguments": [
        {
          "name": "constraint_types",
          "type": "array of constraint types",
          "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"
        },
        {
          "name": "quote_columns",
          "type": "boolean",
          "description": "Whether to wrap column names in double quotes. By default this is set to false."
        }
      ],
      "created_at": 1692692941.597043,
      "supported_languages": null
    },
    "macro.dbt_constraints.create_constraints_by_type": {
      "name": "create_constraints_by_type",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.create_constraints_by_type",
      "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns, lookup_cache) -%}\n\n    {#- Loop through the results and find all tests that passed and match the constraint_types -#}\n    {#- Issue #2: added condition that the where config must be empty -#}\n    {%- for res in results\n        if res.status == \"pass\"\n            and res.node.config.materialized == \"test\"\n            and res.node.test_metadata\n            and res.node.test_metadata.name is in( constraint_types )\n            and res.node.config.where is none -%}\n\n        {%- set test_model = res.node -%}\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {% set ns = namespace(verify_permissions=false) %}\n\n        {#- Find the table models that are referenced by this test.\n            These models must be physical tables and cannot be sources -#}\n        {%- set table_models = [] -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes)\n                if node.resource_type in ( ( \"model\", \"snapshot\", \"seed\") )\n                    if node.config.materialized in( (\"table\", \"incremental\", \"snapshot\", \"seed\") ) -%}\n\n                        {#- Append to our list of models &or snapshots for this test -#}\n                        {%- do table_models.append(node) -%}\n\n        {% endfor %}\n\n        {#- Check if we allow constraints on sources overall and for this specific type of constraint -#}\n        {%- if var('dbt_constraints_sources_enabled', false) and (\n                ( var('dbt_constraints_sources_pk_enabled', false) and test_model.test_metadata.name in(\"primary_key\") )\n             or ( var('dbt_constraints_sources_uk_enabled', false) and test_model.test_metadata.name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n             or ( var('dbt_constraints_sources_fk_enabled', false) and test_model.test_metadata.name in(\"foreign_key\", \"relationships\") )\n             or ( var('dbt_constraints_sources_nn_enabled', false) and test_model.test_metadata.name in(\"not_null\") )\n            ) -%}\n            {%- for node in graph.sources.values()\n                | selectattr(\"resource_type\", \"equalto\", \"source\")\n                | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {#- If we are using a sources, we will need to verify permissions -#}\n                    {%- set ns.verify_permissions = true -%}\n\n            {%- endfor -%}\n        {%- endif -%}\n\n\n        {#- We only create PK/UK if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- if 1 == table_models|count\n            and test_model.test_metadata.name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- if test_model.test_metadata.name == \"primary_key\" -%}\n                    {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n                    {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create FK if there are two models referenced by the test\n            and if all the columns exist as physical columns on the tables -#}\n        {%- elif 2 == table_models|count\n            and test_model.test_metadata.name in( \"foreign_key\", \"relationships\") -%}\n\n            {%- set fk_model = none -%}\n            {%- set pk_model = none -%}\n            {%- set fk_model_names = modules.re.findall( \"(models|snapshots|seeds)\\W+(\\w+)\" , test_model.file_key_name)  -%}\n            {%- set fk_source_names = modules.re.findall( \"source\\W+(\\w+)\\W+(\\w+)\" , test_parameters.model)  -%}\n\n            {%- if 1 == fk_model_names | count -%}\n                {%- set fk_model = table_models | selectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"name\", \"equalto\", fk_model_names[0][1]) | first -%}\n            {%- elif 1 == fk_source_names | count  -%}\n                {%- if table_models[0].source_name == fk_source_names[0][0] and table_models[0].name == fk_source_names[0][1] -%}\n                    {%- set fk_model = table_models[0] -%}\n                    {%- set pk_model = table_models[1] -%}\n                {%- else  -%}\n                    {%- set fk_model = table_models[1] -%}\n                    {%- set pk_model = table_models[0] -%}\n                {%- endif -%}\n            {%- endif -%}\n            {# {%- set fk_model_name = test_model.file_key_name |replace(\"models.\", \"\") -%} #}\n\n            {%- if fk_model and pk_model -%}\n\n                {%- set fk_table_relation = api.Relation.create(\n                    database=fk_model.database,\n                    schema=fk_model.schema,\n                    identifier=fk_model.alias) -%}\n\n                {%- set pk_table_relation = api.Relation.create(\n                    database=pk_model.database,\n                    schema=pk_model.schema,\n                    identifier=pk_model.alias) -%}\n\n                {# Attempt to identify parameters we can use for the column names #}\n                {%- set pk_column_names = [] -%}\n                {%- if  test_parameters.pk_column_names -%}\n                    {%- set pk_column_names = test_parameters.pk_column_names -%}\n                {%- elif  test_parameters.field -%}\n                    {%- set pk_column_names = [test_parameters.field] -%}\n                {%- elif test_parameters.pk_column_name -%}\n                    {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- set fk_column_names = [] -%}\n                {%- if  test_parameters.fk_column_names -%}\n                    {%- set fk_column_names = test_parameters.fk_column_names -%}\n                {%- elif test_parameters.column_name -%}\n                    {%- set fk_column_names = [test_parameters.column_name] -%}\n                {%- elif test_parameters.fk_column_name -%}\n                    {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names, lookup_cache) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns, test_parameters.constraint_name, lookup_cache) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ fk_model_names ~ \" or source=\" ~ fk_source_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create NN if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- elif 1 == table_models|count\n            and test_model.test_metadata.name in(\"not_null\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names, lookup_cache) -%}\n                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns, lookup_cache) -%}\n            {%- else  -%}\n                {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.table_columns_all_exist",
          "macro.dbt_constraints.create_not_null",
          "macro.dbt_constraints.create_primary_key",
          "macro.dbt_constraints.create_unique_key",
          "macro.dbt_constraints.create_foreign_key"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.838845,
      "supported_languages": null
    },
    "macro.dbt_constraints.table_columns_all_exist": {
      "name": "table_columns_all_exist",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.table_columns_all_exist",
      "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list, lookup_cache) -%}\n    {%- set tab_column_list = dbt_constraints.lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.lookup_table_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.839259,
      "supported_languages": null
    },
    "macro.dbt_constraints.lookup_table_columns": {
      "name": "lookup_table_columns",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.lookup_table_columns",
      "macro_sql": "{%- macro lookup_table_columns(table_relation, lookup_cache) -%}\n    {{ return(adapter.dispatch('lookup_table_columns', 'dbt_constraints')(table_relation, lookup_cache)) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.default__lookup_table_columns"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.839471,
      "supported_languages": null
    },
    "macro.dbt_constraints.default__lookup_table_columns": {
      "name": "default__lookup_table_columns",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.default__lookup_table_columns",
      "macro_sql": "{%- macro default__lookup_table_columns(table_relation, lookup_cache) -%}\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n        {%- set tab_column_list = [] -%}\n        {%- for column in tab_Columns -%}\n            {{ tab_column_list.append(column.name|upper) }}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: tab_column_list }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8400068,
      "supported_languages": null
    },
    "macro.dbt_constraints.column_list_matches": {
      "name": "column_list_matches",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/create_constraints.sql",
      "original_file_path": "macros/create_constraints.sql",
      "unique_id": "macro.dbt_constraints.column_list_matches",
      "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.840547,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__create_primary_key": {
      "name": "snowflake__create_primary_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__create_primary_key",
      "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.847881,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__create_unique_key": {
      "name": "snowflake__create_unique_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__create_unique_key",
      "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint_name: column_names} }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8490639,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__create_foreign_key": {
      "name": "snowflake__create_foreign_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__create_foreign_key",
      "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names, lookup_cache) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set query -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) RELY\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- do lookup_cache.foreign_keys.update({fk_table_relation: {constraint_name: fk_column_names} }) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.foreign_key_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt_constraints.have_references_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8507142,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__create_not_null": {
      "name": "snowflake__create_not_null",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__create_not_null",
      "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n\n    {%- set existing_not_null_col = lookup_cache.not_null_col[table_relation] -%}\n\n    {%- set columns_to_change = [] -%}\n    {%- for column_name in column_names if column_name not in existing_not_null_col -%}\n        {%- do columns_to_change.append(column_name) -%}\n        {%- do existing_not_null_col.append(column_name) -%}\n    {%- endfor -%}\n    {%- if columns_to_change|count > 0 -%}\n        {%- set columns_list = dbt_constraints.get_quoted_column_list(columns_to_change, quote_columns) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- set modify_statements= [] -%}\n                {%- for column in columns_list -%}\n                    {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n                {%- endfor -%}\n                {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n                {%- set query -%}\n                    ALTER TABLE {{table_relation}} MODIFY {{ modify_statement_csv }};\n                {%- endset -%}\n                {%- do log(\"Creating not null constraint for: \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n                {%- do run_query(query) -%}\n                {#- Add this constraint to the lookup cache -#}\n                {%- set constraint_key = table_relation.identifier ~ \"_\" ~ columns_to_change|join('_') ~ \"_NN\" -%}\n                {%- do lookup_cache.not_null_col.update({table_relation: existing_not_null_col }) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping not null constraint for \" ~ columns_to_change | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ column_names | join(\", \") ~ \" in \" ~ table_relation ~ \"  because all columns are already not null\", info=false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_list",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.852459,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__unique_constraint_exists": {
      "name": "snowflake__unique_constraint_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists",
      "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.unique_keys -%}\n        {%- set cached_unique_keys = lookup_cache.unique_keys[table_relation] -%}\n        {%- for cached_columns in cached_unique_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW UNIQUE KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW PRIMARY KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.unique_keys.update({table_relation: {constraint.key_name: constraint.columns[\"column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.column_list_matches",
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.854799,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__foreign_key_exists": {
      "name": "snowflake__foreign_key_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists",
      "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n\n    {#- Check if we can find this constraint in the lookup cache -#}\n    {%- if table_relation in lookup_cache.foreign_keys -%}\n        {%- set cached_foreign_keys = lookup_cache.foreign_keys[table_relation] -%}\n        {%- for cached_columns in cached_foreign_keys.values() -%}\n            {%- if dbt_constraints.column_list_matches(cached_columns, column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {%- set lookup_query -%}\n    SHOW IMPORTED KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {#- Add this constraint to the lookup cache -#}\n            {%- do lookup_cache.foreign_keys.update({table_relation: {constraint.key_name: constraint.columns[\"fk_column_name\"].values()} }) -%}\n        {% endfor %}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.column_list_matches",
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.856343,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__have_references_priv": {
      "name": "snowflake__have_references_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__have_references_priv",
      "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"REFERENCES\" in table_privileges or \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.snowflake__lookup_table_privileges"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.856822,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__have_ownership_priv": {
      "name": "snowflake__have_ownership_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv",
      "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set table_privileges = snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n        {%- if \"OWNERSHIP\" in table_privileges -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.snowflake__lookup_table_privileges"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8572621,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__lookup_table_privileges": {
      "name": "snowflake__lookup_table_privileges",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__lookup_table_privileges",
      "macro_sql": "{%- macro snowflake__lookup_table_privileges(table_relation, lookup_cache) -%}\n\n    {%- if table_relation.database not in lookup_cache.table_privileges -%}\n        {%- set lookup_query -%}\n        select distinct\n            upper(tp.table_schema) as \"table_schema\",\n            upper(tp.table_name) as \"table_name\",\n            tp.privilege_type as \"privilege_type\"\n        from {{table_relation.database}}.information_schema.table_privileges tp\n        where is_role_in_session(tp.grantee)\n            and tp.privilege_type in ('OWNERSHIP', 'REFERENCES')\n        {%- endset -%}\n        {%- do log(\"Caching privileges for database: \" ~ table_relation.database, info=false) -%}\n        {%- set privilege_list = run_query(lookup_query) -%}\n        {%- do lookup_cache.table_privileges.update({ table_relation.database: privilege_list }) -%}\n    {%- endif -%}\n\n    {%- set tab_priv_list = [] -%}\n    {%- set schema_name = table_relation.schema|upper -%}\n    {%- set table_name = table_relation.identifier|upper -%}\n    {%- for row in lookup_cache.table_privileges[table_relation.database].rows -%}\n        {%- if row[\"table_schema\"] == schema_name and row[\"table_name\"] == table_name -%}\n            {%- do tab_priv_list.append(row[\"privilege_type\"]) -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(tab_priv_list) }}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8582442,
      "supported_languages": null
    },
    "macro.dbt_constraints.snowflake__lookup_table_columns": {
      "name": "snowflake__lookup_table_columns",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/snowflake__create_constraints.sql",
      "original_file_path": "macros/snowflake__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.snowflake__lookup_table_columns",
      "macro_sql": "{%- macro snowflake__lookup_table_columns(table_relation, lookup_cache) -%}\n\n    {%- if table_relation not in lookup_cache.table_columns -%}\n        {%- set lookup_query -%}\n        SHOW COLUMNS IN TABLE {{table_relation}}\n        {%- endset -%}\n        {%- set results = run_query(lookup_query) -%}\n\n        {%- set not_null_col = [] -%}\n        {%- set upper_column_list = [] -%}\n        {%- for row in results.rows -%}\n            {%- do upper_column_list.append(row[\"column_name\"]|upper) -%}\n            {%- if row['null?'] == 'false' -%}\n                {%- do not_null_col.append(row[\"column_name\"]|upper) -%}\n            {%- endif -%}\n        {%- endfor -%}\n        {%- do lookup_cache.table_columns.update({ table_relation: upper_column_list }) -%}\n        {%- do lookup_cache.not_null_col.update({ table_relation: not_null_col }) -%}\n    {%- endif -%}\n    {{ return(lookup_cache.table_columns[table_relation]) }}\n\n{%- endmacro -%}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.859178,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__create_primary_key": {
      "name": "redshift__create_primary_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__create_primary_key",
      "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8651829,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__create_unique_key": {
      "name": "redshift__create_unique_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__create_unique_key",
      "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endset -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.866527,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__create_not_null": {
      "name": "redshift__create_not_null",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__create_not_null",
      "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false, lookup_cache=none) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_list"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8669,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__create_foreign_key": {
      "name": "redshift__create_foreign_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__create_foreign_key",
      "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions, lookup_cache) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- set query -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endset -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.foreign_key_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt_constraints.have_references_priv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.868771,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__unique_constraint_exists": {
      "name": "redshift__unique_constraint_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists",
      "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by",
          "macro.dbt_constraints.column_list_matches"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8698602,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__foreign_key_exists": {
      "name": "redshift__foreign_key_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__foreign_key_exists",
      "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by",
          "macro.dbt_constraints.column_list_matches"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.870878,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__have_references_priv": {
      "name": "redshift__have_references_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__have_references_priv",
      "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.871572,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__have_ownership_priv": {
      "name": "redshift__have_ownership_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__have_ownership_priv",
      "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8722692,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__drop_referential_constraints": {
      "name": "redshift__drop_referential_constraints",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints",
      "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- set query -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endset -%}\n        {%- do run_query(query) -%}\n    {% endfor %}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.872867,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__truncate_relation": {
      "name": "redshift__truncate_relation",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__truncate_relation",
      "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.redshift__drop_referential_constraints",
          "macro.dbt_constraints.truncate_relation",
          "macro.dbt.default__truncate_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.873108,
      "supported_languages": null
    },
    "macro.dbt_constraints.redshift__drop_relation": {
      "name": "redshift__drop_relation",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/redshift__create_constraints.sql",
      "original_file_path": "macros/redshift__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.redshift__drop_relation",
      "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.redshift__drop_referential_constraints",
          "macro.dbt_constraints.drop_relation",
          "macro.dbt.default__drop_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.873342,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__create_primary_key": {
      "name": "oracle__create_primary_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__create_primary_key",
      "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8784692,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__create_unique_key": {
      "name": "oracle__create_unique_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__create_unique_key",
      "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false, constraint_name=none, lookup_cache=none) -%}\n    {%- set constraint_name = (constraint_name or table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.have_ownership_priv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.880176,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__create_foreign_key": {
      "name": "oracle__create_foreign_key",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__create_foreign_key",
      "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns, constraint_name, lookup_cache) -%}\n    {%- set constraint_name = (constraint_name or fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names, lookup_cache) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions, lookup_cache) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_constraints.get_quoted_column_csv",
          "macro.dbt_constraints.unique_constraint_exists",
          "macro.dbt_constraints.foreign_key_exists",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt_constraints.have_references_priv"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.882126,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__create_not_null": {
      "name": "oracle__create_not_null",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__create_not_null",
      "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns, lookup_cache) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.get_quoted_column_list",
          "macro.dbt_constraints.have_ownership_priv",
          "macro.dbt.run_query"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8831959,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__unique_constraint_exists": {
      "name": "oracle__unique_constraint_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists",
      "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by",
          "macro.dbt_constraints.column_list_matches"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.884295,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__foreign_key_exists": {
      "name": "oracle__foreign_key_exists",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__foreign_key_exists",
      "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names, lookup_cache) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": [
          "macro.dbt.run_query",
          "macro.dbt_utils.group_by",
          "macro.dbt_constraints.column_list_matches"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.885296,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__have_references_priv": {
      "name": "oracle__have_references_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__have_references_priv",
      "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.885443,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__have_ownership_priv": {
      "name": "oracle__have_ownership_priv",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__have_ownership_priv",
      "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions, lookup_cache) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n",
      "depends_on": {
        "macros": []
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.885579,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__drop_referential_constraints": {
      "name": "oracle__drop_referential_constraints",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints",
      "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.88583,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__truncate_relation": {
      "name": "oracle__truncate_relation",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__truncate_relation",
      "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {%- do log(\"Truncating table \" ~ relation, info=true) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt_constraints.oracle__drop_referential_constraints",
          "macro.dbt_constraints.truncate_relation",
          "macro.dbt.default__truncate_relation"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8861408,
      "supported_languages": null
    },
    "macro.dbt_constraints.oracle__drop_relation": {
      "name": "oracle__drop_relation",
      "resource_type": "macro",
      "package_name": "dbt_constraints",
      "path": "macros/oracle__create_constraints.sql",
      "original_file_path": "macros/oracle__create_constraints.sql",
      "unique_id": "macro.dbt_constraints.oracle__drop_relation",
      "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {%- do log(\"Dropping table \" ~ relation, info=true) -%}\n        {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT owner, table_name, constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = '{{relation.schema|upper}}'\n            AND upper(cons.table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\n    FOR REC IN (\n        SELECT owner, table_name\n        FROM all_tables\n        WHERE upper(owner) = '{{relation.schema|upper}}'\n            AND upper(table_name) = '{{relation.identifier|upper}}'\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'DROP TABLE \"'||REC.OWNER||'\".\"'||REC.TABLE_NAME||'\" CASCADE CONSTRAINTS';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop table: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n{% endmacro %}",
      "depends_on": {
        "macros": [
          "macro.dbt.statement"
        ]
      },
      "description": "",
      "meta": {},
      "docs": {
        "show": true,
        "node_color": null
      },
      "patch_path": null,
      "arguments": [],
      "created_at": 1692692940.8865762,
      "supported_languages": null
    }
  },
  "docs": {
    "doc.dbt.__overview__": {
      "name": "__overview__",
      "resource_type": "doc",
      "package_name": "dbt",
      "path": "overview.md",
      "original_file_path": "docs/overview.md",
      "unique_id": "doc.dbt.__overview__",
      "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"
    }
  },
  "exposures": {},
  "metrics": {
    "metric.cicd_demo.count_commits": {
      "name": "count_commits",
      "resource_type": "metric",
      "package_name": "cicd_demo",
      "path": "github/commits/schema.yml",
      "original_file_path": "models/github/commits/schema.yml",
      "unique_id": "metric.cicd_demo.count_commits",
      "fqn": [
        "cicd_demo",
        "github",
        "commits",
        "count_commits"
      ],
      "description": "Count of commits",
      "label": "Count of commits",
      "calculation_method": "count_distinct",
      "expression": "commit_id",
      "filters": [],
      "time_grains": [
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "dimensions": [],
      "timestamp": "created_at",
      "window": null,
      "model": "ref('commits')",
      "model_unique_id": null,
      "meta": {
        "gooddata": {
          "model_id": "github",
          "format": "#,##0"
        }
      },
      "tags": [
        "Metrics dbt"
      ],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "sources": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.commits"
        ]
      },
      "refs": [
        [
          "commits"
        ]
      ],
      "metrics": [],
      "created_at": 1692692941.498793
    },
    "metric.cicd_demo.count_commit_comments": {
      "name": "count_commit_comments",
      "resource_type": "metric",
      "package_name": "cicd_demo",
      "path": "github/commits/schema.yml",
      "original_file_path": "models/github/commits/schema.yml",
      "unique_id": "metric.cicd_demo.count_commit_comments",
      "fqn": [
        "cicd_demo",
        "github",
        "commits",
        "count_commit_comments"
      ],
      "description": "Count of commit comments",
      "label": "Count of commit comments",
      "calculation_method": "sum",
      "expression": "comment_count",
      "filters": [],
      "time_grains": [
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "dimensions": [],
      "timestamp": "created_at",
      "window": null,
      "model": "ref('commits')",
      "model_unique_id": null,
      "meta": {
        "gooddata": {
          "model_id": "github",
          "format": "#,##0"
        }
      },
      "tags": [
        "Metrics dbt"
      ],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "sources": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.commits"
        ]
      },
      "refs": [
        [
          "commits"
        ]
      ],
      "metrics": [],
      "created_at": 1692692941.501676
    },
    "metric.cicd_demo.sum_stargazers": {
      "name": "sum_stargazers",
      "resource_type": "metric",
      "package_name": "cicd_demo",
      "path": "github/repos/schema.yml",
      "original_file_path": "models/github/repos/schema.yml",
      "unique_id": "metric.cicd_demo.sum_stargazers",
      "fqn": [
        "cicd_demo",
        "github",
        "repos",
        "sum_stargazers"
      ],
      "description": "Sum of stargazers",
      "label": "Sum of stargazers",
      "calculation_method": "sum",
      "expression": "stargazers_count",
      "filters": [],
      "time_grains": [
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "dimensions": [],
      "timestamp": "repo_created_at",
      "window": null,
      "model": "ref('repos')",
      "model_unique_id": null,
      "meta": {
        "gooddata": {
          "model_id": "github",
          "format": "#,##0"
        }
      },
      "tags": [
        "Metrics dbt"
      ],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "sources": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.repos"
        ]
      },
      "refs": [
        [
          "repos"
        ]
      ],
      "metrics": [],
      "created_at": 1692692941.5113971
    },
    "metric.cicd_demo.count_pull_requests": {
      "name": "count_pull_requests",
      "resource_type": "metric",
      "package_name": "cicd_demo",
      "path": "github/pull_requests/schema.yml",
      "original_file_path": "models/github/pull_requests/schema.yml",
      "unique_id": "metric.cicd_demo.count_pull_requests",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "count_pull_requests"
      ],
      "description": "Count of pull requests",
      "label": "Count of pull requests",
      "calculation_method": "count_distinct",
      "expression": "pull_request_id",
      "filters": [],
      "time_grains": [
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "dimensions": [],
      "timestamp": "created_at",
      "window": null,
      "model": "ref('pull_requests')",
      "model_unique_id": null,
      "meta": {
        "gooddata": {
          "model_id": "github",
          "format": "#,##0"
        }
      },
      "tags": [
        "Metrics dbt"
      ],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "sources": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.pull_requests"
        ]
      },
      "refs": [
        [
          "pull_requests"
        ]
      ],
      "metrics": [],
      "created_at": 1692692941.532041
    },
    "metric.cicd_demo.count_merged_pull_requests": {
      "name": "count_merged_pull_requests",
      "resource_type": "metric",
      "package_name": "cicd_demo",
      "path": "github/pull_requests/schema.yml",
      "original_file_path": "models/github/pull_requests/schema.yml",
      "unique_id": "metric.cicd_demo.count_merged_pull_requests",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "count_merged_pull_requests"
      ],
      "description": "Count of merged pull requests. \"Merged at\" must not be empty",
      "label": "Count of merged pull requests",
      "calculation_method": "count_distinct",
      "expression": "pull_request_id",
      "filters": [
        {
          "field": "merged_at",
          "operator": "is not",
          "value": "NULL"
        }
      ],
      "time_grains": [
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "dimensions": [],
      "timestamp": "created_at",
      "window": null,
      "model": "ref('pull_requests')",
      "model_unique_id": null,
      "meta": {
        "gooddata": {
          "model_id": "github",
          "format": "#,##0"
        }
      },
      "tags": [
        "Metrics dbt"
      ],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "sources": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.pull_requests"
        ]
      },
      "refs": [
        [
          "pull_requests"
        ]
      ],
      "metrics": [],
      "created_at": 1692692941.535409
    },
    "metric.cicd_demo.count_nodraft_pull_requests": {
      "name": "count_nodraft_pull_requests",
      "resource_type": "metric",
      "package_name": "cicd_demo",
      "path": "github/pull_requests/schema.yml",
      "original_file_path": "models/github/pull_requests/schema.yml",
      "unique_id": "metric.cicd_demo.count_nodraft_pull_requests",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "count_nodraft_pull_requests"
      ],
      "description": "Count of pull requests where draft is False",
      "label": "Count of non draft pull requests",
      "calculation_method": "count_distinct",
      "expression": "pull_request_id",
      "filters": [
        {
          "field": "pull_request_draft",
          "operator": "<>",
          "value": "\"true\""
        }
      ],
      "time_grains": [
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "dimensions": [],
      "timestamp": "created_at",
      "window": null,
      "model": "ref('pull_requests')",
      "model_unique_id": null,
      "meta": {
        "gooddata": {
          "model_id": "github",
          "format": "#,##0"
        }
      },
      "tags": [
        "Metrics dbt"
      ],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "sources": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.pull_requests"
        ]
      },
      "refs": [
        [
          "pull_requests"
        ]
      ],
      "metrics": [],
      "created_at": 1692692941.538254
    },
    "metric.cicd_demo.sum_days_to_solve": {
      "name": "sum_days_to_solve",
      "resource_type": "metric",
      "package_name": "cicd_demo",
      "path": "github/pull_requests/schema.yml",
      "original_file_path": "models/github/pull_requests/schema.yml",
      "unique_id": "metric.cicd_demo.sum_days_to_solve",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "sum_days_to_solve"
      ],
      "description": "Sum of days it took to solve pull requests",
      "label": "Sum days to solve",
      "calculation_method": "sum",
      "expression": "days_to_solve",
      "filters": [],
      "time_grains": [
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "dimensions": [],
      "timestamp": "created_at",
      "window": null,
      "model": "ref('pull_requests')",
      "model_unique_id": null,
      "meta": {
        "gooddata": {
          "model_id": "github",
          "format": "#,##0.00"
        }
      },
      "tags": [
        "Metrics dbt"
      ],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "sources": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.pull_requests"
        ]
      },
      "refs": [
        [
          "pull_requests"
        ]
      ],
      "metrics": [],
      "created_at": 1692692941.541051
    },
    "metric.cicd_demo.avg_days_to_solve": {
      "name": "avg_days_to_solve",
      "resource_type": "metric",
      "package_name": "cicd_demo",
      "path": "github/pull_requests/schema.yml",
      "original_file_path": "models/github/pull_requests/schema.yml",
      "unique_id": "metric.cicd_demo.avg_days_to_solve",
      "fqn": [
        "cicd_demo",
        "github",
        "pull_requests",
        "avg_days_to_solve"
      ],
      "description": "Average days it took to solve pull requests",
      "label": "Average days to solve",
      "calculation_method": "average",
      "expression": "days_to_solve",
      "filters": [],
      "time_grains": [
        "day",
        "week",
        "month",
        "quarter",
        "year"
      ],
      "dimensions": [
        "pull_request_draft"
      ],
      "timestamp": "created_at",
      "window": null,
      "model": "ref('pull_requests')",
      "model_unique_id": null,
      "meta": {
        "gooddata": {
          "model_id": "github",
          "format": "#,##0.00"
        }
      },
      "tags": [
        "Metrics dbt"
      ],
      "config": {
        "enabled": true
      },
      "unrendered_config": {},
      "sources": [],
      "depends_on": {
        "macros": [],
        "nodes": [
          "model.cicd_demo.pull_requests"
        ]
      },
      "refs": [
        [
          "pull_requests"
        ]
      ],
      "metrics": [],
      "created_at": 1692692941.543962
    }
  },
  "selectors": {},
  "disabled": {
    "model.cicd_demo.reviews": [
      {
        "database": "demo",
        "schema": "cicd_input_stage",
        "name": "reviews",
        "resource_type": "model",
        "package_name": "cicd_demo",
        "path": "_todo/reviews/reviews.sql",
        "original_file_path": "models/_todo/reviews/reviews.sql",
        "unique_id": "model.cicd_demo.reviews",
        "fqn": [
          "cicd_demo",
          "_todo",
          "reviews",
          "reviews"
        ],
        "alias": "reviews",
        "checksum": {
          "name": "sha256",
          "checksum": "9cd00f15c96998d63e3d7a0e03e9b3dc3d1376bdda35a395f82290acd50be241"
        },
        "config": {
          "enabled": false,
          "alias": null,
          "schema": null,
          "database": null,
          "tags": [],
          "meta": {
            "gooddata": {
              "model_id": "github"
            }
          },
          "materialized": "incremental",
          "incremental_strategy": null,
          "persist_docs": {},
          "quoting": {},
          "column_types": {},
          "full_refresh": null,
          "unique_key": "review_id",
          "on_schema_change": "ignore",
          "grants": {},
          "packages": [],
          "docs": {
            "show": true,
            "node_color": null
          },
          "indexes": [
            {
              "columns": [
                "review_id"
              ],
              "unique": true
            },
            {
              "columns": [
                "pull_request_id"
              ],
              "unique": false
            }
          ],
          "post-hook": [],
          "pre-hook": []
        },
        "tags": [],
        "description": "Reviews",
        "columns": {
          "review_id": {
            "name": "review_id",
            "description": "Review ID",
            "meta": {
              "gooddata": {
                "ldm_type": "primary_key"
              }
            },
            "data_type": null,
            "quote": null,
            "tags": []
          },
          "pull_request_id": {
            "name": "pull_request_id",
            "description": "",
            "meta": {
              "gooddata": {
                "ldm_type": "reference",
                "referenced_table": "pull_requests"
              }
            },
            "data_type": null,
            "quote": null,
            "tags": []
          },
          "created_at": {
            "name": "created_at",
            "description": "Created at",
            "meta": {},
            "data_type": null,
            "quote": null,
            "tags": []
          },
          "review_state": {
            "name": "review_state",
            "description": "Review state",
            "meta": {},
            "data_type": null,
            "quote": null,
            "tags": []
          }
        },
        "meta": {
          "gooddata": {
            "model_id": "github"
          }
        },
        "docs": {
          "show": true,
          "node_color": null
        },
        "patch_path": "cicd_demo://models/_todo/reviews/schema.yml",
        "build_path": null,
        "deferred": false,
        "unrendered_config": {
          "enabled": false,
          "meta": {
            "gooddata": {
              "model_id": "github"
            }
          },
          "indexes": [
            {
              "columns": [
                "review_id"
              ],
              "unique": true
            },
            {
              "columns": [
                "pull_request_id"
              ],
              "unique": false
            }
          ],
          "materialized": "incremental",
          "unique_key": "review_id"
        },
        "created_at": 1692692941.44811,
        "config_call_dict": {
          "indexes": [
            {
              "columns": [
                "review_id"
              ],
              "unique": true
            },
            {
              "columns": [
                "pull_request_id"
              ],
              "unique": false
            }
          ],
          "materialized": "incremental",
          "unique_key": "review_id"
        },
        "relation_name": "\"demo\".\"cicd_input_stage\".\"reviews\"",
        "raw_code": "{{ config(\n  indexes=[\n    {'columns': ['review_id'], 'unique': true},\n    {'columns': ['pull_request_id'], 'unique': false}\n  ],\n  materialized='incremental',\n  unique_key='review_id'\n) }}\n\nwith using_clause as (\n  select\n    *\n  from {{ ref('reviews_extract_json') }}\n  {% if is_incremental() %}\n    where created_at > ( select max(created_at) from {{ this }} )\n  {% endif %}\n),\n\nupdates as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where review_id in ( select review_id from {{ this }} )\n  {% else %}\n    -- No updates when doing full load\n    where 1 = 0\n  {% endif %}\n),\n\ninserts as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where review_id not in ( select review_id from {{ this }} )\n  {% endif %}\n),\n\npull_requests as (\n  select * from {{ ref('pull_requests') }}\n),\n\nfinal as (\n    select\n      r.*,\n      p.pull_request_id\n    from (\n      select * from inserts\n      union all select * from updates\n    ) r\n    join pull_requests p on r.pull_request_url = p.pull_requests_api_url\n)\n\nselect * from final",
        "language": "sql",
        "refs": [
          [
            "reviews_extract_json"
          ],
          [
            "pull_requests"
          ]
        ],
        "sources": [],
        "metrics": [],
        "depends_on": {
          "macros": [
            "macro.dbt.is_incremental"
          ],
          "nodes": []
        },
        "compiled_path": null
      }
    ],
    "model.cicd_demo.reviews_extract_json": [
      {
        "database": "demo",
        "schema": "cicd_input_stage",
        "name": "reviews_extract_json",
        "resource_type": "model",
        "package_name": "cicd_demo",
        "path": "_todo/reviews/reviews_extract_json.sql",
        "original_file_path": "models/_todo/reviews/reviews_extract_json.sql",
        "unique_id": "model.cicd_demo.reviews_extract_json",
        "fqn": [
          "cicd_demo",
          "_todo",
          "reviews",
          "reviews_extract_json"
        ],
        "alias": "reviews_extract_json",
        "checksum": {
          "name": "sha256",
          "checksum": "1944ce16fb319bdf10a5ab62e447235222154b1db06400ce4f7e8d2b17f053b7"
        },
        "config": {
          "enabled": false,
          "alias": null,
          "schema": null,
          "database": null,
          "tags": [],
          "meta": {},
          "materialized": "incremental",
          "incremental_strategy": null,
          "persist_docs": {},
          "quoting": {},
          "column_types": {},
          "full_refresh": null,
          "unique_key": "review_id",
          "on_schema_change": "ignore",
          "grants": {},
          "packages": [],
          "docs": {
            "show": true,
            "node_color": null
          },
          "indexes": [
            {
              "columns": [
                "review_id"
              ],
              "unique": true
            },
            {
              "columns": [
                "pull_request_url"
              ],
              "unique": false
            }
          ],
          "post-hook": [],
          "pre-hook": []
        },
        "tags": [],
        "description": "",
        "columns": {},
        "meta": {},
        "docs": {
          "show": true,
          "node_color": null
        },
        "patch_path": null,
        "build_path": null,
        "deferred": false,
        "unrendered_config": {
          "enabled": false,
          "schema": null,
          "indexes": [
            {
              "columns": [
                "review_id"
              ],
              "unique": true
            },
            {
              "columns": [
                "pull_request_url"
              ],
              "unique": false
            }
          ],
          "materialized": "incremental",
          "unique_key": "review_id"
        },
        "created_at": 1692692941.219485,
        "config_call_dict": {
          "schema": null,
          "indexes": [
            {
              "columns": [
                "review_id"
              ],
              "unique": true
            },
            {
              "columns": [
                "pull_request_url"
              ],
              "unique": false
            }
          ],
          "materialized": "incremental",
          "unique_key": "review_id"
        },
        "relation_name": "\"demo\".\"cicd_input_stage\".\"reviews_extract_json\"",
        "raw_code": "{{ config(\n  schema=var('input_schema'),\n  indexes=[\n    {'columns': ['review_id'], 'unique': true},\n    {'columns': ['pull_request_url'], 'unique': false}\n  ],\n  materialized='incremental',\n  unique_key='review_id'\n) }}\n\n-- Helper step, materialize extracted JSON fields first and then JOIN it with other tables\n-- Incremental mode\n\nwith using_clause as (\n  select\n    id as review_id,\n    submitted_at as created_at, -- The name equals to other timestamps in the model (shared GoodData date dimension)\n    pull_request_url,\n    state as review_state\n  from {{ var(\"input_schema\") }}.reviews\n  {% if is_incremental() %}\n    where submitted_at > ( select max(created_at) from {{ this }} )\n  {% endif %}\n),\n\nupdates as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where review_id in ( select review_id from {{ this }} )\n  {% else %}\n    -- No updates when doing full load\n    where 1 = 0\n  {% endif %}\n),\n\ninserts as (\n  select *\n  from using_clause\n  {% if is_incremental() %}\n    where review_id not in ( select review_id from {{ this }} )\n  {% endif %}\n),\n\nfinal as (\n  select * from inserts\n  union all select * from updates\n)\n\nselect * from final",
        "language": "sql",
        "refs": [],
        "sources": [],
        "metrics": [],
        "depends_on": {
          "macros": [
            "macro.dbt.is_incremental"
          ],
          "nodes": []
        },
        "compiled_path": null
      }
    ]
  },
  "parent_map": {
    "model.cicd_demo.exchange_rate": [],
    "model.cicd_demo.commits": [
      "model.cicd_demo.commits_extract_json",
      "model.cicd_demo.users"
    ],
    "model.cicd_demo.commits_extract_json": [],
    "model.cicd_demo.repos": [
      "model.cicd_demo.pull_requests_extract_json"
    ],
    "model.cicd_demo.pull_requests": [
      "model.cicd_demo.pull_requests_extract_json",
      "model.cicd_demo.repos",
      "model.cicd_demo.users"
    ],
    "model.cicd_demo.pull_requests_extract_json": [],
    "model.cicd_demo.users": [],
    "model.cicd_demo.flights": [],
    "model.cicd_demo.aircraft": [],
    "model.cicd_demo.aircraft_models": [],
    "model.cicd_demo.carriers": [],
    "model.cicd_demo.airports": [],
    "operation.dbt_constraints.dbt_constraints-on-run-end-0": [],
    "test.cicd_demo.dbt_constraints_primary_key_reviews_review_id.7729332da5": [],
    "test.cicd_demo.dbt_constraints_foreign_key_reviews_pull_request_id__pull_request_id__ref_pull_requests_.87966608a7": [
      "model.cicd_demo.pull_requests"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_commits_commit_id.99ea6a0fda": [
      "model.cicd_demo.commits"
    ],
    "test.cicd_demo.dbt_constraints_foreign_key_commits_user_id__user_id__ref_users_.3044de9a97": [
      "model.cicd_demo.commits",
      "model.cicd_demo.users"
    ],
    "test.cicd_demo.dbt_constraints_foreign_key_commits_repo_id__repo_id__ref_repos_.8ec46a93ae": [
      "model.cicd_demo.commits",
      "model.cicd_demo.repos"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_repos_repo_id.c8eca20caa": [
      "model.cicd_demo.repos"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_pull_requests_pull_request_id.919ab5363a": [
      "model.cicd_demo.pull_requests"
    ],
    "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_user_id__user_id__ref_users_.d056122d52": [
      "model.cicd_demo.pull_requests",
      "model.cicd_demo.users"
    ],
    "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_repo_id__repo_id__ref_repos_.06edd7418b": [
      "model.cicd_demo.pull_requests",
      "model.cicd_demo.repos"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_users_user_id.cddf4edd90": [
      "model.cicd_demo.users"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_flights_id2.ab3c5cf673": [
      "model.cicd_demo.flights"
    ],
    "test.cicd_demo.dbt_constraints_foreign_key_flights_carrier__code__ref_carriers_.efed8dff2a": [
      "model.cicd_demo.carriers",
      "model.cicd_demo.flights"
    ],
    "test.cicd_demo.dbt_constraints_foreign_key_flights_origin__code__ref_airports_.42b7c9061a": [
      "model.cicd_demo.airports",
      "model.cicd_demo.flights"
    ],
    "test.cicd_demo.dbt_constraints_foreign_key_flights_tail_num__tail_num__ref_aircraft_.4530d69393": [
      "model.cicd_demo.aircraft",
      "model.cicd_demo.flights"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_aircraft_tail_num.b6907b519f": [
      "model.cicd_demo.aircraft"
    ],
    "test.cicd_demo.dbt_constraints_foreign_key_aircraft_aircraft_model_code__aircraft_model_code__ref_aircraft_models_.5f77421d63": [
      "model.cicd_demo.aircraft",
      "model.cicd_demo.aircraft_models"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_aircraft_models_aircraft_model_code.8cb531c034": [
      "model.cicd_demo.aircraft_models"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_carriers_code.f6c920845b": [
      "model.cicd_demo.carriers"
    ],
    "test.cicd_demo.dbt_constraints_primary_key_airports_code.bc08a869e8": [
      "model.cicd_demo.airports"
    ],
    "metric.cicd_demo.count_commits": [
      "model.cicd_demo.commits"
    ],
    "metric.cicd_demo.count_commit_comments": [
      "model.cicd_demo.commits"
    ],
    "metric.cicd_demo.sum_stargazers": [
      "model.cicd_demo.repos"
    ],
    "metric.cicd_demo.count_pull_requests": [
      "model.cicd_demo.pull_requests"
    ],
    "metric.cicd_demo.count_merged_pull_requests": [
      "model.cicd_demo.pull_requests"
    ],
    "metric.cicd_demo.count_nodraft_pull_requests": [
      "model.cicd_demo.pull_requests"
    ],
    "metric.cicd_demo.sum_days_to_solve": [
      "model.cicd_demo.pull_requests"
    ],
    "metric.cicd_demo.avg_days_to_solve": [
      "model.cicd_demo.pull_requests"
    ]
  },
  "child_map": {
    "model.cicd_demo.exchange_rate": [],
    "model.cicd_demo.commits": [
      "metric.cicd_demo.count_commit_comments",
      "metric.cicd_demo.count_commits",
      "test.cicd_demo.dbt_constraints_foreign_key_commits_repo_id__repo_id__ref_repos_.8ec46a93ae",
      "test.cicd_demo.dbt_constraints_foreign_key_commits_user_id__user_id__ref_users_.3044de9a97",
      "test.cicd_demo.dbt_constraints_primary_key_commits_commit_id.99ea6a0fda"
    ],
    "model.cicd_demo.commits_extract_json": [
      "model.cicd_demo.commits"
    ],
    "model.cicd_demo.repos": [
      "metric.cicd_demo.sum_stargazers",
      "model.cicd_demo.pull_requests",
      "test.cicd_demo.dbt_constraints_foreign_key_commits_repo_id__repo_id__ref_repos_.8ec46a93ae",
      "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_repo_id__repo_id__ref_repos_.06edd7418b",
      "test.cicd_demo.dbt_constraints_primary_key_repos_repo_id.c8eca20caa"
    ],
    "model.cicd_demo.pull_requests": [
      "metric.cicd_demo.avg_days_to_solve",
      "metric.cicd_demo.count_merged_pull_requests",
      "metric.cicd_demo.count_nodraft_pull_requests",
      "metric.cicd_demo.count_pull_requests",
      "metric.cicd_demo.sum_days_to_solve",
      "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_repo_id__repo_id__ref_repos_.06edd7418b",
      "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_user_id__user_id__ref_users_.d056122d52",
      "test.cicd_demo.dbt_constraints_foreign_key_reviews_pull_request_id__pull_request_id__ref_pull_requests_.87966608a7",
      "test.cicd_demo.dbt_constraints_primary_key_pull_requests_pull_request_id.919ab5363a"
    ],
    "model.cicd_demo.pull_requests_extract_json": [
      "model.cicd_demo.pull_requests",
      "model.cicd_demo.repos"
    ],
    "model.cicd_demo.users": [
      "model.cicd_demo.commits",
      "model.cicd_demo.pull_requests",
      "test.cicd_demo.dbt_constraints_foreign_key_commits_user_id__user_id__ref_users_.3044de9a97",
      "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_user_id__user_id__ref_users_.d056122d52",
      "test.cicd_demo.dbt_constraints_primary_key_users_user_id.cddf4edd90"
    ],
    "model.cicd_demo.flights": [
      "test.cicd_demo.dbt_constraints_foreign_key_flights_carrier__code__ref_carriers_.efed8dff2a",
      "test.cicd_demo.dbt_constraints_foreign_key_flights_origin__code__ref_airports_.42b7c9061a",
      "test.cicd_demo.dbt_constraints_foreign_key_flights_tail_num__tail_num__ref_aircraft_.4530d69393",
      "test.cicd_demo.dbt_constraints_primary_key_flights_id2.ab3c5cf673"
    ],
    "model.cicd_demo.aircraft": [
      "test.cicd_demo.dbt_constraints_foreign_key_aircraft_aircraft_model_code__aircraft_model_code__ref_aircraft_models_.5f77421d63",
      "test.cicd_demo.dbt_constraints_foreign_key_flights_tail_num__tail_num__ref_aircraft_.4530d69393",
      "test.cicd_demo.dbt_constraints_primary_key_aircraft_tail_num.b6907b519f"
    ],
    "model.cicd_demo.aircraft_models": [
      "test.cicd_demo.dbt_constraints_foreign_key_aircraft_aircraft_model_code__aircraft_model_code__ref_aircraft_models_.5f77421d63",
      "test.cicd_demo.dbt_constraints_primary_key_aircraft_models_aircraft_model_code.8cb531c034"
    ],
    "model.cicd_demo.carriers": [
      "test.cicd_demo.dbt_constraints_foreign_key_flights_carrier__code__ref_carriers_.efed8dff2a",
      "test.cicd_demo.dbt_constraints_primary_key_carriers_code.f6c920845b"
    ],
    "model.cicd_demo.airports": [
      "test.cicd_demo.dbt_constraints_foreign_key_flights_origin__code__ref_airports_.42b7c9061a",
      "test.cicd_demo.dbt_constraints_primary_key_airports_code.bc08a869e8"
    ],
    "operation.dbt_constraints.dbt_constraints-on-run-end-0": [],
    "test.cicd_demo.dbt_constraints_primary_key_reviews_review_id.7729332da5": [],
    "test.cicd_demo.dbt_constraints_foreign_key_reviews_pull_request_id__pull_request_id__ref_pull_requests_.87966608a7": [],
    "test.cicd_demo.dbt_constraints_primary_key_commits_commit_id.99ea6a0fda": [],
    "test.cicd_demo.dbt_constraints_foreign_key_commits_user_id__user_id__ref_users_.3044de9a97": [],
    "test.cicd_demo.dbt_constraints_foreign_key_commits_repo_id__repo_id__ref_repos_.8ec46a93ae": [],
    "test.cicd_demo.dbt_constraints_primary_key_repos_repo_id.c8eca20caa": [],
    "test.cicd_demo.dbt_constraints_primary_key_pull_requests_pull_request_id.919ab5363a": [],
    "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_user_id__user_id__ref_users_.d056122d52": [],
    "test.cicd_demo.dbt_constraints_foreign_key_pull_requests_repo_id__repo_id__ref_repos_.06edd7418b": [],
    "test.cicd_demo.dbt_constraints_primary_key_users_user_id.cddf4edd90": [],
    "test.cicd_demo.dbt_constraints_primary_key_flights_id2.ab3c5cf673": [],
    "test.cicd_demo.dbt_constraints_foreign_key_flights_carrier__code__ref_carriers_.efed8dff2a": [],
    "test.cicd_demo.dbt_constraints_foreign_key_flights_origin__code__ref_airports_.42b7c9061a": [],
    "test.cicd_demo.dbt_constraints_foreign_key_flights_tail_num__tail_num__ref_aircraft_.4530d69393": [],
    "test.cicd_demo.dbt_constraints_primary_key_aircraft_tail_num.b6907b519f": [],
    "test.cicd_demo.dbt_constraints_foreign_key_aircraft_aircraft_model_code__aircraft_model_code__ref_aircraft_models_.5f77421d63": [],
    "test.cicd_demo.dbt_constraints_primary_key_aircraft_models_aircraft_model_code.8cb531c034": [],
    "test.cicd_demo.dbt_constraints_primary_key_carriers_code.f6c920845b": [],
    "test.cicd_demo.dbt_constraints_primary_key_airports_code.bc08a869e8": [],
    "metric.cicd_demo.count_commits": [],
    "metric.cicd_demo.count_commit_comments": [],
    "metric.cicd_demo.sum_stargazers": [],
    "metric.cicd_demo.count_pull_requests": [],
    "metric.cicd_demo.count_merged_pull_requests": [],
    "metric.cicd_demo.count_nodraft_pull_requests": [],
    "metric.cicd_demo.sum_days_to_solve": [],
    "metric.cicd_demo.avg_days_to_solve": []
  }
}
